/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 5:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/loader/asset.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdLoadAssets: () => (/* binding */ tgdLoadAssets)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 5664);
/* harmony import */ var _binary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binary.js */ 2780);
/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image.js */ 3352);



function tgdLoadAssets(urls) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
        const glb = {};
        const img = {};
        const tasks = [
            ...getPromisedLoaders(_binary_js__WEBPACK_IMPORTED_MODULE_0__.tgdLoadGlb, urls.glb, glb),
            ...getPromisedLoaders(_image_js__WEBPACK_IMPORTED_MODULE_1__.tgdLoadImage, urls.img, img),
        ];
        yield Promise.all(tasks);
        return { glb, img };
    });
}
function getPromisedLoaders(loader, urls, target) {
    return Object.keys(urls !== null && urls !== void 0 ? urls : {}).map(name => new Promise(resolve => {
        if (!urls) {
            resolve();
            return;
        }
        const url = urls[name];
        if (!url) {
            resolve();
            return;
        }
        loader(url)
            .then(value => {
            if (value)
                target[name] = value;
            resolve();
        })
            .catch(() => {
            console.error("Unable to load URL", url);
            resolve();
        });
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9hZGVyL2Fzc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFdEMsTUFBTSxVQUFnQixhQUFhLENBQy9CLElBR0U7O1FBS0YsTUFBTSxHQUFHLEdBQUcsRUFBNkIsQ0FBQTtRQUN6QyxNQUFNLEdBQUcsR0FBRyxFQUFtQyxDQUFBO1FBQy9DLE1BQU0sS0FBSyxHQUFvQjtZQUMzQixHQUFHLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztZQUNoRCxHQUFHLGtCQUFrQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztTQUNyRCxDQUFBO1FBQ0QsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDdkIsQ0FBQztDQUFBO0FBRUQsU0FBUyxrQkFBa0IsQ0FDdkIsTUFBMEMsRUFDMUMsSUFBbUMsRUFDbkMsTUFBb0I7SUFFcEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBSixJQUFJLGNBQUosSUFBSSxHQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FDOUIsSUFBSSxDQUFDLEVBQUUsQ0FDSCxJQUFJLE9BQU8sQ0FBTyxPQUFPLENBQUMsRUFBRTtRQUN4QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQTtZQUNULE9BQU07UUFDVixDQUFDO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQVMsQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNQLE9BQU8sRUFBRSxDQUFBO1lBQ1QsT0FBTTtRQUNWLENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1YsSUFBSSxLQUFLO2dCQUFFLE1BQU0sQ0FBQyxJQUFTLENBQUMsR0FBRyxLQUFLLENBQUE7WUFDcEMsT0FBTyxFQUFFLENBQUE7UUFDYixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUN4QyxPQUFPLEVBQUUsQ0FBQTtRQUNiLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQyxDQUFDLENBQ1QsQ0FBQTtBQUNMLENBQUMifQ==

/***/ }),

/***/ 9:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/parser/for-each-line.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   forEachLine: () => (/* binding */ forEachLine)
/* harmony export */ });
/**
 * Generator to iterate on each lines of a big string content.
 */
const forEachLine = function* (content) {
    const length = content.length;
    let index = 0;
    let cursor = 0;
    while (index > -1 && index < length) {
        index = content.indexOf("\n", cursor);
        if (index < 0)
            break;
        yield content.slice(cursor, index).trim();
        cursor = index + 1;
    }
    return content.slice(cursor).trim();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yLWVhY2gtbGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvZm9yLWVhY2gtbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsRUFBRSxPQUFlO0lBQ2pELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUE7SUFDN0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBQ2QsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ2xDLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNyQyxJQUFJLEtBQUssR0FBRyxDQUFDO1lBQUUsTUFBSztRQUVwQixNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3pDLE1BQU0sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFDRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDdkMsQ0FBQyxDQUFBIn0=

/***/ }),

/***/ 106:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/utils/fullscreen.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdFullscreenExit: () => (/* binding */ tgdFullscreenExit),
/* harmony export */   tgdFullscreenRequest: () => (/* binding */ tgdFullscreenRequest),
/* harmony export */   tgdFullscreenTest: () => (/* binding */ tgdFullscreenTest),
/* harmony export */   tgdFullscreenToggle: () => (/* binding */ tgdFullscreenToggle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 5664);

/**
 * Check if an element is in fullscreen or not.
 * @returns `true` if `elem` is displayed in fullscreen.
 */
function tgdFullscreenTest(element) {
    const root = document.fullscreenElement;
    if (!element || !root)
        return false;
    let parent = element.parentElement;
    while (parent) {
        if (parent === document.fullscreenElement) {
            return (root.clientWidth === element.clientWidth &&
                root.clientHeight === element.clientHeight);
        }
        parent = parent.parentElement;
    }
    return document.fullscreenElement === element;
}
/**
 * Request for an element to go fullscreen.
 * @returns `true` in case of success.
 */
function tgdFullscreenRequest(element, options) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        if (!element)
            return false;
        try {
            yield element.requestFullscreen(options !== null && options !== void 0 ? options : {
                navigationUI: "hide",
            });
            return true;
        }
        catch (_a) {
            return false;
        }
    });
}
/**
 * Exit fullscreen mode.
 * @returns `true` in case of success.
 */
function tgdFullscreenExit() {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        if (!document.fullscreenElement)
            return false;
        try {
            yield document.exitFullscreen();
            return true;
        }
        catch (_a) {
            return false;
        }
    });
}
/**
 * If `element` is not in fullscreen mode, request it.
 * Otherwise, exit from fullscreen mode.
 */
function tgdFullscreenToggle(element, options) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        if (!element)
            return false;
        return tgdFullscreenTest(element)
            ? tgdFullscreenExit()
            : tgdFullscreenRequest(element, options !== null && options !== void 0 ? options : {
                navigationUI: "hide",
            });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9mdWxsc2NyZWVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBdUI7SUFDckQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFBO0lBQ3ZDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJO1FBQUUsT0FBTyxLQUFLLENBQUE7SUFFbkMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQTtJQUNsQyxPQUFPLE1BQU0sRUFBRSxDQUFDO1FBQ1osSUFBSSxNQUFNLEtBQUssUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDeEMsT0FBTyxDQUNILElBQUksQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDLFdBQVc7Z0JBQ3hDLElBQUksQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFlBQVksQ0FDN0MsQ0FBQTtRQUNMLENBQUM7UUFDRCxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQTtJQUNqQyxDQUFDO0lBQ0QsT0FBTyxRQUFRLENBQUMsaUJBQWlCLEtBQUssT0FBTyxDQUFBO0FBQ2pELENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQWdCLG9CQUFvQixDQUN0QyxPQUF1QixFQUN2QixPQUEyQjs7UUFFM0IsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUUxQixJQUFJLENBQUM7WUFDRCxNQUFNLE9BQU8sQ0FBQyxpQkFBaUIsQ0FDM0IsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUk7Z0JBQ1AsWUFBWSxFQUFFLE1BQU07YUFDdkIsQ0FDSixDQUFBO1lBQ0QsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQUMsV0FBTSxDQUFDO1lBQ0wsT0FBTyxLQUFLLENBQUE7UUFDaEIsQ0FBQztJQUNMLENBQUM7Q0FBQTtBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBZ0IsaUJBQWlCOztRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQjtZQUFFLE9BQU8sS0FBSyxDQUFBO1FBRTdDLElBQUksQ0FBQztZQUNELE1BQU0sUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQy9CLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUFDLFdBQU0sQ0FBQztZQUNMLE9BQU8sS0FBSyxDQUFBO1FBQ2hCLENBQUM7SUFDTCxDQUFDO0NBQUE7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQWdCLG1CQUFtQixDQUNyQyxPQUF1QixFQUN2QixPQUEyQjs7UUFFM0IsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUUxQixPQUFPLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztZQUM3QixDQUFDLENBQUMsaUJBQWlCLEVBQUU7WUFDckIsQ0FBQyxDQUFDLG9CQUFvQixDQUNoQixPQUFPLEVBQ1AsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUk7Z0JBQ1AsWUFBWSxFQUFFLE1BQU07YUFDdkIsQ0FDSixDQUFBO0lBQ1gsQ0FBQztDQUFBIn0=

/***/ }),

/***/ 110:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/mesh/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMesh: () => (/* reexport safe */ _mesh_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterMesh)
/* harmony export */ });
/* harmony import */ var _mesh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mesh.js */ 8208);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGFpbnRlci9tZXNoL21lc2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxRQUFRLENBQUEifQ==

/***/ }),

/***/ 177:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/types/input-keyboard.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQta2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvaW5wdXQta2V5Ym9hcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9

/***/ }),

/***/ 277:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/mat3.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMat3: () => (/* binding */ TgdMat3)
/* harmony export */ });
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../debug/index.js */ 9205);
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec3.js */ 7389);
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec4.js */ 6648);
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat4.js */ 5008);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ 1304);





/**
 * Column-first 3x3 matrix.
 *
 * - `m12` means row 2 and column 3 (__A__).
 * - `m20` means row 3 and column 1 (__B__).
 *
 * ```
 * +-+-+-+
 * | | | |
 * +-+-+-+
 * | | |A|
 * +-+-+-+
 * |B| | |
 * +-+-+-+
 * ```
 *
 * This is how mathematicians use matrices.
 *
 * But, internally, for WebGL compliance, we store the data like this:
 *
 * ```
 * +-+-+-+
 * |0|3|6|
 * +-+-+-+
 * |1|4|7|
 * +-+-+-+
 * |2|5|8|
 * +-+-+-+
 * ```
 *
 * That's why is better to access members through the accessor `m00`, `m01`, etc.
 */
class TgdMat3 extends Float32Array {
    constructor(m00 = 1, m10 = 0, m20 = 0, m01 = 0, m11 = 1, m21 = 0, m02 = 0, m12 = 0, m22 = 1) {
        if (typeof m00 === "number" &&
            typeof m10 === "number" &&
            typeof m20 === "number") {
            super([m00, m10, m20, m01, m11, m21, m02, m12, m22]);
        }
        else if ((m00 instanceof _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3 || m00 instanceof _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4) &&
            (m10 instanceof _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3 || m10 instanceof _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4) &&
            (m20 instanceof _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3 || m20 instanceof _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4)) {
            const col1 = m00;
            const col2 = m10;
            const col3 = m20;
            // prettier-ignore
            super([
                col1.x, col1.y, col1.z,
                col2.x, col2.y, col2.z,
                col3.x, col3.y, col3.z
            ]);
        }
        else if (m00 instanceof TgdMat3) {
            const mat3 = m00;
            super([
                mat3.m00,
                mat3.m10,
                mat3.m20,
                mat3.m01,
                mat3.m11,
                mat3.m21,
                mat3.m02,
                mat3.m12,
                mat3.m22,
            ]);
        }
        else if (m00 instanceof _mat4_js__WEBPACK_IMPORTED_MODULE_3__.TgdMat4) {
            const mat4 = m00;
            super([
                mat4.m00,
                mat4.m10,
                mat4.m20,
                mat4.m01,
                mat4.m11,
                mat4.m21,
                mat4.m02,
                mat4.m12,
                mat4.m22,
            ]);
        }
        else {
            // eslint-disable-next-line prefer-rest-params
            console.error("[TgdMat3]", arguments);
            throw new Error(`Invalid TgdMat3 initialization!`);
        }
    }
    multiply(mat) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.multiply(this, this, mat);
        return this;
    }
    transpose() {
        let temporary = this.m10;
        this.m10 = this.m01;
        this.m01 = temporary;
        temporary = this.m20;
        this.m20 = this.m02;
        this.m02 = temporary;
        temporary = this.m21;
        this.m21 = this.m12;
        this.m12 = temporary;
        return this;
    }
    fromQuat({ x, y, z, w }) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.fromQuat(this, [x, y, z, w]);
        return this;
    }
    toAxes(axisX, axisY, axisZ) {
        this.toAxisX(axisX);
        this.toAxisY(axisY);
        return this.toAxisZ(axisZ);
    }
    toAxisX(axisX) {
        axisX.x = this.m00;
        axisX.y = this.m01;
        axisX.z = this.m02;
        return this;
    }
    toAxisY(axisY) {
        axisY.x = this.m10;
        axisY.y = this.m11;
        axisY.z = this.m12;
        return this;
    }
    toAxisZ(axisZ) {
        axisZ.x = this.m20;
        axisZ.y = this.m21;
        axisZ.z = this.m22;
        return this;
    }
    scale(factor) {
        this[0] *= factor;
        this[1] *= factor;
        this[2] *= factor;
        this[3] *= factor;
        this[4] *= factor;
        this[5] *= factor;
        this[6] *= factor;
        this[7] *= factor;
        this[8] *= factor;
        return this;
    }
    get m00() {
        return this[IDX_m00];
    }
    set m00(v) {
        this[IDX_m00] = v;
    }
    get m10() {
        return this[IDX_m10];
    }
    set m10(v) {
        this[IDX_m10] = v;
    }
    get m20() {
        return this[IDX_m20];
    }
    set m20(v) {
        this[IDX_m20] = v;
    }
    get m01() {
        return this[IDX_m01];
    }
    set m01(v) {
        this[IDX_m01] = v;
    }
    get m11() {
        return this[IDX_m11];
    }
    set m11(v) {
        this[IDX_m11] = v;
    }
    get m21() {
        return this[IDX_m21];
    }
    set m21(v) {
        this[IDX_m21] = v;
    }
    get m02() {
        return this[IDX_m02];
    }
    set m02(v) {
        this[IDX_m02] = v;
    }
    get m12() {
        return this[IDX_m12];
    }
    set m12(v) {
        this[IDX_m12] = v;
    }
    get m22() {
        return this[IDX_m22];
    }
    set m22(v) {
        this[IDX_m22] = v;
    }
    debug(caption = "Mat3") {
        const row0 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m00, this.m01, this.m02]);
        const row1 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m10, this.m11, this.m12]);
        const row2 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m20, this.m21, this.m22]);
        console.log(caption, this.slice());
        console.log("   ", row0.join(" | "));
        console.log("   ", row1.join(" | "));
        console.log("   ", row2.join(" | "));
    }
}
const IDX_m00 = 0;
const IDX_m10 = 1;
const IDX_m20 = 2;
const IDX_m01 = 3;
const IDX_m11 = 4;
const IDX_m21 = 5;
const IDX_m02 = 6;
const IDX_m12 = 7;
const IDX_m22 = 8;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 285:
/*!********************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/gizmo/painter/tips.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TipsPainter: () => (/* binding */ TipsPainter)
/* harmony export */ });
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../dataset/index.js */ 5710);
/* harmony import */ var _painter_painter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../painter/painter.js */ 2362);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../utils/index.js */ 3291);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../vao/index.js */ 9856);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../texture/index.js */ 4765);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../program/index.js */ 9974);
/* harmony import */ var _shader_frag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shader.frag */ 8781);
/* harmony import */ var _shader_vert__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shader.vert */ 1088);








class TipsPainter extends _painter_painter_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainter {
    constructor(context) {
        super();
        this.context = context;
        this.texture = new _texture_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdTexture2D(context)
            .loadBitmap(createTipsCanvas())
            .setParams({
            minFilter: "LINEAR",
            magFilter: "LINEAR",
        })
            .generateMipmap();
        const data = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset({
            attPos: "vec3",
            attUV: "vec2",
        });
        // prettier-ignore
        data.set("attPos", new Float32Array([
            1, 0, 0,
            0, 1, 0,
            0, 0, 1,
            -1, 0, 0,
            0, -1, 0,
            0, 0, -1,
        ]));
        const X = 1 / 3;
        const Y = 1 / 2;
        // prettier-ignore
        data.set("attUV", new Float32Array([
            0, 0,
            X, 0,
            2 * X, 0,
            0, Y,
            X, Y,
            2 * X, Y,
        ]));
        const prg = new _program_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdProgram(context.gl, { vert: _shader_vert__WEBPACK_IMPORTED_MODULE_7__, frag: _shader_frag__WEBPACK_IMPORTED_MODULE_6__ });
        const vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdVertexArray(context.gl, prg, [data]);
        this.prg = prg;
        this.vao = vao;
    }
    delete() {
        this.vao.delete();
    }
    paint() {
        const { context, prg, vao } = this;
        const { gl, camera } = context;
        prg.use();
        this.texture.activate(0);
        prg.uniform1i("uniTexture", 0);
        prg.uniform1f("uniScreenHeight", context.height);
        prg.uniformMatrix4fv("uniModelViewMatrix", camera.matrixModelView);
        prg.uniformMatrix4fv("uniProjectionMatrix", camera.matrixProjection);
        vao.bind();
        gl.drawArrays(gl.POINTS, 0, 6);
    }
}
function createTipsCanvas() {
    const SIZE = 256;
    const { canvas, ctx } = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.tgdCanvasCreateWithContext2D)(SIZE * 3, SIZE * 2);
    paintDisk(ctx, 0, 0, SIZE, "X", "#f00", "#fff");
    paintDisk(ctx, 1, 0, SIZE, "Y", "#0f0", "#000");
    paintDisk(ctx, 2, 0, SIZE, "Z", "#00f", "#fff");
    paintDisk(ctx, 0, 1, SIZE, "", "#f00", "#500");
    paintDisk(ctx, 1, 1, SIZE, "", "#0f0", "#050");
    paintDisk(ctx, 2, 1, SIZE, "", "#00f", "#005");
    return canvas;
}
function paintDisk(context, col, row, size, text, colorBack, colorText = "#fff") {
    const x = (col + 0.5) * size;
    const y = (row + 0.5) * size;
    const r = size * 0.45;
    context.fillStyle = colorBack;
    context.beginPath();
    context.ellipse(x, y, r, r, 0, 0, 2 * Math.PI);
    context.fill();
    if (text) {
        context.font = `bold ${size * 0.5}px sans-serif`;
        context.fillStyle = colorText;
        context.textAlign = "center";
        context.textBaseline = "middle";
        context.fillText(text, x, y);
    }
    else {
        context.fillStyle = colorText;
        context.beginPath();
        context.ellipse(x, y, r * 0.8, r * 0.8, 0, 0, 2 * Math.PI);
        context.fill();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jYW52YXMvZ2l6bW8vcGFpbnRlci90aXBzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2pELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUV6QyxPQUFPLElBQUksTUFBTSxlQUFlLENBQUE7QUFDaEMsT0FBTyxJQUFJLE1BQU0sZUFBZSxDQUFBO0FBRWhDLE1BQU0sT0FBTyxXQUFZLFNBQVEsVUFBVTtJQUt2QyxZQUE2QixPQUFtQjtRQUM1QyxLQUFLLEVBQUUsQ0FBQTtRQURrQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBRTVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDO2FBQ25DLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQzlCLFNBQVMsQ0FBQztZQUNQLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFNBQVMsRUFBRSxRQUFRO1NBQ3RCLENBQUM7YUFDRCxjQUFjLEVBQUUsQ0FBQTtRQUNyQixNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUN4QixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxNQUFNO1NBQ2hCLENBQUMsQ0FBQTtRQUNGLGtCQUFrQjtRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLFlBQVksQ0FBQztZQUMvQixDQUFDLEVBQUcsQ0FBQyxFQUFHLENBQUM7WUFDVCxD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

/***/ }),

/***/ 303:
/*!**********************************!*\
  !*** ../../tgd2/lib/dist/log.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdLogger: () => (/* binding */ TgdLogger)
/* harmony export */ });
class TgdLogger {
    constructor() {
        this.level = 0;
        this.lookupTable = new Map();
    }
    lookup(gl, value) {
        var _a;
        if (typeof value !== "number")
            return JSON.stringify(value);
        const { lookupTable } = this;
        if (lookupTable.size === 0) {
            // initialize lookup table.
            for (const key in gl) {
                const value_ = gl[key];
                if (typeof value_ === "number") {
                    lookupTable.set(value_, `gl.${key}`);
                }
            }
        }
        return (_a = lookupTable.get(value)) !== null && _a !== void 0 ? _a : `gl[${value}]`;
    }
    call(name, function_) {
        const indent = "  ".repeat(this.level);
        console.log(`${indent}>>>`, name);
        this.level++;
        const time = Date.now();
        try {
            return function_();
        }
        catch (error) {
            console.error(error);
            throw error;
        }
        finally {
            this.level--;
            console.log(`${indent}<<<`, name, `(${Date.now() - time} ms)`);
        }
    }
    stateDepth(gl) {
        console.log("// [State] Depth");
        const enabled = gl.getParameter(gl.DEPTH_TEST);
        if (enabled) {
            console.log("gl.enable( gl.DEPTH_TEST )");
            console.log("gl.depthFunc(", this.lookup(gl, gl.getParameter(gl.DEPTH_FUNC)), ")");
            console.log("gl.depthMask(", this.lookup(gl, gl.getParameter(gl.DEPTH_WRITEMASK)), ")");
            const [rangeMin, rangeMax] = gl.getParameter(gl.DEPTH_RANGE);
            console.log("gl.depthRange(", rangeMin, ",", rangeMax, ")");
        }
        else {
            console.log("gl.disable( gl.DEPTH_TEST )");
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sU0FBUztJQUF0QjtRQUNZLFVBQUssR0FBRyxDQUFDLENBQUE7UUFDQSxnQkFBVyxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFBO0lBeUQ1RCxDQUFDO0lBdkRHLE1BQU0sQ0FBQyxFQUEwQixFQUFFLEtBQWM7O1FBQzdDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUUzRCxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQzVCLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QiwyQkFBMkI7WUFDM0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQztnQkFDbkIsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDLEdBQW1DLENBQUMsQ0FBQTtnQkFDL0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztvQkFDN0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFBO2dCQUN4QyxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLE1BQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsbUNBQUksTUFBTSxLQUFLLEdBQUcsQ0FBQTtJQUNuRCxDQUFDO0lBRUQsSUFBSSxDQUFJLElBQVksRUFBRSxTQUFrQjtRQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDakMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1osTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ3ZCLElBQUksQ0FBQztZQUNELE9BQU8sU0FBUyxFQUFFLENBQUE7UUFDdEIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BCLE1BQU0sS0FBSyxDQUFBO1FBQ2YsQ0FBQztnQkFBUyxDQUFDO1lBQ1AsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1lBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFBO1FBQ2xFLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLEVBQTBCO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQVksQ0FBQTtRQUN6RCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO1lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQ1AsZUFBZSxFQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQy9DLEdBQUcsQ0FDTixDQUFBO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FDUCxlQUFlLEVBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsRUFDcEQsR0FBRyxDQUNOLENBQUE7WUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQ3hDLEVBQUUsQ0FBQyxXQUFXLENBQ0QsQ0FBQTtZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQy9ELENBQUM7YUFBTSxDQUFDO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1FBQzlDLENBQUM7SUFDTCxDQUFDO0NBQ0oifQ==

/***/ }),

/***/ 336:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/axes/axes.vert ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform vec4 uniTS;\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\n\nin vec3 attPos;\nin vec4 attColor;\n\nout vec4 varColor;\n\nvoid main() {\n    varColor = attColor;\n    vec3 translate = uniTS.xyz;\n    float scale = uniTS.w;\n    gl_Position = uniProjectionMatrix \n        * uniModelViewMatrix \n        * vec4(attPos * scale + translate, 1.0);\n}\n";

/***/ }),

/***/ 407:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/webgl/texture/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglTextureCreate: () => (/* reexport safe */ _texture2d_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureCreate),
/* harmony export */   webglTextureCreate2DFromArray: () => (/* reexport safe */ _texture2d_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureCreate2DFromArray),
/* harmony export */   webglTextureParametersSet: () => (/* reexport safe */ _texture2d_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureParametersSet)
/* harmony export */ });
/* harmony import */ var _texture2d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture2d.js */ 9138);
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ 2958);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd2ViZ2wvdGV4dHVyZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGFBQWEsQ0FBQTtBQUMzQixjQUFjLFNBQVMsQ0FBQSJ9

/***/ }),

/***/ 525:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/factory/mesh-glb.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdMakeMeshGlbPainter: () => (/* binding */ tgdMakeMeshGlbPainter)
/* harmony export */ });
/* harmony import */ var _painter_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../painter/index.js */ 6009);
/* harmony import */ var _types_guards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../types/guards.js */ 7937);


/**
 * Create a `TgdPainterNode` from a node hierarchy from a GLTF structure.
 * @param options
 * * `data`: a GLTF parser
 * * `context`: we will create painters, so we need a TgdContext
 * * `node`: the root node you want to paint.
 * @returns
 */
function tgdMakeMeshGlbPainter(options) {
    const { data, node = 0 } = options;
    const actualNode = getActualNode(data, node);
    const painter = makeNodePainter(actualNode, options);
    return { painter };
}
function getActualNode(data, node) {
    if ((0,_types_guards_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(node))
        return data.getNode(node);
    if ((0,_types_guards_js__WEBPACK_IMPORTED_MODULE_1__.isString)(node))
        return data.getNodeByNameOrThrow(node);
    return node;
}
function makeNodePainter(node, options) {
    const transfo = {};
    if (node.translation) {
        transfo.position = node.translation;
    }
    if (node.rotation) {
        transfo.orientation = node.rotation;
    }
    if (node.scale) {
        transfo.scale = node.scale;
    }
    const { data } = options;
    const children = makeMeshPainters(node.mesh, options);
    if (node.children) {
        for (const nodeIndex of node.children) {
            children.push(makeNodePainter(data.getNode(nodeIndex), options));
        }
    }
    const painter = new _painter_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterNode({
        name: `TgdPainterNode::${node.name}`,
        transfo,
        children,
    });
    return painter;
}
function makeMeshPainters(meshIndex, options) {
    var _a, _b;
    if (!(0,_types_guards_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(meshIndex))
        return [];
    const { data, context, overrideMaterial, excludeByMaterialName, includeOnlyMaterialNames, } = options;
    const mesh = data.getMesh(meshIndex);
    const targets = [];
    for (let primitiveIndex = 0; primitiveIndex < mesh.primitives.length; primitiveIndex++) {
        const primitive = data.getMeshPrimitive(meshIndex, primitiveIndex);
        const material = (0,_types_guards_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(primitive.material)
            ? data.getMaterial(primitive.material)
            : null;
        const materialName = (_a = material === null || material === void 0 ? void 0 : material.name) !== null && _a !== void 0 ? _a : `#${primitive.material}`;
        if (excludeByMaterialName &&
            excludeByMaterialName.includes(materialName)) {
            // Skipping this primitive because the material has been excluded.
            continue;
        }
        if (includeOnlyMaterialNames &&
            !includeOnlyMaterialNames.includes(materialName)) {
            // If we have an include only list, we skip everything else.
            continue;
        }
        const materialFactory = overrideMaterial === null || overrideMaterial === void 0 ? void 0 : overrideMaterial({
            data,
            mesh,
            primitive,
        });
        const target = new _painter_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterMeshGltf(context, {
            name: `${mesh.name}/${(_b = material === null || material === void 0 ? void 0 : material.name) !== null && _b !== void 0 ? _b : ""}`,
            asset: data,
            meshIndex,
            primitiveIndex,
            materialFactory,
        });
        targets.push(target);
    }
    return targets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC1nbGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmFjdG9yeS9tZXNoLWdsYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLGNBQWMsR0FFakIsTUFBTSxjQUFjLENBQUE7QUFTckIsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQTJCdEQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxPQUFrQztJQUdwRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUE7SUFDbEMsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM1QyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQTtBQUN0QixDQUFDO0FBRUQsU0FBUyxhQUFhLENBQ2xCLElBQWdCLEVBQ2hCLElBQXlDO0lBRXpDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM3QyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxRCxPQUFPLElBQUksQ0FBQTtBQUNmLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FDcEIsSUFBdUIsRUFDdkIsT0FBa0M7SUFFbEMsTUFBTSxPQUFPLEdBQStCLEVBQUUsQ0FBQTtJQUM5QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUE7SUFDdkMsQ0FBQztJQUNELElBQUksSUFBSSxDQUFDLFFB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

/***/ }),

/***/ 557:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/gizmo/gizmo.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCanvasGizmo: () => (/* binding */ TgdCanvasGizmo)
/* harmony export */ });
/* harmony import */ var _camera_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../camera/index.js */ 7601);
/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../context/index.js */ 4773);
/* harmony import */ var _controller_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../controller/index.js */ 9798);
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../event/index.js */ 5018);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _painter_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../painter/index.js */ 6009);
/* harmony import */ var _painter_tips_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./painter/tips.js */ 285);
/* eslint-disable unicorn/prevent-abbreviations */







/**
 * The Gizmo displays the orientation of an attached camera.
 * You can click one of the axis to force the camera to face it.
 */
class TgdCanvasGizmo {
    constructor(options = {}) {
        this.options = options;
        /**
         * The user clicked a tip, so we dispatch the target orientation.
         */
        this.eventTipClick = new _event_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdEvent();
        this._canvas = null;
        this.context = null;
        this.contextExternal = null;
        this.cameraInternal = new _camera_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdCameraPerspective({
            fovy: Math.PI / 3,
            near: 0.01,
            far: 10,
            transfo: { distance: 2.7 },
        });
        this.orbiter = null;
        this.tipsPainter = null;
        this.handleExternalPaint = () => {
            var _a;
            (_a = this.context) === null || _a === void 0 ? void 0 : _a.paint();
        };
        this.handleInternalToExternal = (internalCamera) => {
            const { contextExternal } = this;
            if (contextExternal === null || contextExternal === void 0 ? void 0 : contextExternal.camera) {
                contextExternal.camera.transfo.orientation =
                    internalCamera.transfo.orientation;
                contextExternal.paint();
            }
        };
        this.handleTap = (event) => {
            var _a;
            const camera = (_a = this.context) === null || _a === void 0 ? void 0 : _a.camera;
            if (!camera)
                return;
            const { origin, direction } = camera.castRay(event.x, event.y);
            const maxDistance = 1;
            let bestDistance = maxDistance;
            let bestTip = TIPS[0];
            for (const tip of TIPS) {
                const distance = tip.distanceToLineSquared(origin, direction);
                if (distance < bestDistance) {
                    bestDistance = distance;
                    bestTip = tip;
                }
            }
            if (bestDistance < maxDistance) {
                const axisX = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3();
                const axisY = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3();
                const axisZ = bestTip;
                axisX.from(this.findAxisX());
                if (axisX.isClose(axisZ)) {
                    axisY.from(this.findAxisY());
                    axisX.from(axisY).cross(axisZ);
                }
                else {
                    axisY.from(axisZ).cross(axisX);
                }
                const quat = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdQuat().fromAxes(axisX, axisY, axisZ);
                if (quat.isEqual(camera.transfo.orientation)) {
                    quat.rotateAroundY(Math.PI);
                }
                this.eventTipClick.dispatch({
                    from: camera.transfo.orientation,
                    to: quat,
                });
            }
        };
        if (options.canvas)
            this.canvas = options.canvas;
    }
    /**
     * Attach the camera we want to track and control.
     */
    attachContext(context) {
        this.detach();
        this.contextExternal = context;
        this.attach();
    }
    detach() {
        if (!this.contextExternal)
            return;
        this.contextExternal.eventPaint.removeListener(this.handleExternalPaint);
        this.contextExternal = null;
    }
    attach() {
        var _a, _b;
        (_a = this.contextExternal) === null || _a === void 0 ? void 0 : _a.eventPaint.addListener(this.handleExternalPaint);
        (_b = this.context) === null || _b === void 0 ? void 0 : _b.paint();
    }
    get canvas() {
        return this._canvas;
    }
    set canvas(canvas) {
        var _a;
        if (canvas === this._canvas)
            return;
        this._canvas = canvas;
        if (this.context) {
            this.context.inputs.pointer.eventTap.removeListener(this.handleTap);
            this.context.destroy();
            this.context = null;
            const { orbiter } = this;
            if (orbiter) {
                orbiter.detach();
                orbiter.eventChange.removeListener(this.handleInternalToExternal);
            }
        }
        (_a = this.tipsPainter) === null || _a === void 0 ? void 0 : _a.delete();
        if (!canvas)
            return;
        const context = new _context_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdContext(canvas, Object.assign({ alpha: true, depth: true, antialias: true, name: "GizmoCanvas" }, this.options));
        context.inputs.pointer.eventTap.addListener(this.handleTap);
        this.context = context;
        context.camera = this.cameraInternal;
        this.orbiter = new _controller_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdControllerCameraOrbit(context, {
            speedPanning: 0,
            speedZoom: 0,
        });
        this.orbiter.eventChange.addListener(this.handleInternalToExternal);
        const painter = new _painter_tips_js__WEBPACK_IMPORTED_MODULE_6__.TipsPainter(context);
        this.tipsPainter = painter;
        context.add(new _painter_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdPainterLogic(() => {
            var _a, _b;
            const srcTransfo = (_a = this.contextExternal) === null || _a === void 0 ? void 0 : _a.camera.transfo;
            if (!srcTransfo)
                return;
            const dstTransfo = (_b = this.context) === null || _b === void 0 ? void 0 : _b.camera.transfo;
            if (!dstTransfo)
                return;
            dstTransfo.orientation = srcTransfo.orientation;
        }), new _painter_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdPainterClear(context, {
            color: [0, 0, 0, 0],
            depth: 1,
        }), new _painter_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdPainterDepth(context, { enabled: true }), painter);
        context.paint();
    }
    findAxisX() {
        let bestScore = 0;
        let bestTip = TIPS[0];
        const vec = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3();
        const mat = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdMat3();
        mat.fromQuat(this.cameraInternal.transfo.orientation).transpose();
        for (const tip of TIPS) {
            vec.from(tip).applyMatrix(mat);
            if (vec.x > bestScore) {
                bestScore = vec.x;
                bestTip = tip;
            }
        }
        return bestTip;
    }
    findAxisY() {
        let bestScore = 0;
        let bestTip = TIPS[0];
        const vec = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3();
        const mat = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdMat3();
        mat.fromQuat(this.cameraInternal.transfo.orientation).transpose();
        for (const tip of TIPS) {
            vec.from(tip).applyMatrix(mat);
            if (vec.y > bestScore) {
                bestScore = vec.y;
                bestTip = tip;
            }
        }
        return bestTip;
    }
}
const TIPS = [
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(1, 0, 0),
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(0, 1, 0),
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(0, 0, 1),
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(-1, 0, 0),
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(0, -1, 0),
    new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec3(0, 0, -1),
];
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 558:
/*!******************************!*\
  !*** ./src/font/josefin.css ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ 5072);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ 7825);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ 7659);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ 5056);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ 540);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ 1113);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./josefin.css */ 631);

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);


if (true) {
  if (!_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }
  var p;
  for (p in a) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }
    if (a[p] !== b[p]) {
      return false;
    }
  }
  for (p in b) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }
    if (!a[p]) {
      return false;
    }
  }
  return true;
};
    var isNamedExport = !_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;
    var oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

    module.hot.accept(
      /*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./josefin.css */ 631,
      __WEBPACK_OUTDATED_DEPENDENCIES__ => { /* harmony import */ _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./josefin.css */ 631);
(function () {
        if (!isEqualLocals(oldLocals, isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals, isNamedExport)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

              update(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"]);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}



       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_josefin_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ 631:
/*!************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/font/josefin.css ***!
  \************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 1354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ 6314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ 417);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! josefin.woff2 */ 680), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/* latin-ext */
@font-face {
  font-family: josefin-sans;
  font-style: normal;
  font-weight: 400;
  src: local('Josefin Sans'), local('JosefinSans'), url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format('woff2');
  unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
  font-family: josefin-sans;
  font-style: normal;
  font-weight: 400;
  src: local('Josefin Sans'), local('JosefinSans'), url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;
}
`, "",{"version":3,"sources":["webpack://./src/font/josefin.css"],"names":[],"mappings":"AAAA,cAAc;AACd;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,yGAAoF;EACpF,2FAA2F;AAC7F;AACA,UAAU;AACV;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,yGAAoF;EACpF,4IAA4I;AAC9I","sourcesContent":["/* latin-ext */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(josefin.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(josefin.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 640:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/painter/clear.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterClear: () => (/* binding */ TgdPainterClear)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./painter.js */ 2362);

/**
 * @see {@link TgdPainterClearOptions}
 */
class TgdPainterClear extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor({ gl }, options = {}) {
        var _a, _b, _c, _d;
        super();
        this.options = options;
        this.red = 1;
        this.green = 0.7;
        this.blue = 0;
        this.alpha = 1;
        this.depth = 1;
        this.stencil = 0;
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `Clear/${this.name}`;
        this.gl = gl;
        const color = (_b = options.color) !== null && _b !== void 0 ? _b : [0, 0, 0, 1];
        const depth = (_c = options.depth) !== null && _c !== void 0 ? _c : 1;
        const stencil = (_d = options.stencil) !== null && _d !== void 0 ? _d : 0;
        this.clearMask = 0;
        let hasAnyOption = false;
        if (options.color !== undefined) {
            this.clearMask |= gl.COLOR_BUFFER_BIT;
            hasAnyOption = true;
        }
        if (typeof options.depth === "number") {
            this.clearMask |= gl.DEPTH_BUFFER_BIT;
            hasAnyOption = true;
        }
        if (typeof options.stencil === "number") {
            this.clearMask |= gl.STENCIL_BUFFER_BIT;
            hasAnyOption = true;
        }
        if (!hasAnyOption) {
            throw new Error("[TgdPainterClear] You must give at least a color or a depth in the constructor!");
        }
        ;
        [this.red, this.green, this.blue, this.alpha] = color;
        this.depth = depth;
        this.stencil = stencil;
    }
    /** Nothing to destroy. */
    delete() { }
    paint() {
        const { clearMask, gl, red, green, blue, alpha, depth, stencil, options, } = this;
        if (options.color)
            gl.clearColor(red, green, blue, alpha);
        if (typeof options.depth === "number") {
            gl.clearDepth(depth);
        }
        if (typeof options.stencil === "number") {
            gl.stencilMask(0xff);
            gl.clearStencil(stencil);
        }
        gl.clear(clearMask);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9jbGVhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBU3RDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWdCLFNBQVEsVUFBVTtJQVczQyxZQUNJLEVBQUUsRUFBRSxFQUFrQyxFQUNyQixVQUEyQyxFQUFFOztRQUU5RCxLQUFLLEVBQUUsQ0FBQTtRQUZVLFlBQU8sR0FBUCxPQUFPLENBQXNDO1FBVDNELFFBQUcsR0FBRyxDQUFDLENBQUE7UUFDUCxVQUFLLEdBQUcsR0FBRyxDQUFBO1FBQ1gsU0FBSSxHQUFHLENBQUMsQ0FBQTtRQUNSLFVBQUssR0FBRyxDQUFDLENBQUE7UUFDVCxVQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ1QsWUFBTyxHQUFHLENBQUMsQ0FBQTtRQU9kLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBQSxPQUFPLENBQUMsSUFBSSxtQ0FBSSxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNoRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQUNaLE1BQU0sS0FBSyxHQUFHLE1BQUEsT0FBTyxDQUFDLEtBQUssbUNBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMzQyxNQUFNLEtBQUssR0FBRyxNQUFBLE9BQU8sQ0FBQyxLQUFLLG1DQUFJLENBQUMsQ0FBQTtRQUNoQyxNQUFNLE9BQU8sR0FBRyxNQUFBLE9BQU8sQ0FBQyxPQUFPLG1DQUFJLENBQUMsQ0FBQTtRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNsQixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUE7UUFDeEIsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFBO1lBQ3JDLFlBQVksR0FBRyxJQUFJLENBQUE7UUFDdkIsQ0FBQztRQUNELElBQUksT0FBTyxPQUFPLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFBO1lBQ3JDLFlBQVksR0FBRyxJQUFJLENBQUE7UUFDdkIsQ0FBQztRQUNELElBQUksT0FBTyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFBO1lBQ3ZDLFlBQVksR0FBRyxJQUFJLENBQUE7UUFDdkIsQ0FBQztRQUNELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNoQixNQUFNLElBQUksS0FBSyxDQUNYLGlGQUFpRixDQUNwRixDQUFBO1FBQ0wsQ0FBQztRQUVELENBQUM7UUFBQSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUE7UUFDdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDMUIsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixNQUFNLEtBQVUsQ0FBQztJQUVqQixLQUFLO1FBQ0QsTUFBTSxFQUNGLFNBQVMsRUFDVCxFQUFFLEVBQ0YsR0FBRyxFQUNILEtBQUssRUFDTCxJQUFJLEVBQ0osS0FBSyxFQUNMLEtBQUssRUFDTCxPQUFPLEVBQ1AsT0FBTyxHQUNWLEdBQUcsSUFBSSxDQUFBO1FBQ1IsSUFBSSxPQUFPLENBQUMsS0FBSztZQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDekQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDcEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QixDQUFDO1FBQ0QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDdEMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNwQixFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzVCLENBQUM7UUFDRCxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 666:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/camera/camera.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCamera: () => (/* binding */ TgdCamera)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);

class TgdCamera {
    constructor(options = {}) {
        var _a, _b, _c, _d;
        this._screenWidth = 1920;
        this._screenHeight = 1080;
        this._screenAspectRatio = 1920 / 1080;
        /** Do we need recalculation? */
        this._dirtyModelView = true;
        this.dirtyModelViewInverse = true;
        this._dirtyAxis = true;
        this._dirtyProjection = true;
        this.dirtyProjectionInverse = true;
        this._near = 1e-3;
        this._far = Infinity;
        // transformation
        this._matrixModelView = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        this._matrixProjectionInverse = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        this._zoom = 1;
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `TgdCamera#${TgdCamera.incrementalId++}`;
        this._near = (_b = options.near) !== null && _b !== void 0 ? _b : 1e-3;
        this._far = (_c = options.far) !== null && _c !== void 0 ? _c : 1e6;
        this.transfo = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdTransfo(options.transfo);
        this.zoom = (_d = options.zoom) !== null && _d !== void 0 ? _d : 1;
    }
    getCurrentState() {
        return {
            distance: this.transfo.distance,
            orientation: this.transfo.orientation.clone(),
            spaceHeightAtTarget: this.spaceHeightAtTarget,
            position: this.transfo.position.clone(),
            zoom: this.zoom,
        };
    }
    get near() {
        return this._near;
    }
    set near(v) {
        if (v === this._near)
            return;
        this._near = v;
        this.dirtyProjection = true;
    }
    get far() {
        return this._far;
    }
    set far(v) {
        if (v === this._far)
            return;
        this._far = v;
        this.dirtyProjection = true;
    }
    get screenAspectRatio() {
        return this._screenAspectRatio;
    }
    get screenWidth() {
        return this._screenWidth;
    }
    set screenWidth(v) {
        if (v === this._screenWidth)
            return;
        this._screenWidth = v;
        this.dirtyProjection = true;
        this._screenAspectRatio = this._screenWidth / this._screenHeight;
    }
    get screenHeight() {
        return this._screenHeight;
    }
    set screenHeight(v) {
        if (v === this._screenHeight)
            return;
        this._screenHeight = v;
        this.dirtyProjection = true;
        this._screenAspectRatio = this._screenWidth / this._screenHeight;
    }
    get spaceHeightAtTarget() {
        return this.getSpaceHeightAtTarget();
    }
    set spaceHeightAtTarget(v) {
        this.setSpaceHeightAtTarget(v);
    }
    get spaceWidthAtTarget() {
        return (this.screenWidth * this.spaceHeightAtTarget) / this.screenHeight;
    }
    set spaceWidthAtTarget(v) {
        this.setSpaceHeightAtTarget((v * this.screenHeight) / this.screenWidth);
    }
    from(camera) {
        const { zoom, screenWidth, screenHeight } = camera;
        this.transfo.from(camera.transfo);
        this.zoom = zoom;
        this.screenWidth = screenWidth;
        this.screenHeight = screenHeight;
        this.dirtyModelView = true;
        this.copyProjectionFrom(camera);
        return this;
    }
    fromTransfo(transfo) {
        this.transfo.from(transfo);
        this.dirtyModelView = true;
        return this;
    }
    /**
     * This matrix will transform a world coordinate into a camera coordinate.
     */
    get matrixModelView() {
        return this._matrixModelView.invert(this.transfo.matrix);
    }
    get matrixProjectionInverse() {
        if (this.dirtyProjectionInverse) {
            this._matrixProjectionInverse.invert(this.matrixProjection);
            this.dirtyProjectionInverse = false;
        }
        return this._matrixProjectionInverse;
    }
    get zoom() {
        return this._zoom;
    }
    set zoom(v) {
        if (this._zoom === v)
            return;
        this._zoom = v;
        this.transfo.setScale(v, v, v);
        this.dirtyModelView = true;
    }
    toCode(caption) {
        return `// ${caption !== null && caption !== void 0 ? caption : "TgdCamera"}\n// Not implemented yet`;
    }
    debug(caption) {
        const name = `${this.name}: ${caption !== null && caption !== void 0 ? caption : ""}`;
        console.log("TgdCamera", name);
        console.log("    Distance:", this.transfo.distance);
        console.log("    Zoom:", this.zoom);
        this.transfo.orientation.debug(`   Orientation`);
        this.transfo.position.debug(`    Target`);
        this.transfo.actualPosition.debug(`    Actual position`);
        this.matrixModelView.debug(`    MatrixModelView`);
        this.matrixProjection.debug(`    MatrixProjection`);
    }
    get dirtyModelView() {
        return this._dirtyModelView;
    }
    set dirtyModelView(v) {
        this._dirtyModelView = v;
        if (v) {
            this.dirtyModelViewInverse = true;
        }
    }
    get dirtyProjection() {
        return this._dirtyProjection;
    }
    set dirtyProjection(v) {
        this._dirtyProjection = v;
        if (v)
            this.dirtyProjectionInverse = true;
    }
}
TgdCamera.incrementalId = 1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhbWVyYS9jYW1lcmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdILE9BQU8sRUFDUCxVQUFVLEdBRWIsTUFBTSxXQUFXLENBQUE7QUFvQmxCLE1BQU0sT0FBZ0IsU0FBUztJQXlCM0IsWUFBWSxVQUE0QixFQUFFOztRQW5CbEMsaUJBQVksR0FBRyxJQUFJLENBQUE7UUFDbkIsa0JBQWEsR0FBRyxJQUFJLENBQUE7UUFDcEIsdUJBQWtCLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUV4QyxnQ0FBZ0M7UUFDeEIsb0JBQWUsR0FBRyxJQUFJLENBQUE7UUFDdEIsMEJBQXFCLEdBQUcsSUFBSSxDQUFBO1FBQzVCLGVBQVUsR0FBRyxJQUFJLENBQUE7UUFDZixxQkFBZ0IsR0FBRyxJQUFJLENBQUE7UUFDdkIsMkJBQXNCLEdBQUcsSUFBSSxDQUFBO1FBRTdCLFVBQUssR0FBRyxJQUFJLENBQUE7UUFDWixTQUFJLEdBQUcsUUFBUSxDQUFBO1FBRXpCLGlCQUFpQjtRQUNBLHFCQUFnQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDaEMsNkJBQXdCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUNqRCxVQUFLLEdBQUcsQ0FBQyxDQUFBO1FBR2IsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFBLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLGFBQWEsU0FBUyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUE7UUFDcEUsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFBLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLElBQUksQ0FBQTtRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQUEsT0FBTyxDQUFDLEdBQUcsbUNBQUksR0FBRyxDQUFBO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlDLElB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

/***/ }),

/***/ 680:
/*!********************************!*\
  !*** ./src/font/josefin.woff2 ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fnt/josefin.867f564a4eb4c84b3181.woff2";

/***/ }),

/***/ 692:
/*!********************************************************************!*\
  !*** ../../tgd2/lib/dist/utils/easing-function/easing-function.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdEasingFunctionInBack: () => (/* binding */ tgdEasingFunctionInBack),
/* harmony export */   tgdEasingFunctionInBounce: () => (/* binding */ tgdEasingFunctionInBounce),
/* harmony export */   tgdEasingFunctionInCirc: () => (/* binding */ tgdEasingFunctionInCirc),
/* harmony export */   tgdEasingFunctionInCubic: () => (/* binding */ tgdEasingFunctionInCubic),
/* harmony export */   tgdEasingFunctionInElastic: () => (/* binding */ tgdEasingFunctionInElastic),
/* harmony export */   tgdEasingFunctionInExpo: () => (/* binding */ tgdEasingFunctionInExpo),
/* harmony export */   tgdEasingFunctionInOutBack: () => (/* binding */ tgdEasingFunctionInOutBack),
/* harmony export */   tgdEasingFunctionInOutBounce: () => (/* binding */ tgdEasingFunctionInOutBounce),
/* harmony export */   tgdEasingFunctionInOutCirc: () => (/* binding */ tgdEasingFunctionInOutCirc),
/* harmony export */   tgdEasingFunctionInOutCubic: () => (/* binding */ tgdEasingFunctionInOutCubic),
/* harmony export */   tgdEasingFunctionInOutElastic: () => (/* binding */ tgdEasingFunctionInOutElastic),
/* harmony export */   tgdEasingFunctionInOutExpo: () => (/* binding */ tgdEasingFunctionInOutExpo),
/* harmony export */   tgdEasingFunctionInOutQuad: () => (/* binding */ tgdEasingFunctionInOutQuad),
/* harmony export */   tgdEasingFunctionInOutQuart: () => (/* binding */ tgdEasingFunctionInOutQuart),
/* harmony export */   tgdEasingFunctionInOutQuint: () => (/* binding */ tgdEasingFunctionInOutQuint),
/* harmony export */   tgdEasingFunctionInOutSine: () => (/* binding */ tgdEasingFunctionInOutSine),
/* harmony export */   tgdEasingFunctionInQuad: () => (/* binding */ tgdEasingFunctionInQuad),
/* harmony export */   tgdEasingFunctionInQuart: () => (/* binding */ tgdEasingFunctionInQuart),
/* harmony export */   tgdEasingFunctionInQuint: () => (/* binding */ tgdEasingFunctionInQuint),
/* harmony export */   tgdEasingFunctionInSine: () => (/* binding */ tgdEasingFunctionInSine),
/* harmony export */   tgdEasingFunctionLinear: () => (/* binding */ tgdEasingFunctionLinear),
/* harmony export */   tgdEasingFunctionOutBack: () => (/* binding */ tgdEasingFunctionOutBack),
/* harmony export */   tgdEasingFunctionOutBounce: () => (/* binding */ tgdEasingFunctionOutBounce),
/* harmony export */   tgdEasingFunctionOutCirc: () => (/* binding */ tgdEasingFunctionOutCirc),
/* harmony export */   tgdEasingFunctionOutCubic: () => (/* binding */ tgdEasingFunctionOutCubic),
/* harmony export */   tgdEasingFunctionOutElastic: () => (/* binding */ tgdEasingFunctionOutElastic),
/* harmony export */   tgdEasingFunctionOutExpo: () => (/* binding */ tgdEasingFunctionOutExpo),
/* harmony export */   tgdEasingFunctionOutQuad: () => (/* binding */ tgdEasingFunctionOutQuad),
/* harmony export */   tgdEasingFunctionOutQuart: () => (/* binding */ tgdEasingFunctionOutQuart),
/* harmony export */   tgdEasingFunctionOutQuint: () => (/* binding */ tgdEasingFunctionOutQuint),
/* harmony export */   tgdEasingFunctionOutSine: () => (/* binding */ tgdEasingFunctionOutSine)
/* harmony export */ });
function tgdEasingFunctionLinear(x) {
    return x;
}
function tgdEasingFunctionInSine(x) {
    return 1 - Math.cos((x * Math.PI) / 2);
}
function tgdEasingFunctionOutSine(x) {
    return Math.sin((x * Math.PI) / 2);
}
function tgdEasingFunctionInOutSine(x) {
    return -(Math.cos(Math.PI * x) - 1) / 2;
}
function tgdEasingFunctionInQuad(x) {
    return x * x;
}
function tgdEasingFunctionOutQuad(x) {
    return 1 - (1 - x) * (1 - x);
}
function tgdEasingFunctionInOutQuad(x) {
    return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
}
function tgdEasingFunctionInCubic(x) {
    return x * x * x;
}
function tgdEasingFunctionOutCubic(x) {
    return 1 - Math.pow(1 - x, 3);
}
function tgdEasingFunctionInOutCubic(x) {
    return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
}
function tgdEasingFunctionInQuart(x) {
    return x * x * x * x;
}
function tgdEasingFunctionOutQuart(x) {
    return 1 - Math.pow(1 - x, 4);
}
function tgdEasingFunctionInOutQuart(x) {
    return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
}
function tgdEasingFunctionInQuint(x) {
    return x * x * x * x * x;
}
function tgdEasingFunctionOutQuint(x) {
    return 1 - Math.pow(1 - x, 5);
}
function tgdEasingFunctionInOutQuint(x) {
    return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
}
function tgdEasingFunctionInExpo(x) {
    return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
}
function tgdEasingFunctionOutExpo(x) {
    return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
}
function tgdEasingFunctionInOutExpo(x) {
    if (x <= 0)
        return 0;
    if (x >= 1)
        return 1;
    return x < 0.5
        ? Math.pow(2, 20 * x - 10) / 2
        : (2 - Math.pow(2, -20 * x + 10)) / 2;
}
function tgdEasingFunctionInCirc(x) {
    return 1 - Math.sqrt(1 - Math.pow(x, 2));
}
function tgdEasingFunctionOutCirc(x) {
    return Math.sqrt(1 - Math.pow(x - 1, 2));
}
function tgdEasingFunctionInOutCirc(x) {
    return x < 0.5
        ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2
        : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
}
function tgdEasingFunctionInBack(x) {
    const c1 = 1.70158;
    const c3 = c1 + 1;
    return c3 * x * x * x - c1 * x * x;
}
function tgdEasingFunctionOutBack(x) {
    const c1 = 1.70158;
    const c3 = c1 + 1;
    return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
}
function tgdEasingFunctionInOutBack(x) {
    const c1 = 1.70158;
    const c2 = c1 * 1.525;
    return x < 0.5
        ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2
        : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
}
function tgdEasingFunctionInElastic(x) {
    const c4 = (2 * Math.PI) / 3;
    if (x <= 0)
        return 0;
    if (x >= 1)
        return 1;
    return -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);
}
function tgdEasingFunctionOutElastic(x) {
    const c4 = (2 * Math.PI) / 3;
    if (x <= 0)
        return 0;
    if (x >= 1)
        return 1;
    return Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;
}
function tgdEasingFunctionInOutElastic(x) {
    const c5 = (2 * Math.PI) / 4.5;
    if (x === 0)
        return 0;
    if (x === 1)
        return 1;
    return x < 0.5
        ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2
        : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5)) / 2 + 1;
}
function tgdEasingFunctionInBounce(x) {
    return 1 - tgdEasingFunctionOutBounce(1 - x);
}
function tgdEasingFunctionOutBounce(x) {
    const n1 = 7.5625;
    const d1 = 2.75;
    if (x < 1 / d1) {
        return n1 * x * x;
    }
    else if (x < 2 / d1) {
        return n1 * (x -= 1.5 / d1) * x + 0.75;
    }
    else if (x < 2.5 / d1) {
        return n1 * (x -= 2.25 / d1) * x + 0.9375;
    }
    else {
        return n1 * (x -= 2.625 / d1) * x + 0.984375;
    }
}
function tgdEasingFunctionInOutBounce(x) {
    return x < 0.5
        ? (1 - tgdEasingFunctionOutBounce(1 - 2 * x)) / 2
        : (1 + tgdEasingFunctionOutBounce(2 * x - 1)) / 2;
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 693:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/gltf/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMeshGltf: () => (/* reexport safe */ _gltf_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterMeshGltf)
/* harmony export */ });
/* harmony import */ var _gltf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gltf.js */ 2700);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGFpbnRlci9tZXNoL2dsdGYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxRQUFRLENBQUEifQ==

/***/ }),

/***/ 718:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/debug/stencil/stencil.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterDebugStencil: () => (/* binding */ TgdPainterDebugStencil)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../painter.js */ 2362);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../utils/index.js */ 3291);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../program/index.js */ 9974);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../vao/index.js */ 9856);
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../dataset/index.js */ 5710);
/* harmony import */ var _stencil_vert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stencil.vert */ 3368);
/* harmony import */ var _stencil_frag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stencil.frag */ 9013);







class TgdPainterDebugStencil extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context) {
        super();
        this.context = context;
        this.program = new _program_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdProgram(context.gl, {
            vert: _stencil_vert__WEBPACK_IMPORTED_MODULE_5__,
            frag: _stencil_frag__WEBPACK_IMPORTED_MODULE_6__,
        });
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdDataset({
            attPoint: "vec2",
        });
        dataset.set("attPoint", new Float32Array([-1, +1, +1, +1, -1, -1, +1, -1]));
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdVertexArray(context.gl, this.program, [dataset]);
    }
    paint(_time, _delay) {
        const { context, program, vao } = this;
        const { gl } = context;
        const state = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.webglStencilGet)(gl);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.CULL_FACE);
        const clear = ([r, g, b], value) => {
            program.uniform4f("uniColor", r, g, b, 1);
            gl.stencilFunc(gl.EQUAL, value, 0xff);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        };
        gl.disable(gl.STENCIL_TEST);
        gl.clearColor(0.5, 0.5, 0.5, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);
        program.use();
        vao.bind();
        gl.enable(gl.STENCIL_TEST);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        clear([0, 0, 0], 0);
        clear([1, 0, 0], 1);
        clear([0, 1, 0], 2);
        clear([0, 0, 1], 3);
        clear([0, 1, 1], 4);
        clear([1, 0, 1], 5);
        clear([1, 1, 0], 6);
        clear([1, 1, 1], 7);
        vao.unbind();
        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.webglStencilSet)(gl, state);
    }
    delete() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlbmNpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWludGVyL2RlYnVnL3N0ZW5jaWwvc3RlbmNpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXpDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFBO0FBQ2pDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFBO0FBRWpDLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxVQUFVO0lBSWxELFlBQTZCLE9BQW1CO1FBQzVDLEtBQUssRUFBRSxDQUFBO1FBRGtCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFHNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUE7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUMzQixRQUFRLEVBQUUsTUFBTTtTQUNuQixDQUFDLENBQUE7UUFDRixPQUFPLENBQUMsR0FBRyxDQUNQLFVBQVUsRUFDVixJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckQsQ0FBQTtRQUNELElB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

/***/ }),

/***/ 721:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/quat.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdQuat: () => (/* binding */ TgdQuat)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ 6580);
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat3.js */ 277);
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec3.js */ 7389);
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec4.js */ 6648);




const temporaryAxisX = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
const temporaryAxisY = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
const temporaryAxisZ = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
const temporaryMat3 = new _mat3_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat3();
class TgdQuat extends _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4 {
    static fromMatrix(mat) {
        const quat = new TgdQuat();
        quat.fromMatrix(mat);
        return quat;
    }
    static fromFace(face) {
        return new TgdQuat().face(face);
    }
    static fromSlerp(valueAtT0, valueAtT1, t) {
        return new TgdQuat().fromSlerp(valueAtT0, valueAtT1, t);
    }
    constructor(x = 0, y = 0, z = 0, w = 1) {
        if (Array.isArray(x)) {
            const [xx, yy, zz, ww] = x;
            super(xx, yy, zz, ww);
        }
        else if (typeof x === "number")
            super(x, y, z, w);
        else
            super(x);
    }
    clone() {
        return new TgdQuat(this);
    }
    multiply(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.multiply(this, this, q);
        return this;
    }
    fromSlerp(valueAtT0, valueAtT1, t) {
        const EPSILON = 1e-6;
        const [ax, ay, az, aw] = valueAtT0;
        let [bx, by, bz, bw] = valueAtT1;
        let scale0, scale1;
        // calc cosine
        let cosom = ax * bx + ay * by + az * bz + aw * bw;
        // adjust signs (if necessary)
        if (cosom < 0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        // calculate coefficients
        if (1 - cosom > EPSILON) {
            // standard case (slerp)
            const omega = Math.acos(cosom);
            const sinom = Math.sin(omega);
            const inverseSinom = 1 / sinom;
            scale0 = Math.sin((1 - t) * omega) * inverseSinom;
            scale1 = Math.sin(t * omega) * inverseSinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1 - t;
            scale1 = t;
        }
        // calculate final values
        this.x = scale0 * ax + scale1 * bx;
        this.y = scale0 * ay + scale1 * by;
        this.z = scale0 * az + scale1 * bz;
        this.w = scale0 * aw + scale1 * bw;
        return this;
    }
    fromAxesTransposed([m00, m01, m02], [m10, m11, m12], [m20, m21, m22]) {
        return this.fromAxes([m00, m10, m20], [m01, m11, m21], [m02, m12, m22]);
    }
    fromAxes(X, Y, Z) {
        const [x, y, z] = Z;
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.setAxes(this, [-x, -y, -z], X, Y);
        return this;
    }
    fromMatrix(mat) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.fromMat3(this, mat);
        return this;
    }
    rotateAround(axis, angleInRadians) {
        temporaryMat3
            .fromQuat(this)
            .toAxes(temporaryAxisX, temporaryAxisY, temporaryAxisZ);
        temporaryAxisX.rotateAround(axis, angleInRadians);
        temporaryAxisY.rotateAround(axis, angleInRadians);
        temporaryAxisZ.rotateAround(axis, angleInRadians);
        return this.fromAxes(temporaryAxisX, temporaryAxisY, temporaryAxisZ);
    }
    static rotateAroundX(angleInRadians) {
        return new TgdQuat().rotateAroundX(angleInRadians);
    }
    rotateAroundX(angleInRadians) {
        return this.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3.X, angleInRadians);
    }
    static rotateAroundY(angleInRadians) {
        return new TgdQuat().rotateAroundY(angleInRadians);
    }
    rotateAroundY(angleInRadians) {
        return this.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3.Y, angleInRadians);
    }
    static rotateAroundZ(angleInRadians) {
        return new TgdQuat().rotateAroundZ(angleInRadians);
    }
    rotateAroundZ(angleInRadians) {
        return this.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3.Z, angleInRadians);
    }
    toAxisX(vec) {
        const [x, y, z, w] = this;
        const x2 = x + x;
        const y2 = y + y;
        const z2 = z + z;
        const yx = y * x2;
        const yy = y * y2;
        const zx = z * x2;
        const zz = z * z2;
        const wy = w * y2;
        const wz = w * z2;
        vec.x = 1 - yy - zz;
        vec.y = yx - wz;
        vec.z = zx + wy;
        return vec;
    }
    toAxisY(vec) {
        const [x, y, z, w] = this;
        const x2 = x + x;
        const y2 = y + y;
        const z2 = z + z;
        const xx = x * x2;
        const yx = y * x2;
        const zy = z * y2;
        const zz = z * z2;
        const wx = w * x2;
        const wz = w * z2;
        vec.x = yx + wz;
        vec.y = 1 - xx - zz;
        vec.z = zy - wx;
        return vec;
    }
    toAxisZ(vec) {
        const { x, y, z, w } = this;
        const x2 = x + x;
        const y2 = y + y;
        const xx = x * x2;
        const yy = y * y2;
        const zx = z * x2;
        const zy = z * y2;
        const wx = w * x2;
        const wy = w * y2;
        vec.x = zx - wy;
        vec.y = zy + wx;
        vec.z = 1 - xx - yy;
        return vec;
    }
    toMatrix(mat) {
        const axisX = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        const axisY = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        const axisZ = new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        this.toAxisX(axisX);
        this.toAxisY(axisY);
        this.toAxisZ(axisZ);
        mat.m00 = axisX.x;
        mat.m01 = axisX.y;
        mat.m02 = axisX.z;
        mat.m10 = axisY.x;
        mat.m11 = axisY.y;
        mat.m12 = axisY.z;
        mat.m20 = axisZ.x;
        mat.m21 = axisZ.y;
        mat.m22 = axisZ.z;
        return mat;
    }
    invert() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.invert(this, this);
        return this;
    }
    face(face = "+X+Y+Z") {
        const [x, y, z, w] = FACES[face];
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
}
const A = Math.sqrt(2) / 2;
const H = 0.5;
const FACES = {
    "-X-Y+Z": [+0, +0, +1, +0],
    "-X-Z-Y": [+0, -A, +A, +0],
    "-X+Y-Z": [+0, +1, +0, +0],
    "-X+Z+Y": [+0, +A, +A, +0],
    "-Y-X-Z": [+A, -A, +0, +0],
    "-Y-Z+X": [+H, -H, +H, -H],
    "-Y+X+Z": [+0, +0, -A, +A],
    "-Y+Z-X": [+H, -H, -H, +H],
    "-Z-X+Y": [+H, -H, -H, -H],
    "-Z-Y-X": [-A, +0, +A, +0],
    "-Z+X-Y": [+H, +H, -H, +H],
    "-Z+Y+X": [+0, +A, +0, +A],
    "+X-Y-Z": [+1, +0, +0, +0],
    "+X-Z+Y": [-A, +0, +0, +A],
    "+X+Y+Z": [+0, +0, +0, +1],
    "+X+Z-Y": [+A, +0, +0, +A],
    "+Y-X+Z": [+0, +0, +A, +A],
    "+Y-Z-X": [-H, -H, +H, +H],
    "+Y+X-Z": [+A, +A, +0, +0],
    "+Y+Z+X": [+H, +H, +H, +H],
    "+Z-X-Y": [+H, -H, +H, +H],
    "+Z-Y+X": [+A, +0, +A, +0],
    "+Z+X+Y": [+H, +H, +H, -H],
    "+Z+Y-X": [+0, -A, +0, +A],
};
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 770:
/*!**********************************************************!*\
  !*** ../../tgd2/lib/dist/painter/segments/segments.vert ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\n// Minimal value for the radius.\nuniform float uniMinRadius;\n// Multiply all radii by this value.\nuniform float uniRadiusMultiplier;\n// When uniRadiusSwitch == 1.0,\n// we use uniRadiusConstant as radius. \nuniform float uniRadiusConstant;\n// 0.0 means we will use the radius defined\n// in the attribute attAxyzr or attBaxyz.\n// 1.0 means we use uniRadiusConstant for\n// all vertices.\nuniform float uniRadiusSwitch;\n// Multiply the color by this value;\nuniform float uniLight;\n// Push the segments away from camera of `uniShiftZ`.\n// This can be used if you want contours on the segments:\n// just increase `uniRadiusMultiplier`, set a low `uniLight`,\n// and set a small positive `uniShiftZ`.\nuniform float uniShiftZ;\n\n//===================\n// Vertex attributes\n//-------------------\n\n// Position of the vertex, relative to\n// the current center and assuming a\n// radius of 1.\n// Z tells you what tip is your center: 0 for A and 1 for B.\nin vec3 attOffset;\n// Normals of the tube that represents the segment.\nin vec3 attNormal;\n\n//=====================\n// Instance attributes\n//---------------------\n\n// Coords and radious of tip A.\nin vec4 attAxyzr;\n// Coords and radious of tip B.\nin vec4 attBxyzr;\n// The color is taken from a texture.\nin vec2 attAuv;\nin vec2 attBuv;\n// 0 means that nothing modifies the initial radius,\n// except the minRadius.\nin float attAinfluence;\nin float attBinfluence;\n\n\nout vec4 varColor;\nout vec3 varNormal;\n\n\nvec3 worldToCamera(vec3 v);\nfloat getRadius(float tip);\nmat3 getTransfoMatrix(float tip, vec3 camA, vec3 camB);\n\nvoid main() {\n    vec3 camA = worldToCamera(attAxyzr.xyz);\n    vec3 camB = worldToCamera(attBxyzr.xyz);\n    float tip = attOffset.z;\n    float radius = getRadius(tip);\n    mat3 transfo = getTransfoMatrix(tip, camA, camB);\n    vec3 point = transfo * vec3(attOffset.xy * radius, 1.0);\n    varNormal = attNormal;\n    point.z -= uniShiftZ + abs(attOffset.y) * radius;\n    gl_Position = \n        uniProjectionMatrix \n        * vec4(point, 1);\n    vec2 uv = mix(attAuv, attBuv, tip);\n    // float Z = 1.0 - abs(point.z) * 0.0001;\n    // Z = pow(Z, 0.025);\n    float light = uniLight; // * Z;\n    varColor = texture(uniTexture, uv) * vec4(vec3(light), 1.0);\n    // varColor = vec4(vec3(1.0 - Z, Z, 0.0), varColor.a);\n}\n\nfloat getRadius(float tip) {\n    float influence = mix(attAinfluence, attBinfluence, tip);\n    float originalRadius = mix(\n        attAxyzr.w,\n        attBxyzr.w,\n        tip\n    );\n    float modifiedRadius = mix(\n        originalRadius,\n        uniRadiusConstant,\n        uniRadiusSwitch\n    ) * uniRadiusMultiplier;\n    float radius = mix(\n        originalRadius,\n        modifiedRadius,\n        influence\n    );\n    return max(uniMinRadius, radius);\n}\n\nvec3 worldToCamera(vec3 v) {\n    vec4 result = uniModelViewMatrix * vec4(v, 1.0);\n    return result.xyz;\n}\n\nmat3 getTransfoMatrix(float tip, vec3 camA, vec3 camB) {\n    // What is the current tip?\n    vec3 camO = mix(camA, camB, tip);\n    vec2 A = camA.xy;\n    vec2 B = camB.xy;\n    vec3 Y = vec3(\n        A == B ? vec2(0, 1) : normalize(A - B),\n        0\n    );\n    vec3 X = vec3(Y.y, -Y.x, 0);\n    return mat3(X, Y, camO);\n}";

/***/ }),

/***/ 797:
/*!*********************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/landscape/landscape.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCanvasLandscape: () => (/* binding */ TgdCanvasLandscape)
/* harmony export */ });
/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../context/index.js */ 4773);

/**
 * The Landscape displays the orientation of an attached camera.
 * You can click one of the axis to force the camera to face it.
 */
class TgdCanvasLandscape {
    constructor(options) {
        this.options = options;
        this._canvas = null;
        this.context = null;
        if (options.canvas)
            this.canvas = options.canvas;
    }
    get canvas() {
        return this._canvas;
    }
    set canvas(canvas) {
        if (canvas === this._canvas)
            return;
        this._canvas = canvas;
        if (this.context) {
            this.context.destroy();
            this.context = null;
        }
        if (!canvas)
            return;
        const context = new _context_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdContext(canvas, Object.assign({ alpha: false, depth: true, antialias: true, name: "LandscapeCanvas" }, this.options));
        this.context = context;
        context.paint();
        this.options.onReady(context);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZHNjYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhbnZhcy9sYW5kc2NhcGUvbGFuZHNjYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sY0FBYyxDQUFBO0FBTzVEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFJM0IsWUFBNkIsT0FBa0M7UUFBbEMsWUFBTyxHQUFQLE9BQU8sQ0FBMkI7UUFIdkQsWUFBTyxHQUE2QixJQUFJLENBQUE7UUFDeEMsWUFBTyxHQUFzQixJQUFJLENBQUE7UUFHckMsSUFBSSxPQUFPLENBQUMsTUFBTTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtJQUNwRCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFnQztRQUN2QyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTztZQUFFLE9BQU07UUFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ3ZCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU07UUFFbkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxrQkFDakMsS0FBSyxFQUFFLEtBQUssRUFDWixLQUFLLEVBQUUsSUFBSSxFQUNYLFNBQVMsRUFBRSxJQUFJLEVBQ2YsSUFBSSxFQUFFLGlCQUFpQixJQUNwQixJQUFJLENBQUMsT0FBTyxFQUNqQixDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNKIn0=

/***/ }),

/***/ 814:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/painter/group.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterGroup: () => (/* binding */ TgdPainterGroup)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./painter.js */ 2362);

/**
 * Group several painters together.
 */
class TgdPainterGroup extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(painters = [], { onEnter, onExit, name } = {}) {
        super();
        this.active = true;
        this.onEnter = onEnter;
        this.onExit = onExit;
        this.painters = [...painters];
        this.name = name !== null && name !== void 0 ? name : `Group/${this.name}`;
    }
    forEachChild(callback) {
        for (const [index, child] of this.painters.entries())
            callback(child, index);
    }
    has(painter) {
        return this.painters.includes(painter);
    }
    add(...painters) {
        for (const painter of painters) {
            this.painters.push(painter);
        }
    }
    addFirst(...painters) {
        for (let index = painters.length - 1; index >= 0; index--) {
            const painter = painters[index];
            this.painters.unshift(painter);
        }
    }
    remove(...painters) {
        for (const painter of painters) {
            const index = this.painters.indexOf(painter);
            if (index === -1)
                continue;
            this.painters.splice(index, 1);
            painter.delete();
        }
    }
    removeAll() {
        for (const painter of this.painters) {
            painter.delete();
        }
        this.painters.splice(0, this.painters.length);
    }
    delete() {
        for (const painter of this.painters) {
            painter.delete();
        }
        this.painters.splice(0, this.painters.length);
    }
    paint(time, delay) {
        var _a, _b;
        if (!this.active)
            return;
        (_a = this.onEnter) === null || _a === void 0 ? void 0 : _a.call(this, time, delay);
        for (const painter of this.painters) {
            if (painter.active) {
                painter.paint(time, delay);
            }
        }
        (_b = this.onExit) === null || _b === void 0 ? void 0 : _b.call(this, time, delay);
    }
    debugHierarchy() {
        return {
            [this.active ? this.name : `${this.name} (Inactive)`]: this.painters.map(painter => painter.debugHierarchy()),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9ncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQTRCLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQVFoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFNM0MsWUFDSSxXQUF5QixFQUFFLEVBQzNCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEtBQTZCLEVBQUU7UUFFdEQsS0FBSyxFQUFFLENBQUE7UUFUSixXQUFNLEdBQUcsSUFBSSxDQUFBO1FBVWhCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFBO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxhQUFKLElBQUksY0FBSixJQUFJLEdBQUksU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDNUMsQ0FBQztJQUVELFlBQVksQ0FBQyxRQUFvRDtRQUM3RCxLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2hGLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQUcsUUFBc0I7UUFDekIsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMvQixDQUFDO0lBQ0ws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

/***/ }),

/***/ 817:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/utils/state/cull.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglCullExec: () => (/* binding */ webglCullExec),
/* harmony export */   webglCullGet: () => (/* binding */ webglCullGet),
/* harmony export */   webglCullSet: () => (/* binding */ webglCullSet),
/* harmony export */   webglDebugCull: () => (/* binding */ webglDebugCull),
/* harmony export */   webglPresetCull: () => (/* binding */ webglPresetCull)
/* harmony export */ });
/* harmony import */ var _debug_debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../debug/debug.js */ 3722);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../types/index.js */ 5327);


const webglPresetCull = {
    off: {
        enabled: false,
        cullFace: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumCullFace.BACK,
    },
    back: {
        enabled: true,
        cullFace: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumCullFace.BACK,
    },
    front: {
        enabled: true,
        cullFace: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumCullFace.FRONT,
    },
};
function webglCullSet(gl, cull) {
    if (cull.enabled)
        gl.enable(gl.CULL_FACE);
    else
        gl.disable(gl.CULL_FACE);
    gl.cullFace(cull.cullFace);
}
function webglCullGet(gl) {
    return {
        enabled: Boolean(gl.getParameter(gl.CULL_FACE)),
        cullFace: gl.getParameter(gl.CULL_FACE_MODE),
    };
}
function webglCullExec(gl, cull, action) {
    const currentState = webglCullGet(gl);
    webglCullSet(gl, cull);
    try {
        action();
    }
    finally {
        webglCullSet(gl, currentState);
    }
}
function webglDebugCull(gl, caption = "Cull test:") {
    console.log(caption);
    const cull = webglCullGet(gl);
    (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.debug)([
        [caption, cull.enabled, "\n"],
        [
            { cls: "code" },
            [
                "gl.",
                cull.enabled ? "enable" : "disable",
                "(",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("CULL_FACE"),
                ")\n",
            ],
            ["gl.cullFace(", (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(cull.cullFace), ")\n"],
        ],
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9zdGF0ZS9jdWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFBO0FBTzlDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FHeEI7SUFDQSxHQUFHLEVBQUU7UUFDRCxPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO0tBQ25DO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtLQUNuQztJQUNELEtBQUssRUFBRTtRQUNILE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUFFLGlCQUFpQixDQUFDLEtBQUs7S0FDcEM7Q0FDSixDQUFBO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FDeEIsRUFBMEIsRUFDMUIsSUFBc0I7SUFFdEIsSUFBSSxJQUFJLENBQUMsT0FBTztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFBOztRQUNwQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM3QixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUEwQjtJQUNuRCxPQUFPO1FBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFXO0tBQ3pELENBQUE7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDekIsRUFBMEIsRUFDMUIsSUFBc0IsRUFDdEIsTUFBa0I7SUFFbEIsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3JDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdEIsSUFBSSxDQUFDO1FBQ0QsTUFBTSxFQUFFLENBQUE7SUFDWixDQUFDO1lBQVMsQ0FBQztRQUNQLFlBQVksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDbEMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUMxQixFQUEwQixFQUMxQixPQUFPLEdBQUcsWUFBWTtJQUV0QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM3QixLQUFLLENBQUM7UUFDRixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztRQUM3QjtZQUNJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtZQUNmO2dCQUNJLEtBQUs7Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTO2dCQUNuQyxHQUFHO2dCQUNILGFBQWEsQ0FBQyxXQUFXLENBQUM7Z0JBQzFCLEtBQUs7YUFDUjtZQUNELENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxDQUFDO1NBQ3hEO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyJ9

/***/ }),

/***/ 857:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/types/arrays.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL2FycmF5cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=

/***/ }),

/***/ 858:
/*!**********************************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background-with-depth/background-with-depth.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterBackgroundWithDepth: () => (/* binding */ TgdPainterBackgroundWithDepth)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../painter.js */ 2362);
/* harmony import */ var _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../dataset/dataset.js */ 6526);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../program/index.js */ 9974);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../utils/index.js */ 3291);
/* harmony import */ var _background_vert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./background.vert */ 4687);
/* harmony import */ var _background_frag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./background.frag */ 8398);
/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../state/index.js */ 2067);
/* harmony import */ var _clear_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../clear.js */ 640);









class TgdPainterBackgroundWithDepth extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context, { background, children }) {
        super();
        this.context = context;
        this.depthTexture = null;
        const { gl } = context;
        const fb = gl.createFramebuffer();
        if (!fb)
            throw new Error("Unable to create a WebGL2 Frame buffer!");
        this.framebuffer = fb;
        this.clear = new _clear_js__WEBPACK_IMPORTED_MODULE_8__.TgdPainterClear(context, {
            depth: 1,
        });
        this.texture = background;
        this.program = new _program_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdProgram(context.gl, {
            vert: _background_vert__WEBPACK_IMPORTED_MODULE_5__,
            frag: _background_frag__WEBPACK_IMPORTED_MODULE_6__,
        });
        const dataset = new _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__.TgdDataset({
            attPoint: "vec2",
            attUV: "vec2",
        });
        dataset.set("attPoint", new Float32Array([-1, +1, +1, +1, -1, -1, +1, -1]));
        dataset.set("attUV", new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]));
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, this.program, [dataset]);
        this.renderer = new _state_index_js__WEBPACK_IMPORTED_MODULE_7__.TgdPainterState(context, {
            children,
            depth: _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglPresetDepth.less,
            cull: _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglPresetCull.back,
            blend: _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglPresetBlend.off,
            color: false,
        });
    }
    delete() {
        const { context, vao, framebuffer, depthTexture } = this;
        const { gl } = context;
        gl.deleteFramebuffer(framebuffer);
        if (depthTexture)
            gl.deleteTexture(depthTexture);
        vao.delete();
    }
    paint(time, delay) {
        const { context, vao, program, texture, depthTexture } = this;
        const { gl } = context;
        this.paintDepthBuffer(time, delay);
        program.use();
        const scale = this.getScale();
        program.uniform1f("uniScale", scale);
        texture.activate(0, program, "uniTexture");
        if (depthTexture) {
            gl.activeTexture(gl.TEXTURE1);
            gl.bindTexture(gl.TEXTURE_2D, depthTexture);
            program.uniform1i("uniDepth", 1);
        }
        vao.bind();
        _state_index_js__WEBPACK_IMPORTED_MODULE_7__.TgdPainterState.do({
            gl,
            cull: _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglPresetCull.off,
            depth: _utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglPresetDepth.writeOnly,
        }, () => gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4));
        vao.unbind();
    }
    paintDepthBuffer(time, delay) {
        const { context, framebuffer, clear, renderer, texture } = this;
        const { gl } = context;
        const { drawingBufferWidth: width, drawingBufferHeight: height } = gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        gl.viewport(0, 0, width, height);
        if (this.depthTexture)
            gl.deleteTexture(this.depthTexture);
        const depthTexture = gl.createTexture();
        if (!depthTexture)
            throw new Error("Unable to create a WebGL2 Texture!");
        this.depthTexture = depthTexture;
        gl.bindTexture(gl.TEXTURE_2D, depthTexture);
        const level = 0;
        const internalFormat = gl.DEPTH_COMPONENT24;
        const border = 0;
        const format = gl.DEPTH_COMPONENT;
        const type = gl.UNSIGNED_INT;
        const data = null;
        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, data);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        const wrapS = ensureNumber(texture.getParameter("TEXTURE_WRAP_S"), gl.CLAMP_TO_EDGE);
        const wrapT = ensureNumber(texture.getParameter("TEXTURE_WRAP_T"), gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, level);
        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            console.error(`Your Framebuffer is incomplete: ${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.webglLookup)(status)}!`);
        }
        clear.paint();
        renderer.paint(time, delay);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
    getScale() {
        const { texture, context } = this;
        const { drawingBufferWidth: width, drawingBufferHeight: height } = context.gl;
        const ratioTexture = texture.width / texture.height;
        const ratioScreen = width / height;
        return ratioScreen / ratioTexture;
    }
}
function ensureNumber(data, defaultValue) {
    if (typeof data === "number")
        return data;
    return defaultValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC13aXRoLWRlcHRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhaW50ZXIvYmFja2dyb3VuZC13aXRoLWRlcHRoL2JhY2tncm91bmQtd2l0aC1kZXB0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBR3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDekMsT0FBTyxFQUNILFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLGdCQUFnQixHQUNuQixNQUFNLFlBQVksQ0FBQTtBQUVuQixPQUFPLElBQUksTUFBTSxtQkFBbUIsQ0FBQTtBQUNwQyxPQUFPLElBQUksTUFBTSxtQkFBbUIsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFRMUMsTUFBTSxPQUFPLDZCQUE4QixTQUFRLFVBQVU7SUFTekQsWUFDcUIsT0FBdUMsRUFDeEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUF3QztRQUU5RCxLQUFLLEVBQUUsQ0FBQTtRQUhVLFlBQU8sR0FBUCxPQUFPLENBQWdDO1FBSHBELGlCQUFZLEdBQXdCLElBQUksQ0FBQTtRQU81QyxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO1FBQ2pDLElBQUksQ0FBQyxFQUFFO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBO1FBRW5FLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFBO1FBRXJCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFO1lBQ3RDLEtBQUssRUFBRSxDQUFDO1NBQ1gsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUE7UUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUE7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUMzQixRQUFRLEVBQUUsTUFBTTtZQUNoQixLQUFLLEVBQUUsTUFBTTtTQUNoQixDQUFDLENBQUE7UUFDRixPQUFPLENBQUMsR0FBRyxDQUNQLFVBQVUsRUFDVixJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckQsQ0FBQTtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNoRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDbEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUU7WUFDekMsUUFBUTtZQUNSLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJO1lBQzVCLElBQUksRUFBRSxlQUFlLENBQUMsSUFBSTtZQUMxQixLQUFLLEVBQUUsZ0JBQWdCLENBQUMsR0FBRztZQUMzQixLQUFLLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxNQUFNO1FBQ0YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQTtRQUN4RCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNqQyxJQUFJLFlBQVk7WUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hELEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQVksRUFBRSxLQUFhO1FBQzdCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQzdELE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDYixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDN0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDcEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO1FBQzFDLElBQUksWUFBWSxFQUFFLENBQUM7WUFDZixFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUM3QixFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUNELEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNWLGVBQWUsQ0FBQyxFQUFFLENBQ2Q7WUFDSSxFQUFFO1lBQ0YsSUFBSSxFQUFFLGVBQWUsQ0FBQyxHQUFHO1lBQ3pCLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTO1NBQ3BDLEVBQ0QsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDL0MsQ0FBQTtRQUNELEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBWSxFQUFFLEtBQWE7UUFDaEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDL0QsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQTtRQUN0QixNQUFNLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQUNyRSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDL0MsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNoQyxJQUFJLElBQUksQ0FBQyxZQUFZO1lBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxZQUFZO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO1FBRXhFLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFBO1FBQ2hDLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUMzQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDZixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUE7UUFDM0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ2hCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUE7UUFDakMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQTtRQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUE7UUFDakIsRUFBRSxDQUFDLFVBQVUsQ0FDVCxFQUFFLENBQUMsVUFBVSxFQUNiLEtBQUssRUFDTCxjQUFjLEVBQ2QsS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sTUFBTSxFQUNOLElBQUksRUFDSixJQUFJLENBQ1AsQ0FBQTtRQUNELEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xFLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FDdEIsT0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN0QyxFQUFFLENBQUMsYUFBYSxDQUNuQixDQUFBO1FBQ0QsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUN0QixPQUFPLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQ3RDLEVBQUUsQ0FBQyxhQUFhLENBQ25CLENBQUE7UUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN6RCxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN6RCxFQUFFLENBQUMsb0JBQW9CLENBQ25CLEVBQUUsQ0FBQyxXQUFXLEVBQ2QsRUFBRSxDQUFDLGdCQUFnQixFQUNuQixFQUFFLENBQUMsVUFBVSxFQUNiLFlBQVksRUFDWixLQUFLLENBQ1IsQ0FBQTtRQUNELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDeEQsSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDckMsT0FBTyxDQUFDLEtBQUssQ0FDVCxtQ0FBbUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQzVELENBQUE7UUFDTCxDQUFDO1FBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2IsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDM0IsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzVDLENBQUM7SUFFTyxRQUFRO1FBQ1osTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDakMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsR0FDNUQsT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNkLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtRQUNuRCxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFBO1FBQ2xDLE9BQU8sV0FBVyxHQUFHLFlBQVksQ0FBQTtJQUNyQyxDQUFDO0NBQ0o7QUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFhLEVBQUUsWUFBb0I7SUFDckQsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO1FBQUUsT0FBTyxJQUFJLENBQUE7SUFDekMsT0FBTyxZQUFZLENBQUE7QUFDdkIsQ0FBQyJ9

/***/ }),

/***/ 953:
/*!************************************!*\
  !*** ../../tgd2/lib/dist/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdBuffer: () => (/* reexport safe */ _buffer_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdBuffer),
/* harmony export */   TgdCamera: () => (/* reexport safe */ _camera_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdCamera),
/* harmony export */   TgdCameraOrthographic: () => (/* reexport safe */ _camera_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdCameraOrthographic),
/* harmony export */   TgdCameraPerspective: () => (/* reexport safe */ _camera_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdCameraPerspective),
/* harmony export */   TgdCanvasGizmo: () => (/* reexport safe */ _canvas_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdCanvasGizmo),
/* harmony export */   TgdCanvasLandscape: () => (/* reexport safe */ _canvas_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdCanvasLandscape),
/* harmony export */   TgdColor: () => (/* reexport safe */ _color_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdColor),
/* harmony export */   TgdContext: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdContext),
/* harmony export */   TgdControllerCameraOrbit: () => (/* reexport safe */ _controller_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdControllerCameraOrbit),
/* harmony export */   TgdDataGlb: () => (/* reexport safe */ _parser_index_js__WEBPACK_IMPORTED_MODULE_20__.TgdDataGlb),
/* harmony export */   TgdDataset: () => (/* reexport safe */ _dataset_index_js__WEBPACK_IMPORTED_MODULE_7__.TgdDataset),
/* harmony export */   TgdEvent: () => (/* reexport safe */ _event_index_js__WEBPACK_IMPORTED_MODULE_8__.TgdEvent),
/* harmony export */   TgdFilter: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilter),
/* harmony export */   TgdFilterBlur: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilterBlur),
/* harmony export */   TgdFilterChromaticAberration: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilterChromaticAberration),
/* harmony export */   TgdFilterHueRotation: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilterHueRotation),
/* harmony export */   TgdFilterVerbatim: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilterVerbatim),
/* harmony export */   TgdFilterZoom: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdFilterZoom),
/* harmony export */   TgdGeometry: () => (/* reexport safe */ _geometry_index_js__WEBPACK_IMPORTED_MODULE_11__.TgdGeometry),
/* harmony export */   TgdGeometryBox: () => (/* reexport safe */ _geometry_index_js__WEBPACK_IMPORTED_MODULE_11__.TgdGeometryBox),
/* harmony export */   TgdGeometryPlane: () => (/* reexport safe */ _geometry_index_js__WEBPACK_IMPORTED_MODULE_11__.TgdGeometryPlane),
/* harmony export */   TgdInputKeyboardImpl: () => (/* reexport safe */ _input_index_js__WEBPACK_IMPORTED_MODULE_12__.TgdInputKeyboardImpl),
/* harmony export */   TgdInputPointerImpl: () => (/* reexport safe */ _input_index_js__WEBPACK_IMPORTED_MODULE_12__.TgdInputPointerImpl),
/* harmony export */   TgdInputs: () => (/* reexport safe */ _input_index_js__WEBPACK_IMPORTED_MODULE_12__.TgdInputs),
/* harmony export */   TgdLight: () => (/* reexport safe */ _light_index_js__WEBPACK_IMPORTED_MODULE_13__.TgdLight),
/* harmony export */   TgdLogger: () => (/* reexport safe */ _context_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdLogger),
/* harmony export */   TgdMat3: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdMat3),
/* harmony export */   TgdMat4: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdMat4),
/* harmony export */   TgdMaterial: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterial),
/* harmony export */   TgdMaterialDiffuse: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialDiffuse),
/* harmony export */   TgdMaterialFlat: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialFlat),
/* harmony export */   TgdMaterialGhost: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialGhost),
/* harmony export */   TgdMaterialHull: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialHull),
/* harmony export */   TgdMaterialNormals: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialNormals),
/* harmony export */   TgdMaterialSolid: () => (/* reexport safe */ _material_index_js__WEBPACK_IMPORTED_MODULE_16__.TgdMaterialSolid),
/* harmony export */   TgdPainter: () => (/* reexport safe */ _painter_painter_js__WEBPACK_IMPORTED_MODULE_19__.TgdPainter),
/* harmony export */   TgdPainterAxes: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterAxes),
/* harmony export */   TgdPainterBackground: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterBackground),
/* harmony export */   TgdPainterBackgroundWithDepth: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterBackgroundWithDepth),
/* harmony export */   TgdPainterClear: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterClear),
/* harmony export */   TgdPainterDebugStencil: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterDebugStencil),
/* harmony export */   TgdPainterDepth: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterDepth),
/* harmony export */   TgdPainterFilter: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterFilter),
/* harmony export */   TgdPainterFramebuffer: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterFramebuffer),
/* harmony export */   TgdPainterGroup: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterGroup),
/* harmony export */   TgdPainterLogic: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterLogic),
/* harmony export */   TgdPainterMesh: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterMesh),
/* harmony export */   TgdPainterMeshGltf: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterMeshGltf),
/* harmony export */   TgdPainterMeshNormals: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterMeshNormals),
/* harmony export */   TgdPainterNode: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterNode),
/* harmony export */   TgdPainterSegments: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterSegments),
/* harmony export */   TgdPainterSegmentsData: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterSegmentsData),
/* harmony export */   TgdPainterSkybox: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterSkybox),
/* harmony export */   TgdPainterState: () => (/* reexport safe */ _painter_index_js__WEBPACK_IMPORTED_MODULE_18__.TgdPainterState),
/* harmony export */   TgdParserMeshWavefront: () => (/* reexport safe */ _parser_index_js__WEBPACK_IMPORTED_MODULE_20__.TgdParserMeshWavefront),
/* harmony export */   TgdProgram: () => (/* reexport safe */ _program_index_js__WEBPACK_IMPORTED_MODULE_21__.TgdProgram),
/* harmony export */   TgdQuat: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdQuat),
/* harmony export */   TgdShaderFragment: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.TgdShaderFragment),
/* harmony export */   TgdShaderVertex: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.TgdShaderVertex),
/* harmony export */   TgdTable: () => (/* reexport safe */ _table_index_js__WEBPACK_IMPORTED_MODULE_23__.TgdTable),
/* harmony export */   TgdTableFloat32: () => (/* reexport safe */ _table_index_js__WEBPACK_IMPORTED_MODULE_23__.TgdTableFloat32),
/* harmony export */   TgdTableUint8: () => (/* reexport safe */ _table_index_js__WEBPACK_IMPORTED_MODULE_23__.TgdTableUint8),
/* harmony export */   TgdTexture2D: () => (/* reexport safe */ _texture_index_js__WEBPACK_IMPORTED_MODULE_24__.TgdTexture2D),
/* harmony export */   TgdTextureCubeImpl: () => (/* reexport safe */ _texture_index_js__WEBPACK_IMPORTED_MODULE_24__.TgdTextureCubeImpl),
/* harmony export */   TgdTransfo: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdTransfo),
/* harmony export */   TgdVec2: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdVec2),
/* harmony export */   TgdVec3: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdVec3),
/* harmony export */   TgdVec4: () => (/* reexport safe */ _math_index_js__WEBPACK_IMPORTED_MODULE_17__.TgdVec4),
/* harmony export */   TgdVertexArray: () => (/* reexport safe */ _vao_index_js__WEBPACK_IMPORTED_MODULE_26__.TgdVertexArray),
/* harmony export */   WebglEnumBlendEquation: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumBlendEquation),
/* harmony export */   WebglEnumBlendFunction: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumBlendFunction),
/* harmony export */   WebglEnumCullFace: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumCullFace),
/* harmony export */   WebglEnumDepthFunction: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumDepthFunction),
/* harmony export */   WebglEnumStencilFunction: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumStencilFunction),
/* harmony export */   WebglEnumStencilOperation: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumStencilOperation),
/* harmony export */   WebglEnumTex2DInternalFormat: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.WebglEnumTex2DInternalFormat),
/* harmony export */   assertElementsTypedArray: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.assertElementsTypedArray),
/* harmony export */   assertTgdFormatGltf: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.assertTgdFormatGltf),
/* harmony export */   assertTgdTypeArrayForElements: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.assertTgdTypeArrayForElements),
/* harmony export */   expandFunctions: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.expandFunctions),
/* harmony export */   expandVariables: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.expandVariables),
/* harmony export */   isCodeBloc: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.isCodeBloc),
/* harmony export */   isTgdFormatGltfCameraOrthographic: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.isTgdFormatGltfCameraOrthographic),
/* harmony export */   isTgdFormatGltfCameraPerspective: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.isTgdFormatGltfCameraPerspective),
/* harmony export */   isWebglImage: () => (/* reexport safe */ _types_index_js__WEBPACK_IMPORTED_MODULE_28__.isWebglImage),
/* harmony export */   tgdActionCreateCameraInterpolation: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdActionCreateCameraInterpolation),
/* harmony export */   tgdActionCreateTransfoInterpolation: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdActionCreateTransfoInterpolation),
/* harmony export */   tgdActionCreateVec2Interpolation: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdActionCreateVec2Interpolation),
/* harmony export */   tgdActionCreateVec3Interpolation: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdActionCreateVec3Interpolation),
/* harmony export */   tgdActionCreateVec4Interpolation: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdActionCreateVec4Interpolation),
/* harmony export */   tgdAnimChain: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdAnimChain),
/* harmony export */   tgdAnimChainTransfoInterpolations: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdAnimChainTransfoInterpolations),
/* harmony export */   tgdCalcClamp: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcClamp),
/* harmony export */   tgdCalcDegToRad: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcDegToRad),
/* harmony export */   tgdCalcMix: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcMix),
/* harmony export */   tgdCalcModulo: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcModulo),
/* harmony export */   tgdCalcRadToDeg: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcRadToDeg),
/* harmony export */   tgdCalcRandom: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcRandom),
/* harmony export */   tgdCalcSmoothStep: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCalcSmoothStep),
/* harmony export */   tgdCanvasCreate: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreate),
/* harmony export */   tgdCanvasCreateCreateGradientvertical: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreateCreateGradientvertical),
/* harmony export */   tgdCanvasCreateFill: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreateFill),
/* harmony export */   tgdCanvasCreateGradient: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreateGradient),
/* harmony export */   tgdCanvasCreateGradientHorizontal: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreateGradientHorizontal),
/* harmony export */   tgdCanvasCreatePalette: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreatePalette),
/* harmony export */   tgdCanvasCreateWithContext2D: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdCanvasCreateWithContext2D),
/* harmony export */   tgdCodeConstants: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeConstants),
/* harmony export */   tgdCodeFunction_luminance: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_luminance),
/* harmony export */   tgdCodeFunction_polar2uv: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_polar2uv),
/* harmony export */   tgdCodeFunction_polar2xy: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_polar2xy),
/* harmony export */   tgdCodeFunction_random: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_random),
/* harmony export */   tgdCodeFunction_rotate2D: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_rotate2D),
/* harmony export */   tgdCodeFunction_shiftHue: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_shiftHue),
/* harmony export */   tgdCodeFunction_uv2polar: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_uv2polar),
/* harmony export */   tgdCodeFunction_uv2xy: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_uv2xy),
/* harmony export */   tgdCodeFunction_xy2polar: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_xy2polar),
/* harmony export */   tgdCodeFunction_xy2uv: () => (/* reexport safe */ _code_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_xy2uv),
/* harmony export */   tgdCodeStringify: () => (/* reexport safe */ _shader_index_js__WEBPACK_IMPORTED_MODULE_22__.tgdCodeStringify),
/* harmony export */   tgdComputeBoundingBox3D: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdComputeBoundingBox3D),
/* harmony export */   tgdEasingFunctionInBack: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInBack),
/* harmony export */   tgdEasingFunctionInBounce: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInBounce),
/* harmony export */   tgdEasingFunctionInCirc: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInCirc),
/* harmony export */   tgdEasingFunctionInCubic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInCubic),
/* harmony export */   tgdEasingFunctionInElastic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInElastic),
/* harmony export */   tgdEasingFunctionInExpo: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInExpo),
/* harmony export */   tgdEasingFunctionInOutBack: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutBack),
/* harmony export */   tgdEasingFunctionInOutBounce: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutBounce),
/* harmony export */   tgdEasingFunctionInOutCirc: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutCirc),
/* harmony export */   tgdEasingFunctionInOutCubic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutCubic),
/* harmony export */   tgdEasingFunctionInOutElastic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutElastic),
/* harmony export */   tgdEasingFunctionInOutExpo: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutExpo),
/* harmony export */   tgdEasingFunctionInOutQuad: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutQuad),
/* harmony export */   tgdEasingFunctionInOutQuart: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutQuart),
/* harmony export */   tgdEasingFunctionInOutQuint: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutQuint),
/* harmony export */   tgdEasingFunctionInOutSine: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInOutSine),
/* harmony export */   tgdEasingFunctionInQuad: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInQuad),
/* harmony export */   tgdEasingFunctionInQuart: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInQuart),
/* harmony export */   tgdEasingFunctionInQuint: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInQuint),
/* harmony export */   tgdEasingFunctionInSine: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionInSine),
/* harmony export */   tgdEasingFunctionLinear: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionLinear),
/* harmony export */   tgdEasingFunctionOutBack: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutBack),
/* harmony export */   tgdEasingFunctionOutBounce: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutBounce),
/* harmony export */   tgdEasingFunctionOutCirc: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutCirc),
/* harmony export */   tgdEasingFunctionOutCubic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutCubic),
/* harmony export */   tgdEasingFunctionOutElastic: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutElastic),
/* harmony export */   tgdEasingFunctionOutExpo: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutExpo),
/* harmony export */   tgdEasingFunctionOutQuad: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutQuad),
/* harmony export */   tgdEasingFunctionOutQuart: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutQuart),
/* harmony export */   tgdEasingFunctionOutQuint: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutQuint),
/* harmony export */   tgdEasingFunctionOutSine: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdEasingFunctionOutSine),
/* harmony export */   tgdFullscreenExit: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdFullscreenExit),
/* harmony export */   tgdFullscreenRequest: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdFullscreenRequest),
/* harmony export */   tgdFullscreenTest: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdFullscreenTest),
/* harmony export */   tgdFullscreenToggle: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdFullscreenToggle),
/* harmony export */   tgdLoadArrayBuffer: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadArrayBuffer),
/* harmony export */   tgdLoadAssets: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadAssets),
/* harmony export */   tgdLoadCanvas: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadCanvas),
/* harmony export */   tgdLoadGlb: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadGlb),
/* harmony export */   tgdLoadImage: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadImage),
/* harmony export */   tgdLoadImages: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadImages),
/* harmony export */   tgdLoadText: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadText),
/* harmony export */   tgdLoadVideo: () => (/* reexport safe */ _loader_index_js__WEBPACK_IMPORTED_MODULE_14__.tgdLoadVideo),
/* harmony export */   tgdMakeMeshGlbPainter: () => (/* reexport safe */ _factory_index_js__WEBPACK_IMPORTED_MODULE_9__.tgdMakeMeshGlbPainter),
/* harmony export */   tgdPixelBufferObjectCreate: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.tgdPixelBufferObjectCreate),
/* harmony export */   webglBlendExec: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglBlendExec),
/* harmony export */   webglBlendGet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglBlendGet),
/* harmony export */   webglBlendSet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglBlendSet),
/* harmony export */   webglCreateFramebuffer: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglCreateFramebuffer),
/* harmony export */   webglCullExec: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglCullExec),
/* harmony export */   webglCullGet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglCullGet),
/* harmony export */   webglCullSet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglCullSet),
/* harmony export */   webglDebugBlend: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDebugBlend),
/* harmony export */   webglDebugCull: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDebugCull),
/* harmony export */   webglDebugDepth: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDebugDepth),
/* harmony export */   webglDebugStencil: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDebugStencil),
/* harmony export */   webglDepthExec: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDepthExec),
/* harmony export */   webglDepthGet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDepthGet),
/* harmony export */   webglDepthSet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglDepthSet),
/* harmony export */   webglElementTypeFromTypedArray: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglElementTypeFromTypedArray),
/* harmony export */   webglLookup: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglLookup),
/* harmony export */   webglPresetBlend: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglPresetBlend),
/* harmony export */   webglPresetCull: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglPresetCull),
/* harmony export */   webglPresetDepth: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglPresetDepth),
/* harmony export */   webglPresetStencil: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglPresetStencil),
/* harmony export */   webglStencilExec: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglStencilExec),
/* harmony export */   webglStencilGet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglStencilGet),
/* harmony export */   webglStencilSet: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglStencilSet),
/* harmony export */   webglTextureCreate: () => (/* reexport safe */ _webgl_index_js__WEBPACK_IMPORTED_MODULE_27__.webglTextureCreate),
/* harmony export */   webglTextureCreate2DFromArray: () => (/* reexport safe */ _webgl_index_js__WEBPACK_IMPORTED_MODULE_27__.webglTextureCreate2DFromArray),
/* harmony export */   webglTextureParametersSet: () => (/* reexport safe */ _webgl_index_js__WEBPACK_IMPORTED_MODULE_27__.webglTextureParametersSet),
/* harmony export */   webglTypedArrayFromBufferSource: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_25__.webglTypedArrayFromBufferSource)
/* harmony export */ });
/* harmony import */ var _buffer_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer/index.js */ 4004);
/* harmony import */ var _camera_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camera/index.js */ 7601);
/* harmony import */ var _canvas_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas/index.js */ 8466);
/* harmony import */ var _code_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./code/index.js */ 8243);
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./color/index.js */ 3709);
/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./context/index.js */ 4773);
/* harmony import */ var _controller_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controller/index.js */ 9798);
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dataset/index.js */ 5710);
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./event/index.js */ 5018);
/* harmony import */ var _factory_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./factory/index.js */ 6844);
/* harmony import */ var _filter_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./filter/index.js */ 6548);
/* harmony import */ var _geometry_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./geometry/index.js */ 7250);
/* harmony import */ var _input_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./input/index.js */ 1986);
/* harmony import */ var _light_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./light/index.js */ 6594);
/* harmony import */ var _loader_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./loader/index.js */ 7061);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./log.js */ 303);
/* harmony import */ var _material_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./material/index.js */ 8163);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./math/index.js */ 6088);
/* harmony import */ var _painter_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./painter/index.js */ 6009);
/* harmony import */ var _painter_painter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./painter/painter.js */ 2362);
/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parser/index.js */ 3365);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./program/index.js */ 9974);
/* harmony import */ var _shader_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shader/index.js */ 1887);
/* harmony import */ var _table_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./table/index.js */ 5938);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./texture/index.js */ 4765);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./utils/index.js */ 3291);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./vao/index.js */ 9856);
/* harmony import */ var _webgl_index_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./webgl/index.js */ 3651);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./types/index.js */ 5327);





























//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxjQUFjLENBQUE7QUFDNUIsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxPQUFPLENBQUE7QUFDckIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxtQkFBbUIsQ0FBQTtBQUNqQyxjQUFjLFVBQVUsQ0FBQTtBQUN4QixjQUFjLFdBQVcsQ0FBQTtBQUN6QixjQUFjLFVBQVUsQ0FBQTtBQUN4QixjQUFjLFNBQVMsQ0FBQTtBQUN2QixjQUFjLFdBQVcsQ0FBQTtBQUN6QixjQUFjLFNBQVMsQ0FBQTtBQUN2QixjQUFjLE9BQU8sQ0FBQTtBQUNyQixjQUFjLFNBQVMsQ0FBQTtBQUV2QixjQUFjLFNBQVMsQ0FBQSJ9

/***/ }),

/***/ 1033:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/material/diffuse.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialDiffuse: () => (/* binding */ TgdMaterialDiffuse)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material.js */ 6018);
/* harmony import */ var _light_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../light/index.js */ 6594);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../texture/index.js */ 4765);




const DEFAULT_COLOR = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4(0.8, 0.6, 0.1, 1);
class TgdMaterialDiffuse extends _material_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterial {
    constructor(options = {}) {
        var _a;
        super();
        this.light = new _light_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdLight();
        this.ambient = new _light_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdLight({ color: new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4(0.2, 0.1, 0, 0) });
        this.specularExponent = 20;
        this.specularIntensity = 1;
        this.uniforms = {
            uniLight: "vec3",
            uniLightDir: "vec3",
            uniAmbient: "vec3",
            uniSpecularExponent: "float",
            uniSpecularIntensity: "float",
            uniModelViewMatrix: "mat4",
        };
        this.lightColor = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3();
        this.ambientColor = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3();
        const color = options.color instanceof _texture_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdTexture2D
            ? options.color
            : new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4((_a = options.color) !== null && _a !== void 0 ? _a : DEFAULT_COLOR);
        if (options.light) {
            this.light = options.light;
        }
        if (options.ambient) {
            this.ambient = options.ambient;
        }
        if (typeof options.specularExponent === "number") {
            this.specularExponent = options.specularExponent;
        }
        if (typeof options.specularIntensity === "number") {
            this.specularIntensity = options.specularIntensity;
        }
        const hasTexture = !(color instanceof _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4);
        this.texture = hasTexture ? color : null;
        this.fragmentShaderCode = [
            "vec3 normal = normalize(varNormal);",
            `float light = 1.0 - dot(normal, uniLightDir);`,
            hasTexture
                ? `vec4 color = texture(texDiffuse, varUV);`
                : `vec4 color = vec4(${color.join(", ")});`,
            `vec3 normal2 = mat3(uniModelViewMatrix) * normal;`,
            `float spec = max(0.0, reflect(uniLightDir, normal2).z);`,
            `spec = pow(spec, uniSpecularExponent) * uniSpecularIntensity;`,
            `color = vec4(`,
            `  color.rgb * (`,
            `    uniAmbient + uniLight * light`,
            `  ) + vec3(spec),`,
            `  1.0`,
            `);`,
            `return color;`,
        ];
        this.vertexShaderCode = ["varNormal = mat3(uniTransfoMatrix) * NORMAL;"];
        this.varyings = {
            varNormal: "vec3",
        };
        if (hasTexture) {
            this.vertexShaderCode.push("varUV = TEXCOORD_0;");
            this.varyings.varUV = "vec2";
            this.uniforms.texDiffuse = "sampler2D";
        }
    }
    setUniforms(program) {
        program.uniform3fv("uniLightDir", this.light.direction);
        this.lightColor.from(this.light.color).scale(this.light.color.w);
        program.uniform3fv("uniLight", this.lightColor);
        this.ambientColor.from(this.ambient.color).scale(this.ambient.color.w);
        program.uniform3fv("uniAmbient", this.ambientColor);
        program.uniform1f("uniSpecularExponent", this.specularExponent);
        program.uniform1f("uniSpecularIntensity", this.specularIntensity);
        const { texture } = this;
        if (texture)
            texture.activate(0, program, "texDiffuse");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZnVzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRlcmlhbC9kaWZmdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQzVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBVzNDLE1BQU0sYUFBYSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRW5ELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxXQUFXO0lBc0IvQyxZQUFZLFVBQXFDLEVBQUU7O1FBQy9DLEtBQUssRUFBRSxDQUFBO1FBdEJKLFVBQUssR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFBO1FBQ3RCLFlBQU8sR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDOUQscUJBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQ3JCLHNCQUFpQixHQUFHLENBQUMsQ0FBQTtRQUdaLGFBQVEsR0FBeUM7WUFDN0QsUUFBUSxFQUFFLE1BQU07WUFDaEIsV0FBVyxFQUFFLE1BQU07WUFDbkIsVUFBVSxFQUFFLE1BQU07WUFDbEIsbUJBQW1CLEVBQUUsT0FBTztZQUM1QixvQkFBb0IsRUFBRSxPQUFPO1lBQzdCLGtCQUFrQixFQUFFLE1BQU07U0FDN0IsQ0FBQTtRQUtnQixlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUMxQixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFJekMsTUFBTSxLQUFLLEdBQ1AsT0FBTyxDQUFDLEtBQUssWUFBWSxZQUFZO1lBQ2pDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSztZQUNmLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFBLE9BQU8sQ0FBQyxLQUFLLG1DQUFJLGFBQWEsQ0FBQyxDQUFBO1FBQ3JELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUM5QixDQUFDO1FBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFBO1FBQ2xDLENBQUM7UUFDRCxJQUFJLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUE7UUFDcEQsQ0FBQztRQUNELElBQUksT0FBTyxPQUFPLENBQUMsaUJBQWlCLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDaEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQTtRQUN0RCxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEtBQUssWUFBWSxPQUFPLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7UUFDeEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHO1lBQ3RCLHFDQUFxQztZQUNyQywrQ0FBK0M7WUFDL0MsVUFBVTtnQkFDTixDQUFDLENBQUMsMENBQTBDO2dCQUM1QyxDQUFDLENBQUMscUJBQXFCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDL0MsbURBQW1EO1lBQ25ELHlEQUF5RDtZQUN6RCwrREFBK0Q7WUFDL0QsZUFBZTtZQUNmLGlCQUFpQjtZQUNqQixtQ0FBbUM7WUFDbkMsbUJBQW1CO1lBQ25CLE9BQU87WUFDUCxJQUFJO1lBQ0osZUFBZTtTQUNsQixDQUFBO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQTtRQUN4RSxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ1osU0FBUyxFQUFFLE1BQU07U0FDcEIsQ0FBQTtRQUNELElBQUksVUFBVSxFQUFFLENBQUM7WUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUE7WUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFBO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQTtRQUMxQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFtQjtRQUMzQixPQUFPLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2hFLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0RSxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDbkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUMvRCxPQUFPLENBQUMsU0FBUyxDQUFDLHNCQUFzQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBRWpFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDeEIsSUFBSSxPQUFPO1lBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQzNELENBQUM7Q0FDSiJ9

/***/ }),

/***/ 1088:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/gizmo/painter/shader.vert ***!
  \************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\nuniform float uniScreenHeight;\n\n/**\n * Position of the tip.\n */\nin vec4 attPos;\nin vec2 attUV;\n\nout vec2 varUV;\n\nvoid main() {\n    varUV = attUV;\n    vec4 point = uniModelViewMatrix * attPos;\n    gl_Position = uniProjectionMatrix * point;\n    point.y += 0.3;\n    point = uniProjectionMatrix * point;\n    gl_PointSize = uniScreenHeight * abs(gl_Position.y / gl_Position.w - point.y / point.w);\n}\n";

/***/ }),

/***/ 1178:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/framebuffer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterFramebuffer: () => (/* binding */ TgdPainterFramebuffer)
/* harmony export */ });
/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./group.js */ 814);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/index.js */ 3291);


class TgdPainterFramebuffer extends _group_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterGroup {
    constructor(context, options) {
        super(options.children);
        this.context = context;
        this.options = options;
        /**
         * The framebuffer becomes dirty as soon as the width or height changes.
         */
        this.dirty = true;
        this._width = 0;
        this._height = 0;
        this._framebuffer = null;
        this._depthBuffer = null;
        this._stencilBuffer = null;
        const { textureColor0, textureColor1, textureColor2, textureColor3 } = options;
        if (!(textureColor0 || textureColor1 || textureColor2 || textureColor3)) {
            console.error("[TgdPainterFramebuffer] You gave no color texture in the constructor: nothing will be rendered!");
        }
        this.textureColor0 = textureColor0;
        this.textureColor1 = textureColor1;
        this.textureColor2 = textureColor2;
        this.textureColor3 = textureColor3;
        this.textureDepth = options.textureDepth;
        this.onEnter = options.onEnter;
        this.onExit = options.onExit;
        const { gl } = this.context;
        this.drawBuffers = [
            this.textureColor0 ? gl.COLOR_ATTACHMENT0 : gl.NONE,
            this.textureColor1 ? gl.COLOR_ATTACHMENT1 : gl.NONE,
            this.textureColor2 ? gl.COLOR_ATTACHMENT2 : gl.NONE,
            this.textureColor3 ? gl.COLOR_ATTACHMENT3 : gl.NONE,
        ];
    }
    get width() {
        return this._width;
    }
    set width(v) {
        if (this._width === v)
            return;
        this._width = v;
        this.dirty = true;
    }
    get height() {
        return this._height;
    }
    set height(v) {
        if (this._height === v)
            return;
        this._height = v;
        this.dirty = true;
    }
    updateTextureForColor(tgdTexture, attachment) {
        if (!tgdTexture)
            return;
        const { context, width, height } = this;
        const { gl } = context;
        tgdTexture.resize(width, height);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + attachment, gl.TEXTURE_2D, tgdTexture.glTexture, 0);
    }
    createTextureForDepth() {
        const tgdTexture = this.textureDepth;
        if (!tgdTexture)
            return;
        const { context, width, height } = this;
        const { gl } = context;
        tgdTexture.resize(width, height);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, tgdTexture.glTexture, 0);
    }
    createDepthBuffer(gl) {
        if (this.options.depthBuffer === false)
            return;
        const { width, height } = this;
        // Create a Depth Buffer, because the default
        // framebuffer has none.
        const depthBuffer = gl.createRenderbuffer();
        if (!depthBuffer)
            throw new Error("Unable to create WebGLRenderBuffer for depth!");
        this._depthBuffer = depthBuffer;
        gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
    }
    createStencilBuffer(gl) {
        if (this.options.stencilBuffer !== false) {
            const { width, height } = this;
            const stencilBuffer = gl.createRenderbuffer();
            if (!stencilBuffer)
                throw new Error("Unable to create WebGLRenderBuffer for stencil!");
            this._stencilBuffer = stencilBuffer;
            gl.bindRenderbuffer(gl.RENDERBUFFER, stencilBuffer);
            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencilBuffer);
        }
    }
    createFramebufferIfNeeded() {
        if (!this.dirty)
            return;
        const { context } = this;
        const { gl } = context;
        this.delete();
        this._framebuffer = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.webglCreateFramebuffer)(gl);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
        this.updateTextureForColor(this.textureColor0, 0);
        this.updateTextureForColor(this.textureColor1, 1);
        this.updateTextureForColor(this.textureColor2, 2);
        this.updateTextureForColor(this.textureColor3, 3);
        this.createTextureForDepth();
        this.createDepthBuffer(gl);
        this.createStencilBuffer(gl);
        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status !== gl.FRAMEBUFFER_COMPLETE) {
            console.error(`Your Framebuffer is incomplete: ${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.webglLookup)(status)}!`);
        }
        this.dirty = false;
    }
    paint(time, delay) {
        const { context, options } = this;
        const { gl } = context;
        const { viewportMatchingScale = 1 } = options;
        this.width = Math.round(context.width * viewportMatchingScale);
        this.height = Math.round(context.height * viewportMatchingScale);
        this.createFramebufferIfNeeded();
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
        gl.drawBuffers(this.drawBuffers);
        super.paint(time, delay);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
    delete() {
        const { context, _framebuffer, _depthBuffer, _stencilBuffer } = this;
        const { gl } = context;
        if (_framebuffer) {
            gl.deleteFramebuffer(_framebuffer);
            this._framebuffer = null;
        }
        if (_depthBuffer) {
            gl.deleteRenderbuffer(_depthBuffer);
            this._depthBuffer = null;
        }
        if (_stencilBuffer) {
            gl.deleteRenderbuffer(_stencilBuffer);
            this._stencilBuffer = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVidWZmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9mcmFtZWJ1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUEwQ2hFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxlQUFlO0lBa0J0RCxZQUNxQixPQUFtQixFQUNuQixPQUE4QztRQUUvRCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBSE4sWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUF1QztRQWJuRTs7V0FFRztRQUNLLFVBQUssR0FBRyxJQUFJLENBQUE7UUFDWixXQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ1YsWUFBTyxHQUFHLENBQUMsQ0FBQTtRQUNYLGlCQUFZLEdBQTRCLElBQUksQ0FBQTtRQUM1QyxpQkFBWSxHQUE2QixJQUFJLENBQUE7UUFDN0MsbUJBQWMsR0FBNkIsSUFBSSxDQUFBO1FBUW5ELE1BQU0sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsR0FDaEUsT0FBTyxDQUFBO1FBQ1gsSUFDSSxDQUFDLENBQUMsYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLEVBQ3JFLENBQUM7WUFDQyxPQUFPLENBQUMsS0FBSyxDQUNULGlHQUFpRyxDQUNwRyxDQUFBO1FBQ0wsQ0FBQztRQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO1FBQ2xDLElBQUksQ0FBQyxZ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

/***/ }),

/***/ 1230:
/*!*******************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterBackground: () => (/* reexport safe */ _background_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterBackground)
/* harmony export */ });
/* harmony import */ var _background_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background.js */ 5784);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9iYWNrZ3JvdW5kL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsY0FBYyxDQUFBIn0=

/***/ }),

/***/ 1252:
/*!**********************************************************!*\
  !*** ../../tgd2/lib/dist/filter/chromatic-aberration.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilterChromaticAberration: () => (/* binding */ TgdFilterChromaticAberration)
/* harmony export */ });
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter.js */ 3672);

class TgdFilterChromaticAberration extends _filter_js__WEBPACK_IMPORTED_MODULE_0__.TgdFilter {
    constructor(options = {}) {
        const { strength = 1 } = options;
        super({
            fragmentShaderCode: [
                "vec2 dir = (varUV - vec2(0.5)) * 0.01 * uniStrength;",
                "float r = texture(uniTexture, varUV + dir).r;",
                "float g = texture(uniTexture, varUV).g;",
                "float b = texture(uniTexture, varUV - dir).b;",
                `FragColor = vec4(r, g, b, 1);`,
            ],
            uniforms: {
                uniStrength: "float",
            },
            setUniforms: ({ program }) => {
                program.uniform1f("uniStrength", this.strength);
                program.uniform1f("uniInverseHeight", 1 / program.gl.drawingBufferHeight);
            },
        });
        /**
         * Percentage of displacement of the color or the border of the image.
         * The blue is push await from the center, and the red is pulled to
         * the center. But if you use a negative `strength`, the process is
         * reversed.
         *
         * Default to 1.0 (means 1% of displacement).
         */
        this.strength = 1;
        this.strength = strength;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hyb21hdGljLWFiZXJyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsdGVyL2Nocm9tYXRpYy1hYmVycmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFjcEMsTUFBTSxPQUFPLDRCQUE2QixTQUFRLFNBQVM7SUFXdkQsWUFBWSxVQUF3RCxFQUFFO1FBQ2xFLE1BQU0sRUFBRSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQ2hDLEtBQUssQ0FBQztZQUNGLGtCQUFrQixFQUFFO2dCQUNoQixzREFBc0Q7Z0JBQ3RELCtDQUErQztnQkFDL0MseUNBQXlDO2dCQUN6QywrQ0FBK0M7Z0JBQy9DLCtCQUErQjthQUNsQztZQUNELFFBQVEsRUFBRTtnQkFDTixXQUFXLEVBQUUsT0FBTzthQUN2QjtZQUNELFdBQVcsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtnQkFDekIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO2dCQUMvQyxPQUFPLENBQUMsU0FBUyxDQUNiLGtCQUFrQixFQUNsQixDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FDckMsQ0FBQTtZQUNMLENBQUM7U0FDSixDQUFDLENBQUE7UUE5Qk47Ozs7Ozs7V0FPRztRQUNJLGFBQVEsR0FBRyxDQUFDLENBQUE7UUF1QmYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7SUFDNUIsQ0FBQztDQUNKIn0=

/***/ }),

/***/ 1468:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/controller/camera/orbit.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdControllerCameraOrbit: () => (/* binding */ TgdControllerCameraOrbit)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../utils/index.js */ 3291);
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../utils/math.js */ 1793);
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../event/index.js */ 5018);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../math/index.js */ 6088);




class TgdControllerCameraOrbit {
    constructor(context, { geo, minZoom = 1e-3, maxZoom = Infinity, speedZoom = 1, speedOrbit = 1, speedPanning = 1, inertiaZoom = 0, inertiaOrbit = 0, inertiaPanning = 0, fixedTarget = false, debug = false, onZoomRequest = alwaysTrue, } = {}) {
        this.context = context;
        this.id = `TgdControllerCameraOrbit-${TgdControllerCameraOrbit.counter++}`;
        this.eventChange = new _event_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdEvent();
        this.minZoom = 1e-3;
        this.maxZoom = Infinity;
        this.speedZoom = 1;
        this.speedOrbit = 1;
        this.speedPanning = 1;
        this.inertiaZoom = 0;
        this.inertiaOrbit = 0;
        this.inertiaPanning = 0;
        /**
         * If `true`, pannig will only act on `camera.shift`,
         * not on `camera.target`.
         */
        this.fixedTarget = false;
        /**
         * The camera will only move if `enabled === true`.
         */
        this._enabled = true;
        this.animOrbit = null;
        /**
         * It can be usefull to disable to orbit controller for some time
         * because an animation is going on on the camera, for instance.
         */
        this.disabledUntil = 0;
        this.tmpQuat = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdQuat();
        this.handleMove = (event) => {
            if (!this.enabled || this.animOrbit)
                return;
            this.actualMove(event);
        };
        this.actualMove = (event) => {
            const dt = event.current.t - event.previous.t;
            if (dt <= 0)
                return;
            const { context } = this;
            const { keyboard } = context.inputs;
            if (event.altKey || event.current.fingersCount === 2)
                return this.handlePan(event);
            if (this.geo) {
                const speed = keyboard.isDown("Shift") ? 0.2 : 2;
                const lngDelta = keyboard.isDown("x")
                    ? 0
                    : speed * (event.previous.x - event.current.x);
                const latDelta = keyboard.isDown("y")
                    ? 0
                    : speed * (event.previous.y - event.current.y);
                const lng = this.geo.lng + lngDelta;
                const lat = this.geo.lat + latDelta;
                this.orbitGeo(lat, lng);
                return;
            }
            if (keyboard.isDown("z"))
                return this.handleRotateAroundZ(event);
            this.orbit(event.current.x - event.previous.x, event.current.y - event.previous.y, event.shiftKey);
        };
        this.handleMoveStart = () => {
            if (!this.enabled)
                return;
            const { animOrbit, context } = this;
            if (animOrbit) {
                context.animCancel(animOrbit);
                this.animOrbit = null;
            }
        };
        this.handleMoveEnd = (event) => {
            if (!this.enabled)
                return;
            const { context, inertiaOrbit } = this;
            if (inertiaOrbit > 0) {
                const inverseDeltaTime = 1 / (event.current.t - event.previous.t);
                const speedX = inverseDeltaTime * (event.current.x - event.previous.x);
                const speedY = inverseDeltaTime * (event.current.y - event.previous.y);
                const currentEvent = structuredClone(event);
                currentEvent.current.t = Date.now();
                this.animOrbit = {
                    duration: inertiaOrbit * 1e-3,
                    action: alpha => {
                        currentEvent.previous.t = currentEvent.current.t;
                        currentEvent.previous.x = currentEvent.current.x;
                        currentEvent.previous.y = currentEvent.current.y;
                        currentEvent.previous.fingersCount =
                            currentEvent.current.fingersCount;
                        currentEvent.current.t = Date.now();
                        const deltaTime = currentEvent.current.t - currentEvent.previous.t;
                        const strength = 1 - alpha;
                        const factor = strength * deltaTime;
                        currentEvent.current.x += factor * speedX;
                        currentEvent.current.y += factor * speedY;
                        this.actualMove(currentEvent);
                    },
                    easingFunction: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutQuad,
                };
                context.animSchedule(this.animOrbit);
            }
        };
        this.handleZoom = (event) => {
            if (!this.enabled ||
                this.speedZoom === 0 ||
                !this.onZoomRequest({
                    altKey: event.altKey,
                    ctrlKey: event.ctrlKey,
                    metaKey: event.metaKey,
                    shiftKey: event.shiftKey,
                    x: event.current.x,
                    y: event.current.y,
                }))
                return;
            const { context } = this;
            const { camera } = context;
            let speed = 0.1 * this.speedZoom;
            if (this.context.inputs.keyboard.isDown("Shift"))
                speed *= 0.1;
            const dz = -event.direction * speed;
            camera.transfo.distance = Math.max(0, camera.transfo.distance + dz);
            // camera.zoom = tgdCalcClamp(
            //     camera.zoom * (1 + dz),
            //     this.minZoom,
            //     this.maxZoom
            // )
            event.preventDefault();
            this.fireZoomChange();
        };
        this.geo = undefined;
        if (geo) {
            this.geo = Object.assign({ lat: 0, lng: 0, minLat: -Math.PI / 2, maxLat: +Math.PI / 2, minLng: -Number.MAX_VALUE, maxLng: +Number.MAX_VALUE }, geo);
        }
        this.cameraInitialState = context.camera.getCurrentState();
        const { inputs } = context;
        inputs.pointer.eventMoveStart.addListener(this.handleMoveStart);
        inputs.pointer.eventMoveEnd.addListener(this.handleMoveEnd);
        inputs.pointer.eventMove.addListener(this.handleMove);
        inputs.pointer.eventZoom.addListener(this.handleZoom);
        this.speedOrbit = speedOrbit;
        this.speedZoom = speedZoom;
        this.speedPanning = speedPanning;
        this.inertiaOrbit = inertiaOrbit;
        this.inertiaZoom = inertiaZoom;
        this.inertiaPanning = inertiaPanning;
        this.fixedTarget = fixedTarget;
        this.minZoom = minZoom;
        this.maxZoom = maxZoom;
        this.onZoomRequest = onZoomRequest;
        if (this.geo)
            this.orbitGeo(this.geo.lat, this.geo.lng);
        globalThis.setTimeout(() => context.paint());
        if (debug) {
            context.inputs.keyboard.eventKeyPress.addListener(event => {
                if (event.key === "?") {
                    console.log(this.context.camera.toCode());
                }
            });
        }
    }
    get enabled() {
        return this.context.time > this.disabledUntil && this._enabled;
    }
    set enabled(value) {
        this._enabled = value;
    }
    reset(animDuration, easingFunction) {
        const { context } = this;
        this.disableForSomeTime(animDuration);
        context.animSchedule({
            action: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateCameraInterpolation)(context.camera, this.cameraInitialState),
            duration: animDuration,
            easingFunction,
        });
    }
    disableForSomeTime(delayInMsec) {
        this.disabledUntil = Math.max(this.disabledUntil, this.context.time + delayInMsec);
    }
    detach() {
        const { inputs } = this.context;
        inputs.pointer.eventMove.removeListener(this.handleMove);
        inputs.pointer.eventZoom.removeListener(this.handleZoom);
    }
    orbit(deltaX, deltaY, slowDown) {
        const { context } = this;
        const { camera } = context;
        const { keyboard } = context.inputs;
        const speed = 3 * (slowDown ? 0.1 : 1) * this.speedOrbit;
        const dx = deltaX * speed;
        const dy = deltaY * speed;
        if (!keyboard.isDown("x"))
            camera.transfo.orbitAroundY(dx);
        if (!keyboard.isDown("y"))
            camera.transfo.orbitAroundX(-dy);
        this.fireOrbitChange();
    }
    /**
     * Set the camera orientation from latitude/longitude
     * @param lat Expressed in radians
     * @param lng Expressed in radians
     */
    orbitGeo(lat, lng) {
        const { geo } = this;
        if (!geo)
            return;
        lat = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.tgdCalcClamp)(lat, geo.minLat, geo.maxLat);
        geo.lat = lat;
        lng = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.tgdCalcClamp)(lng, geo.minLng, geo.maxLng);
        geo.lng = lng;
        const { orientation } = this.cameraInitialState;
        const vecZ = makeGeoVec3(lat, lng);
        const vecY = makeGeoVec3(lat + Math.PI / 2, lng);
        const vecX = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdVec3(vecY).cross(vecZ);
        const mat = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdMat3();
        orientation.toMatrix(mat);
        const final = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdMat3(vecX, vecY, vecZ);
        final.multiply(mat);
        this.tmpQuat.fromMatrix(final);
        this.context.camera.transfo.orientation = this.tmpQuat;
        this.fireOrbitChange();
    }
    handlePan(event) {
        const { fixedTarget, speedPanning, context } = this;
        const { camera } = context;
        const inverseZoom = 1 / camera.zoom;
        const panSpeed = 0.5 * speedPanning * inverseZoom;
        const dx = (event.current.x - event.previous.x) *
            panSpeed *
            camera.spaceWidthAtTarget;
        const dy = (event.current.y - event.previous.y) *
            panSpeed *
            camera.spaceHeightAtTarget;
        if (fixedTarget) {
            // camera.moveShift(-dx, -dy, 0)
        }
        else {
            camera.transfo.moveAlongAxes(-dx, -dy, 0);
        }
        this.fireOrbitChange();
        return;
    }
    handleRotateAroundZ(event) {
        const { camera } = this.context;
        const x1 = event.previous.x;
        const y1 = event.previous.y;
        if (Math.abs(x1) + Math.abs(y1) === 0)
            return;
        const x2 = event.current.x;
        const y2 = event.current.y;
        if (Math.abs(x2) + Math.abs(y2) === 0)
            return;
        const x = x1 * x2 + y1 * y2;
        const y = x1 * y2 - y1 * x2;
        const ang = Math.atan2(y, x) * this.speedOrbit;
        camera.transfo.orbitAroundZ(ang);
        this.fireOrbitChange();
        return;
    }
    fireOrbitChange() {
        this.context.paint();
        this.eventChange.dispatch(this.context.camera);
    }
    fireZoomChange() {
        this.context.paint();
    }
}
TgdControllerCameraOrbit.counter = 0;
/**
 * Default function for `onZoomRequest`.
 */
const alwaysTrue = () => true;
function makeGeoVec3(lat, lng) {
    const radius = Math.cos(lat);
    const y = Math.sin(lat);
    const z = radius * Math.cos(lng);
    const x = radius * Math.sin(lng);
    return new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdVec3(x, y, z);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 1556:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/filter/verbatim.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilterVerbatim: () => (/* binding */ TgdFilterVerbatim)
/* harmony export */ });
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter.js */ 3672);

/**
 * Paint the texture as it is, without any modification.
 */
class TgdFilterVerbatim extends _filter_js__WEBPACK_IMPORTED_MODULE_0__.TgdFilter {
    constructor() {
        super({
            fragmentShaderCode: [
                "vec2 uv = varUV;",
                "vec4 color = texture(uniTexture, uv);",
                "FragColor = color;",
            ],
            uniforms: {
                uniZoom: "float",
                uniTranslation: "vec2",
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyYmF0aW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsdGVyL3ZlcmJhdGltLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFcEM7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsU0FBUztJQUM1QztRQUNJLEtBQUssQ0FBQztZQUNGLGtCQUFrQixFQUFFO2dCQUNoQixrQkFBa0I7Z0JBQ2xCLHVDQUF1QztnQkFDdkMsb0JBQW9CO2FBQ3ZCO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixjQUFjLEVBQUUsTUFBTTthQUN6QjtTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 1602:
/*!**************************!*\
  !*** ./src/help/help.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Help: () => (/* binding */ Help)
/* harmony export */ });
/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! marked */ 23);
/* harmony import */ var _tolokoban_tgd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tolokoban/tgd */ 953);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class Help {
    constructor() {
        this.currentPage = "";
        const div = document.getElementById("HELP");
        if (!div)
            throw new Error("There is no element with id #HELP!");
        this.element = div;
        marked__WEBPACK_IMPORTED_MODULE_0__.marked.use({
            renderer: {
                link: (token) => {
                    console.log("🚀 [help] token =", token);
                    return `<a href="#" data-href=${JSON.stringify(token.href)}>${token.text}</a>`;
                },
            },
        });
    }
    load(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield (0,_tolokoban_tgd__WEBPACK_IMPORTED_MODULE_1__.tgdLoadText)(`assets/help/${id}.md`);
            if (!content) {
                console.error("Found no page with this id:", id);
                return;
            }
            this.currentPage = id;
            const html = yield marked__WEBPACK_IMPORTED_MODULE_0__.marked.parse(content, {
                async: true,
                gfm: true,
            });
            this.element.innerHTML = html;
            this.element.scrollTop = 0;
            const links = this.element.querySelectorAll("a[data-href]");
            for (const link of links) {
                const href = link.getAttribute("data-href");
                if (!href)
                    continue;
                const id = this.makeId(href);
                link.addEventListener("click", (evt) => {
                    evt.preventDefault();
                    evt.stopPropagation();
                    this.load(id);
                });
            }
        });
    }
    makeId(id) {
        const parts = this.currentPage.split("/");
        parts.pop();
        parts.push(id);
        return parts.join("/");
    }
}


/***/ }),

/***/ 1623:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/texture/texture2d.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTexture2D: () => (/* binding */ TgdTexture2D)
/* harmony export */ });
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../event/index.js */ 5018);
/* harmony import */ var _loader_image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../loader/image.js */ 3352);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../types/index.js */ 5327);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/index.js */ 3291);
/* harmony import */ var _webgl_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../webgl/index.js */ 3651);





class TgdTexture2D {
    constructor(context, storage) {
        this.context = context;
        this.eventChange = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this._texture = null;
        this._width = -1;
        this._height = -1;
        this.params = {
            magFilter: "LINEAR",
            minFilter: "LINEAR",
            wrapS: "REPEAT",
            wrapT: "REPEAT",
            wrapR: "REPEAT",
        };
        const { gl } = context;
        this.gl = gl;
        this.name = `Texture2D/${TgdTexture2D.counter++}`;
        this.storage = Object.assign({ width: 0, height: 0, internalFormat: "RGBA8", levels: 1, flipY: false, premultipliedAlpha: false }, storage);
        const width = storage === null || storage === void 0 ? void 0 : storage.width;
        const height = storage === null || storage === void 0 ? void 0 : storage.height;
        if (typeof width == "number" && typeof height === "number") {
            this.resize(width, height);
        }
        else {
            this.createTexture();
        }
    }
    delete() {
        if (this._texture)
            this.gl.deleteTexture(this._texture);
        this._texture = null;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    createTexture() {
        this.delete();
        const texture = this.gl.createTexture();
        if (!texture)
            throw new Error("Unable to create a WebGLTexture!");
        const { gl } = this;
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.storage.flipY);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.storage.premultipliedAlpha);
        this._texture = texture;
        this.setParams(this.params);
    }
    resize(width, height) {
        if (width === this.width && height === this.height)
            return;
        const { gl, storage } = this;
        this.createTexture();
        this._width = width;
        this._height = height;
        storage.width = width;
        storage.height = height;
        this.bind();
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, this.storage.flipY);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.storage.premultipliedAlpha);
        const { internalFormat, levels } = this.storage;
        if (internalFormat.startsWith("COMPRESSED_")) {
            // We need to load an extension for that.
            const extension = gl.getExtension("WEBGL_compressed_texture_etc");
            if (!extension)
                throw new Error('Your browser does not support extension "WEBGL_compressed_texture_etc" on this device!');
        }
        gl.texStorage2D(gl.TEXTURE_2D, levels, gl[internalFormat], width, height);
        this.checkError();
    }
    checkError() {
        const { gl } = this;
        const error = gl.getError();
        if (error !== gl.NO_ERROR) {
            console.error(`[TgdTexture2D::${this.name}] Error:`, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.webglLookup)(error));
        }
    }
    get glTexture() {
        if (this._texture)
            return this._texture;
        throw new Error(`Texture "${this.name}" has been deleted!`);
    }
    bind() {
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);
    }
    loadBitmap(bmp, options = {}) {
        var _a, _b, _c;
        if (!bmp)
            return this;
        if (typeof bmp === "string") {
            return this.loadBitmap((0,_loader_image_js__WEBPACK_IMPORTED_MODULE_1__.tgdLoadImage)(bmp), options);
        }
        if (!(0,_types_index_js__WEBPACK_IMPORTED_MODULE_2__.isWebglImage)(bmp)) {
            bmp.then(data => this.loadBitmap(data)).catch(error => console.error("Unable to load texture BMP:", error));
            return this;
        }
        const { storage, gl } = this;
        const { level = 0 } = options;
        this._width = bmp.width;
        this._height = bmp.height;
        this.bind();
        gl.texImage2D(gl.TEXTURE_2D, level, gl[storage.internalFormat], gl[figureOutCompatibleFormat(storage.internalFormat)], gl.UNSIGNED_BYTE, bmp);
        this.checkError();
        if (options.generateMipmap) {
            this.generateMipmap();
            this.checkError();
        }
        (_b = (_a = this.context).paint) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_c = options.onLoad) === null || _c === void 0 ? void 0 : _c.call(options);
        this.eventChange.dispatch(this);
        return this;
    }
    loadData(data, options) {
        const { level = 0, width, height, internalFormat = "RGB", format = "RGB",
        // offset = 0,
         } = options;
        const { gl } = this;
        this.bind();
        gl.texImage2D(gl.TEXTURE_2D, level, gl[internalFormat], width, height, 0, gl[format], gl.UNSIGNED_BYTE, data
        // offset
        );
        this.checkError();
        this.eventChange.dispatch(this);
        return this;
    }
    /**
     *
     * @param unit Unit to link the texture to
     * @param program The program that owns the uniform to update
     * @param uniformName The uniform that hold the texture
     */
    activate(unit, program, uniformName) {
        const { gl } = this;
        gl.activeTexture(gl.TEXTURE0 + unit);
        this.bind();
        if (program && uniformName) {
            program.uniform1i(uniformName, unit);
        }
        return this;
    }
    generateMipmap() {
        const { gl } = this;
        this.bind();
        gl.generateMipmap(gl.TEXTURE_2D);
        return this;
    }
    setParams(parameters) {
        this.bind();
        (0,_webgl_index_js__WEBPACK_IMPORTED_MODULE_4__.webglTextureParametersSet)(this.gl, parameters);
        this.params = Object.assign(Object.assign({}, this.params), parameters);
        return this;
    }
    set textureBaseLevel(value) {
        const { gl } = this;
        this.bind();
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, value);
    }
    get textureBaseLevel() {
        const { gl } = this;
        this.bind();
        return gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL);
    }
    set textureMaxLevel(value) {
        const { gl } = this;
        this.bind();
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, value);
    }
    get textureMaxLevel() {
        const { gl } = this;
        this.bind();
        return gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL);
    }
    getParameter(parameter) {
        const { gl, glTexture } = this;
        gl.bindTexture(gl.TEXTURE_2D, glTexture);
        const value = gl.getTexParameter(gl.TEXTURE_2D, gl[parameter]);
        return value;
    }
    debug(title) {
        var _a;
        console.log((_a = title !== null && title !== void 0 ? title : this.name) !== null && _a !== void 0 ? _a : "TgdTexture2D", "  ", this.width, "×", this.height);
        const parameters = [
            "TEXTURE_MAG_FILTER",
            "TEXTURE_MIN_FILTER",
            "TEXTURE_WRAP_R",
            "TEXTURE_WRAP_S",
            "TEXTURE_WRAP_T",
            "TEXTURE_MAX_LEVEL",
            "TEXTURE_MAX_LOD",
            "TEXTURE_MIN_LOD",
            "TEXTURE_BASE_LEVEL",
            "TEXTURE_COMPARE_FUNC",
            "TEXTURE_COMPARE_MODE",
            "TEXTURE_IMMUTABLE_FORMAT",
            "TEXTURE_IMMUTABLE_LEVELS",
        ];
        for (const name of parameters) {
            const value = this.getParameter(name);
            console.log(">", name, "=", value, typeof value === "number" ? `(${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.webglLookup)(value)})` : " ");
        }
    }
}
TgdTexture2D.counter = 0;
const COMPATIBLE_FORMATS = [
    [
        "RGB",
        new Set([
            "RGB",
            "RGB8",
            "RGB565",
            "SRGB8",
            "RGB8_SNORM",
            "RGB565",
            "R11F_G11F_B10F",
            "RGB9_E5",
            "RGB16F",
            "R11F_G11F_B10F",
            "RGB9_E5",
            "RGB32F",
            "RGB16F",
            "R11F_G11F_B10F",
            "RGB9_E5",
        ]),
    ],
    [
        "RGBA",
        new Set([
            "RGBA",
            "RGBA8",
            "RGB5_A1",
            "RGBA4",
            "SRGB8_ALPHA8",
            "RGBA8_SNORM",
            "RGBA4",
            "RGB5_A1",
            "RGB10_A2",
            "RGB5_A1",
            "RGBA16F",
            "RGBA32F",
            "RGBA16F",
        ]),
    ],
    ["RG", new Set(["RG8"])],
    ["RED", new Set(["R8"])],
];
function figureOutCompatibleFormat(internalFormat) {
    for (const [format, internalFormats] of COMPATIBLE_FORMATS) {
        if (internalFormats.has(internalFormat))
            return format;
    }
    throw new Error(`There is no compatible format for internalFormat "${internalFormat}" and type "UNSIGNED_BYTE"!`);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 1701:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/types/animation.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL2FuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=

/***/ }),

/***/ 1747:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/parser/gltf/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdDataGlb: () => (/* reexport safe */ _gltf_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataGlb)
/* harmony export */ });
/* harmony import */ var _gltf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gltf.js */ 2474);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFyc2VyL2dsdGYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxRQUFRLENBQUEifQ==

/***/ }),

/***/ 1793:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/utils/math.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCalcClamp: () => (/* binding */ tgdCalcClamp),
/* harmony export */   tgdCalcDegToRad: () => (/* binding */ tgdCalcDegToRad),
/* harmony export */   tgdCalcMix: () => (/* binding */ tgdCalcMix),
/* harmony export */   tgdCalcModulo: () => (/* binding */ tgdCalcModulo),
/* harmony export */   tgdCalcRadToDeg: () => (/* binding */ tgdCalcRadToDeg),
/* harmony export */   tgdCalcRandom: () => (/* binding */ tgdCalcRandom),
/* harmony export */   tgdCalcSmoothStep: () => (/* binding */ tgdCalcSmoothStep)
/* harmony export */ });
function tgdCalcClamp(value, min, max) {
    if (value < min)
        return min;
    if (value > max)
        return max;
    return value;
}
function tgdCalcMix(valueAtT0, valueAtT1, t) {
    return (1 - t) * valueAtT0 + t * valueAtT1;
}
const DEG_PER_RAD = 180 / Math.PI;
const RAD_PER_DEG = Math.PI / 180;
function tgdCalcDegToRad(deg) {
    return deg * RAD_PER_DEG;
}
function tgdCalcRadToDeg(rad) {
    return rad * DEG_PER_RAD;
}
function tgdCalcSmoothStep(boundFor0, boundFor1, value) {
    const t = tgdCalcClamp((value - boundFor0) / (boundFor1 - boundFor0), 0, 1);
    return t * t * (3 - 2 * t);
}
function tgdCalcRandom(min = 1, max) {
    if (typeof max !== "number")
        return Math.random() * min;
    return min + (max - min) * Math.random();
}
/**
 * Force `value` to be between `min` and `max` by shifting it
 * by `max - min` as many times as needed.
 * @example
 * ```ts
 * tgdCalcModulo(3, 10, 20) === 13
 * tgdCalcModulo(13, 10, 20) === 13
 * tgdCalcModulo(23, 10, 20) === 13
 * ```
 */
function tgdCalcModulo(value, min, max) {
    const range = max - min;
    if (range === 0)
        return min;
    if (value < min) {
        const n = Math.ceil((min - value) / range);
        return value + n * range;
    }
    if (value > max) {
        const n = Math.ceil((value - max) / range);
        return value - n * range;
    }
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9tYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBYSxFQUFFLEdBQVcsRUFBRSxHQUFXO0lBQ2hFLElBQUksS0FBSyxHQUFHLEdBQUc7UUFBRSxPQUFPLEdBQUcsQ0FBQTtJQUMzQixJQUFJLEtBQUssR0FBRyxHQUFHO1FBQUUsT0FBTyxHQUFHLENBQUE7SUFDM0IsT0FBTyxLQUFLLENBQUE7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQ3RCLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLENBQVM7SUFFVCxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFBO0FBQzlDLENBQUM7QUFFRCxNQUFNLFdBQVcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtBQUNqQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUVqQyxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDdkMsT0FBTyxHQUFHLEdBQUcsV0FBVyxDQUFBO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDdkMsT0FBTyxHQUFHLEdBQUcsV0FBVyxDQUFBO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQzdCLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLEtBQWE7SUFFYixNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFZO0lBQy9DLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQTtJQUN2RCxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7QUFDNUMsQ0FBQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBYSxFQUFFLEdBQVcsRUFBRSxHQUFXO0lBQ2pFLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7SUFDdkIsSUFBSSxLQUFLLEtBQUssQ0FBQztRQUFFLE9BQU8sR0FBRyxDQUFBO0lBRTNCLElBQUksS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtRQUMxQyxPQUFPLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBQzVCLENBQUM7SUFFRCxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7UUFDMUMsT0FBTyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUM1QixDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDaEIsQ0FBQyJ9

/***/ }),

/***/ 1808:
/*!*****************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/landscape/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCanvasLandscape: () => (/* reexport safe */ _landscape_js__WEBPACK_IMPORTED_MODULE_0__.TgdCanvasLandscape)
/* harmony export */ });
/* harmony import */ var _landscape_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./landscape.js */ 797);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2FudmFzL2xhbmRzY2FwZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGFBQWEsQ0FBQSJ9

/***/ }),

/***/ 1887:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/shader/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdShaderFragment: () => (/* reexport safe */ _fragment_js__WEBPACK_IMPORTED_MODULE_1__.TgdShaderFragment),
/* harmony export */   TgdShaderVertex: () => (/* reexport safe */ _vertex_js__WEBPACK_IMPORTED_MODULE_2__.TgdShaderVertex),
/* harmony export */   expandFunctions: () => (/* reexport safe */ _code_js__WEBPACK_IMPORTED_MODULE_0__.expandFunctions),
/* harmony export */   expandVariables: () => (/* reexport safe */ _code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables),
/* harmony export */   isCodeBloc: () => (/* reexport safe */ _code_js__WEBPACK_IMPORTED_MODULE_0__.isCodeBloc),
/* harmony export */   tgdCodeStringify: () => (/* reexport safe */ _code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)
/* harmony export */ });
/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code.js */ 3298);
/* harmony import */ var _fragment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fragment.js */ 3627);
/* harmony import */ var _vertex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vertex.js */ 8725);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhZGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsWUFBWSxDQUFBO0FBQzFCLGNBQWMsVUFBVSxDQUFBIn0=

/***/ }),

/***/ 1930:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/program/program.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdProgram: () => (/* binding */ TgdProgram)
/* harmony export */ });
/* harmony import */ var _shader_code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../shader/code.js */ 3298);

/**
 * This class helps to manage a WebGLProgram.
 * It will report meaninfull errors and help you with
 * the uniforms.
 */
class TgdProgram {
    constructor(gl, options) {
        var _a;
        this.gl = gl;
        this.options = options;
        const prg = gl.createProgram();
        if (!prg)
            throw new Error("Unable to create WebGLProgram!");
        const vert = (0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(options.vert);
        const vertShader = this.createShader("VERTEX_SHADER", vert);
        gl.attachShader(prg, vertShader);
        const frag = (0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(options.frag);
        const fragShader = this.createShader("FRAGMENT_SHADER", frag);
        gl.attachShader(prg, fragShader);
        const { transformFeedback } = options;
        if (transformFeedback) {
            const bufferMode = Array.isArray(transformFeedback)
                ? gl.INTERLEAVED_ATTRIBS
                : gl[transformFeedback.bufferMode];
            const varyings = Array.isArray(transformFeedback)
                ? transformFeedback
                : transformFeedback.varyings;
            gl.transformFeedbackVaryings(prg, varyings, bufferMode);
        }
        gl.linkProgram(prg);
        if (!gl.getProgramParameter(prg, gl.LINK_STATUS)) {
            const info = (_a = gl.getProgramInfoLog(prg)) !== null && _a !== void 0 ? _a : "";
            console.warn(info);
            const errorLines = getErrorLines(info);
            const cause = [
                logCode("Vertex Shader", vert, errorLines),
                logCode("Fragment Shader", frag, errorLines),
            ].join("\n");
            throw new Error(cause);
        }
        this.program = prg;
        this.shaders = [vertShader, fragShader];
        this.uniformsLocations = this.getUniformsLocations();
        gl.detachShader(prg, vertShader);
        gl.deleteShader(vertShader);
        gl.detachShader(prg, fragShader);
        gl.deleteShader(fragShader);
    }
    toCode({ indent = "" } = {}) {
        const lines = [
            `function createProgram(gl: WebGL2RenderingContext) {`,
            `  const prg = gl.createProgram()`,
            `  const vertexShader = gl.createShader(gl.VERTEX_SHADER)`,
            `  gl.shaderSource(vertexShader, \`${(0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(this.options.vert)}\`)`,
            `  gl.compileShader(vertexShader)`,
            `  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)`,
            `  gl.shaderSource(fragmentShader, \`${(0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(this.options.frag)}\`)`,
            `  gl.compileShader(fragmentShader)`,
            `  gl.attachShader(prg, vertexShader)`,
            `  gl.attachShader(prg, fragmentShader)`,
            `  gl.linkProgram(prg)`,
            `  return prg`,
            `}`,
        ];
        return lines.map(line => `${indent}${line}`).join("\n");
    }
    hasAttribute(name) {
        const { gl, program } = this;
        const loc = gl.getAttribLocation(program, name);
        return loc >= 0;
    }
    getAttribLocation(name) {
        const { gl, program } = this;
        const loc = gl.getAttribLocation(program, name);
        if (loc < 0) {
            throw new Error(`Attribute "${name}" not found!`);
        }
        return loc;
    }
    getUniformLocation(name) {
        const { uniformsLocations } = this;
        const names = Object.keys(uniformsLocations);
        if (name.length === 0) {
            console.warn(`Uniform "${name}" has not been found: there is no active uniform in this program!`);
            return 0;
        }
        const location = uniformsLocations[name];
        if (!location) {
            console.warn(`No active uniform found with name "${name}"!\nAvailable names are: ${names.join(", ")}.`);
        }
        return location;
    }
    uniform1f(name, value) {
        const { gl } = this;
        gl.uniform1f(this.getUniformLocation(name), value);
    }
    uniform2f(name, x, y) {
        const { gl } = this;
        gl.uniform2f(this.getUniformLocation(name), x, y);
    }
    uniform3f(name, x, y, z) {
        const { gl } = this;
        gl.uniform3f(this.getUniformLocation(name), x, y, z);
    }
    uniform3fv(name, vec3) {
        const { gl } = this;
        gl.uniform3fv(this.getUniformLocation(name), vec3);
    }
    uniform4f(name, x, y, z, w) {
        const { gl } = this;
        gl.uniform4f(this.getUniformLocation(name), x, y, z, w);
    }
    uniform4fv(name, vec4) {
        const { gl } = this;
        gl.uniform4fv(this.getUniformLocation(name), vec4);
    }
    uniform1i(name, value) {
        const { gl } = this;
        gl.uniform1i(this.getUniformLocation(name), value);
    }
    uniform2i(name, x, y) {
        const { gl } = this;
        gl.uniform2i(this.getUniformLocation(name), x, y);
    }
    uniform3i(name, x, y, z) {
        const { gl } = this;
        gl.uniform3i(this.getUniformLocation(name), x, y, z);
    }
    uniform4i(name, x, y, z, w) {
        const { gl } = this;
        gl.uniform4i(this.getUniformLocation(name), x, y, z, w);
    }
    uniform1ui(name, value) {
        const { gl } = this;
        gl.uniform1ui(this.getUniformLocation(name), value);
    }
    uniform2ui(name, x, y) {
        const { gl } = this;
        gl.uniform2ui(this.getUniformLocation(name), x, y);
    }
    uniform3ui(name, x, y, z) {
        const { gl } = this;
        gl.uniform3ui(this.getUniformLocation(name), x, y, z);
    }
    uniform4ui(name, x, y, z, w) {
        const { gl } = this;
        gl.uniform4ui(this.getUniformLocation(name), x, y, z, w);
    }
    uniformMatrix3fv(name, mat3) {
        const { gl } = this;
        gl.uniformMatrix3fv(this.getUniformLocation(name), false, mat3);
    }
    uniformMatrix4fv(name, mat4) {
        const { gl } = this;
        gl.uniformMatrix4fv(this.getUniformLocation(name), false, mat4);
    }
    /**
     * Use the current program.
     * This is equivalent to `gl.useProgram(program)`.
     */
    use() {
        const { gl, program } = this;
        gl.useProgram(program);
    }
    delete() {
        const { gl } = this;
        for (const shader of this.shaders)
            gl.deleteShader(shader);
        gl.deleteProgram(this.program);
    }
    debug(caption = "TgdProgram") {
        console.log(caption);
        const { options: code } = this;
        logCode("Vertex Shader", (0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(code.vert));
        logCode("Fragment Shader", (0,_shader_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)(code.frag));
    }
    createShader(type, code) {
        const { gl } = this;
        const shader = gl.createShader(gl[type]);
        if (!shader)
            throw new Error(`Unable to create a WebGLShader of type "${type}"!`);
        gl.shaderSource(shader, code);
        gl.compileShader(shader);
        const info = gl.getShaderInfoLog(shader);
        if (info) {
            console.error(`Error in ${type} code:`, info);
            const errorLines = getErrorLines(info);
            throw new Error(logCode(type, code, errorLines));
        }
        return shader;
    }
    getUniformsLocations() {
        const { gl, program } = this;
        const count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        if (typeof count !== "number")
            throw new Error("Unable to get the number of uniforms in a WebGLProgram!");
        const uniforms = {};
        for (let index = 0; index < count; index++) {
            const uniform = gl.getActiveUniform(program, index);
            if (!uniform)
                continue;
            const location = gl.getUniformLocation(program, uniform.name);
            if (location === null)
                throw new Error(`Unable to get location for uniform "${uniform.name}"!`);
            uniforms[uniform.name] = location;
        }
        return uniforms;
    }
}
const RX_ERROR_LINE = /^ERROR:[ \t]+([0-9]+):([0-9]+):/g;
function getErrorLines(message) {
    const lines = [];
    const messages = [];
    for (const line of message.split("\n")) {
        RX_ERROR_LINE.lastIndex = -1;
        const match = RX_ERROR_LINE.exec(line);
        if (match) {
            lines.push(Number.parseInt(match[2], 10));
            messages.push(line.slice(match[0].length).trim());
        }
    }
    return { lines, messages };
}
function style(background, bold = false) {
    return `color:#fff;background:${background};font-family:monospace;font-size:80%;font-weight:${bold ? "bolder" : "100"};margin:0;color:${bold ? "#777" : "#fff"}`;
}
function logCode(title, code, options) {
    const { lines = [], messages = [] } = options !== null && options !== void 0 ? options : {};
    const output = [title];
    const codeLines = [`%c${title}`];
    const styles = ["font-weight:bolder;font-size:120%"];
    let hasError = false;
    for (const [index, line] of code.split("\n").entries()) {
        const lineNumber = index + 1;
        const prefix = `${lineNumber}`.padStart(5, " ");
        const background = lines.includes(lineNumber) ? "#f00" : "#000";
        codeLines.push(`%c${prefix}  %c${line}`);
        output.push(`${prefix}  ${line}`);
        styles.push(style(background, true), style(background, false));
        if (lines.includes(lineNumber)) {
            hasError = true;
            codeLines.push(`%c${messages[lines.indexOf(lineNumber)]}`);
            output.push(`##### ${messages[lines.indexOf(lineNumber)]}`);
            styles.push("color:#f33;background:#333;font-weight:bold");
            console.error();
        }
    }
    console.log(codeLines.join("\n"), ...styles);
    return hasError ? output.join("\n") : "";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3JhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9ncmFtL3Byb2dyYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHbkQ7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxVQUFVO0lBT25CLFlBQ29CLEVBQTBCLEVBQ3pCLE9BQTBCOztRQUQzQixPQUFFLEdBQUYsRUFBRSxDQUF3QjtRQUN6QixZQUFPLEdBQVAsT0FBTyxDQUFtQjtRQUUzQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDOUIsSUFBSSxDQUFDLEdBQUc7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7UUFFM0QsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzNELEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzdELEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ2hDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLE9BQU8sQ0FBQTtRQUNyQyxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDcEIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztnQkFDL0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUI7Z0JB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

/***/ }),

/***/ 1940:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/painter/filter/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterFilter: () => (/* reexport safe */ _filter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterFilter)
/* harmony export */ });
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter.js */ 5512);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9maWx0ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxVQUFVLENBQUEifQ==

/***/ }),

/***/ 1986:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/input/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdInputKeyboardImpl: () => (/* reexport safe */ _keyboard_js__WEBPACK_IMPORTED_MODULE_1__.TgdInputKeyboardImpl),
/* harmony export */   TgdInputPointerImpl: () => (/* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_2__.TgdInputPointerImpl),
/* harmony export */   TgdInputs: () => (/* reexport safe */ _inputs_js__WEBPACK_IMPORTED_MODULE_0__.TgdInputs)
/* harmony export */ });
/* harmony import */ var _inputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inputs.js */ 5961);
/* harmony import */ var _keyboard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard.js */ 4117);
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pointer.js */ 4143);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5wdXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxXQUFXLENBQUEifQ==

/***/ }),

/***/ 2067:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/state/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterState: () => (/* reexport safe */ _state_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterState)
/* harmony export */ });
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ 8918);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9zdGF0ZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFNBQVMsQ0FBQSJ9

/***/ }),

/***/ 2083:
/*!***********************!*\
  !*** ./src/index.css ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ 5072);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ 7825);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ 7659);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ 5056);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ 540);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ 1113);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./index.css */ 9165);

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);


if (true) {
  if (!_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }
  var p;
  for (p in a) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }
    if (a[p] !== b[p]) {
      return false;
    }
  }
  for (p in b) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }
    if (!a[p]) {
      return false;
    }
  }
  return true;
};
    var isNamedExport = !_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;
    var oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

    module.hot.accept(
      /*! !!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./index.css */ 9165,
      __WEBPACK_OUTDATED_DEPENDENCIES__ => { /* harmony import */ _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./index.css */ 9165);
(function () {
        if (!isEqualLocals(oldLocals, isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals, isNamedExport)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

              update(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"]);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}



       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_index_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ 2188:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/utils/state/depth.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglDebugDepth: () => (/* binding */ webglDebugDepth),
/* harmony export */   webglDepthExec: () => (/* binding */ webglDepthExec),
/* harmony export */   webglDepthGet: () => (/* binding */ webglDepthGet),
/* harmony export */   webglDepthSet: () => (/* binding */ webglDepthSet),
/* harmony export */   webglPresetDepth: () => (/* binding */ webglPresetDepth)
/* harmony export */ });
/* harmony import */ var _debug_debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../debug/debug.js */ 3722);
/* harmony import */ var _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../types/webgl.js */ 4010);


const webglPresetDepth = {
    off: {
        enabled: false,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.ALWAYS,
        mask: false,
        rangeMin: 0,
        rangeMax: 1,
    },
    writeOnly: {
        enabled: false,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.ALWAYS,
        mask: true,
        rangeMin: 0,
        rangeMax: 1,
    },
    less: {
        enabled: true,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.LESS,
        mask: true,
        rangeMin: 0,
        rangeMax: 1,
    },
    lessOrEqual: {
        enabled: true,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.LEQUAL,
        mask: true,
        rangeMin: 0,
        rangeMax: 1,
    },
    lessReadOnly: {
        enabled: true,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.LESS,
        mask: false,
        rangeMin: 0,
        rangeMax: 1,
    },
    lessOrEqualReadOnly: {
        enabled: true,
        func: _types_webgl_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumDepthFunction.LEQUAL,
        mask: false,
        rangeMin: 0,
        rangeMax: 1,
    },
};
function webglDepthSet(gl, depth) {
    if (depth.enabled)
        gl.enable(gl.DEPTH_TEST);
    else
        gl.disable(gl.DEPTH_TEST);
    gl.depthFunc(depth.func);
    gl.depthMask(depth.mask);
    gl.depthRange(depth.rangeMin, depth.rangeMax);
}
function webglDepthGet(gl) {
    const [rangeMin, rangeMax] = gl.getParameter(gl.DEPTH_RANGE);
    return {
        enabled: Boolean(gl.getParameter(gl.DEPTH_TEST)),
        func: Number(gl.getParameter(gl.DEPTH_FUNC)),
        mask: Boolean(gl.getParameter(gl.DEPTH_WRITEMASK)),
        rangeMin,
        rangeMax,
    };
}
function webglDepthExec(gl, depth, action) {
    const currentState = webglDepthGet(gl);
    webglDepthSet(gl, depth);
    try {
        action();
    }
    finally {
        webglDepthSet(gl, currentState);
    }
}
function webglDebugDepth(gl, caption = "Depth enabled:") {
    console.log(caption);
    const depth = webglDepthGet(gl);
    (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.debug)([
        [caption, depth.enabled, "\n"],
        [
            { cls: "code" },
            [
                "gl.",
                depth.enabled ? "enable" : "disable",
                "(",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("DEPTH_FUNC"),
                ")\n",
            ],
            [
                "gl.depthFunc(",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(depth.func),
                ")\n",
                "gl.depthMask(",
                depth.mask,
                ")\n",
                `gl.depthRange(${depth.rangeMin}, ${depth.rangeMax})\n`,
            ],
        ],
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RhdGUvZGVwdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQVV6RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FVekI7SUFDQSxHQUFHLEVBQUU7UUFDRCxPQUFPLEVBQUUsS0FBSztRQUNkLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxNQUFNO1FBQ25DLElBQUksRUFBRSxLQUFLO1FBQ1gsUUFBUSxFQUFFLENBQUM7UUFDWCxRQUFRLEVBQUUsQ0FBQztLQUNkO0lBQ0QsU0FBUyxFQUFFO1FBQ1AsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsc0JBQXNCLENBQUMsTUFBTTtRQUNuQyxJQUFJLEVBQUUsSUFBSTtRQUNWLFFBQVEsRUFBRSxDQUFDO1FBQ1gsUUFBUSxFQUFFLENBQUM7S0FDZDtJQUNELElBQUksRUFBRTtRQUNGLE9BQU8sRUFBRSxJQUFJO1FBQ2IsSUFBSSxFQUFFLHNCQUFzQixDQUFDLElBQUk7UUFDakMsSUFBSSxFQUFFLElBQUk7UUFDVixRQUFRLEVBQUUsQ0FBQztRQUNYLFFBQVEsRUFBRSxDQUFDO0tBQ2Q7SUFDRCxXQUFXLEVBQUU7UUFDVCxPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxNQUFNO1FBQ25DLElBQUksRUFBRSxJQUFJO1FBQ1YsUUFBUSxFQUFFLENBQUM7UUFDWCxRQUFRLEVBQUUsQ0FBQztLQUNkO0lBQ0QsWUFBWSxFQUFFO1FBQ1YsT0FBTyxFQUFFLElBQUk7UUFDYixJQUFJLEVBQUUsc0JBQXNCLENBQUMsSUFBSTtRQUNqQyxJQUFJLEVBQUUsS0FBSztRQUNYLFFBQVEsRUFBRSxDQUFDO1FBQ1gsUUFBUSxF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

/***/ }),

/***/ 2362:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/painter/painter.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainter: () => (/* binding */ TgdPainter)
/* harmony export */ });
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../log.js */ 303);

class TgdPainter {
    constructor() {
        /**
         * This attribute has no other purpose than debugging.
         * Its value is not used by Tgd.
         */
        this.name = `Painter/${TgdPainter.counter++}`;
        this.active = true;
    }
    debugHierarchy() {
        return {
            [this.active ? this.name : `${this.name} (Inactive)`]: null,
        };
    }
}
TgdPainter.log = new _log_js__WEBPACK_IMPORTED_MODULE_0__.TgdLogger();
TgdPainter.counter = 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWludGVyL3BhaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQU9wQyxNQUFNLE9BQWdCLFVBQVU7SUFBaEM7UUFLSTs7O1dBR0c7UUFDSSxTQUFJLEdBQVcsV0FBVyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQTtRQUVoRCxXQUFNLEdBQVksSUFBSSxDQUFBO0lBV2pDLENBQUM7SUFMRyxjQUFjO1FBQ1YsT0FBTztZQUNILENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsRUFBRSxJQUFJO1NBQzlELENBQUE7SUFDTCxDQUFDOztBQXBCZSxjQUFHLEdBQUcsSUFBSSxTQUFTLEVBQUUsQUFBbEIsQ0FBa0I7QUFFdEIsa0JBQU8sR0FBRyxDQUFDLEFBQUosQ0FBSSJ9

/***/ }),

/***/ 2426:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/painter/axes/axes.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterAxes: () => (/* binding */ TgdPainterAxes)
/* harmony export */ });
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../program/index.js */ 9974);
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../painter.js */ 2362);
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../dataset/index.js */ 5710);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _axes_vert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axes.vert */ 336);
/* harmony import */ var _axes_frag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./axes.frag */ 7117);







class TgdPainterAxes extends _painter_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainter {
    constructor(context, { x = 0, y = 0, z = 0, scale = 1 } = {}) {
        super();
        this.context = context;
        const prg = new _program_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdProgram(context.gl, {
            vert: _axes_vert__WEBPACK_IMPORTED_MODULE_5__,
            frag: _axes_frag__WEBPACK_IMPORTED_MODULE_6__,
        });
        this.prg = prg;
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdDataset({
            attPos: "vec3",
            attColor: "vec4",
        });
        // prettier-ignore
        dataset.set("attPos", new Float32Array([
            0, 0, 0, +1, +0, +0,
            0, 0, 0, +0, +1, +0,
            0, 0, 0, +0, +0, +1,
            0, 0, 0, -1, -0, -0,
            0, 0, 0, -0, -1, -0,
            0, 0, 0, -0, -0, -1,
        ]));
        const a = 1;
        const b = 0.25;
        // prettier-ignore
        dataset.set("attColor", new Float32Array([
            a, 0, 0, 1, a, 0, 0, 1,
            0, a, 0, 1, 0, a, 0, 1,
            0, 0, a, 1, 0, 0, a, 1,
            b, 0, 0, 1, b, 0, 0, 1,
            0, b, 0, 1, 0, b, 0, 1,
            0, 0, b, 1, 0, 0, b, 1,
        ]));
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdVertexArray(context.gl, prg, [dataset]);
        this.translateAndScale = new _math_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec4(x, y, z, scale);
    }
    get x() {
        return this.translateAndScale.x;
    }
    set x(v) {
        this.translateAndScale.x = v;
    }
    get y() {
        return this.translateAndScale.y;
    }
    set y(v) {
        this.translateAndScale.y = v;
    }
    get z() {
        return this.translateAndScale.z;
    }
    set z(v) {
        this.translateAndScale.z = v;
    }
    get scale() {
        return this.translateAndScale.w;
    }
    set scale(v) {
        this.translateAndScale.w = v;
    }
    delete() {
        this.vao.delete();
    }
    paint() {
        const { context, prg, vao, translateAndScale } = this;
        const { gl, camera } = context;
        prg.use();
        prg.uniform4fv("uniTS", translateAndScale);
        prg.uniformMatrix4fv("uniModelViewMatrix", camera.matrixModelView);
        prg.uniformMatrix4fv("uniProjectionMatrix", camera.matrixProjection);
        vao.bind();
        gl.drawArrays(gl.LINES, 0, 12);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWludGVyL2F4ZXMvYXhlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVuQyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUE7QUFDOUIsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFBO0FBUzlCLE1BQU0sT0FBTyxjQUFlLFNBQVEsVUFBVTtJQUsxQyxZQUNvQixPQUFtQixFQUNuQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEtBQXFDLEVBQUU7UUFFdkUsS0FBSyxFQUFFLENBQUE7UUFIUyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBSW5DLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2QsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDM0IsTUFBTSxFQUFFLE1BQU07WUFDZCxRQUFRLEVBQUUsTUFBTTtTQUNuQixDQUFDLENBQUE7UUFDRixrQkFBa0I7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxZQUFZLENBQUM7WUFDbkMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25CLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNuQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25CLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNuQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEIsQ0FBQyxDQUFDLENBQUE7UUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDWCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDZCxrQkFBa0I7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxZQUFZLENBQUM7WUFDckMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENB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

/***/ }),

/***/ 2474:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/parser/gltf/gltf.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdDataGlb: () => (/* binding */ TgdDataGlb)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 5664);
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../dataset/index.js */ 5710);
/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser.js */ 7548);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../types/index.js */ 5327);
/* harmony import */ var _geometry_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../geometry/index.js */ 7250);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../texture/index.js */ 4765);
/* harmony import */ var _camera_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../camera/index.js */ 7601);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../math/index.js */ 6088);

/**
 * GLTF specs can be found here:
 * https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html
 */







class TgdDataGlb {
    /**
     * @param content The binary content of a GLB file.
     */
    constructor(content) {
        this.chunkDetails = [];
        this.cacheImages = new Map();
        this.cacheImageURLs = new Map();
        this.cacheBufferViewDatas = new Map();
        try {
            const data = (0,_parser_js__WEBPACK_IMPORTED_MODULE_1__.parseGLB)(content);
            this.gltf = data.gltf;
            this.chunks = data.chunks;
            this.chunkDetails = data.chunkTypes;
        }
        catch (error) {
            const message = error instanceof Error ? error.message : JSON.stringify(error);
            throw new Error(`[TgdParserGLTransfertFormatBinary] ${message}`);
        }
    }
    createTransfoFromNode(node) {
        const transfo = {};
        if (node.rotation) {
            console.log("🚀 [gltf] node.rotation =", node.rotation); // @FIXME: Remove this line written on 2025-04-17 at 21:07
            transfo.orientation = new _math_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdQuat(node.rotation);
        }
        if (node.translation)
            transfo.position = new _math_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdVec3(node.translation);
        if (node.scale)
            transfo.scale = new _math_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdVec3(node.scale);
        return new _math_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdTransfo(transfo);
    }
    createCameraByName(name) {
        const node = this.getNodeByNameOrThrow(name);
        if (typeof node.camera === "number") {
            const camera = this.getCamera(node.camera);
            if (camera.type === "perspective") {
                const perspective = new _camera_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdCameraPerspective({
                    name,
                    near: camera.perspective.znear,
                    far: camera.perspective.zfar,
                    fovy: camera.perspective.yfov,
                    transfo: this.createTransfoFromNode(node),
                });
                return perspective;
            }
            else {
                throw new Error("Sorry, but for now, we do not support Orthographic cameras...");
            }
        }
        else {
            console.error(node);
            throw new Error(`Node "${name}" is not of type Camera!`);
        }
    }
    getCamera(cameraIndex) {
        var _a;
        const camera = (_a = this.gltf.cameras) === null || _a === void 0 ? void 0 : _a[cameraIndex];
        if (!camera) {
            throw new Error(`Asset has no camera with index #${cameraIndex}!`);
        }
        return camera;
    }
    getChunkDetails() {
        return structuredClone(this.chunkDetails);
    }
    get fileSize() {
        return (12 + this.chunks.reduce((size, chunk) => size + chunk.byteLength, 0));
    }
    getScenes() {
        var _a;
        return (_a = this.gltf.scenes) !== null && _a !== void 0 ? _a : [];
    }
    getScene(sceneIndex) {
        var _a;
        const scene = (_a = this.gltf.scenes) === null || _a === void 0 ? void 0 : _a[sceneIndex];
        if (!scene) {
            throw new Error(`Asset has no scene with index #${sceneIndex}!`);
        }
        return scene;
    }
    getNode(nodeIndex) {
        var _a;
        const node = (_a = this.gltf.nodes) === null || _a === void 0 ? void 0 : _a[nodeIndex];
        if (!node) {
            throw new Error(`Asset has no node with index #${nodeIndex}!`);
        }
        return node;
    }
    getNodeByName(nodeName) {
        const nodes = this.gltf.nodes;
        if (!nodes)
            return;
        for (const node of nodes) {
            if (node.name === nodeName)
                return node;
        }
    }
    getNodeByNameOrThrow(nodeName) {
        var _a;
        const node = this.getNodeByName(nodeName);
        if (node)
            return node;
        throw new Error(`Unknown node "${nodeName}"!\nAvailable names:${((_a = this.gltf.nodes) !== null && _a !== void 0 ? _a : [])
            .map((node, index) => `\n  - ${typeof node.name === "string"
            ? JSON.stringify(node.name)
            : `#${index}`}`)
            .join("")}`);
    }
    getAccessor(accessorIndex = 0) {
        var _a;
        const accessor = (_a = this.gltf.accessors) === null || _a === void 0 ? void 0 : _a[accessorIndex];
        if (!accessor) {
            throw new Error(`Asset has no accessor with index #${accessorIndex}!`);
        }
        return accessor;
    }
    getMaterial(materialIndex) {
        var _a;
        const material = (_a = this.gltf.materials) === null || _a === void 0 ? void 0 : _a[materialIndex];
        if (!material) {
            throw new Error(`Asset has no material with index #${materialIndex}!`);
        }
        return material;
    }
    getMesh(meshIndex = 0) {
        var _a;
        const mesh = (_a = this.gltf.meshes) === null || _a === void 0 ? void 0 : _a[meshIndex];
        if (!mesh) {
            throw new Error(`Asset has no mesh with index #${meshIndex}!`);
        }
        return mesh;
    }
    getMeshPrimitive(meshIndex = 0, primitiveIndex = 0) {
        const mesh = this.getMesh(meshIndex);
        const primitive = mesh.primitives[primitiveIndex];
        if (!primitive) {
            throw new Error(`Asset has no primitive #${primitiveIndex} in mesh #${meshIndex}!`);
        }
        return primitive;
    }
    getMeshPrimitiveIndices(meshIndex = 0, primitiveIndex = 0) {
        var _a, _b;
        const primitive = this.getMeshPrimitive(meshIndex, primitiveIndex);
        const accessor = this.getAccessor((_a = primitive.indices) !== null && _a !== void 0 ? _a : 0);
        const elements = this.getBufferViewData((_b = accessor.bufferView) !== null && _b !== void 0 ? _b : 0, accessor.componentType);
        (0,_types_index_js__WEBPACK_IMPORTED_MODULE_2__.assertTgdTypeArrayForElements)(elements);
        return elements;
    }
    getAccessorByAttributeName(primitive, attribName) {
        const { attributes } = primitive;
        if (!attributes || Object.keys(attributes).length === 0)
            throw new Error("No attributes found!");
        const accessorIndex = attributes[attribName];
        if (typeof accessorIndex !== "number") {
            throw new TypeError(`No attribute with name "${attribName}"!\nAvailable names are: ${Object.keys(attributes)
                .map(name => JSON.stringify(name))
                .join(", ")}.`);
        }
        try {
            return this.getAccessor(accessorIndex);
        }
        catch (error) {
            const message = error instanceof Error ? error.message : JSON.stringify(error);
            throw new Error(`Attribute "${attribName}" pointed to an inexisting accessor!\n${message}`);
        }
    }
    createTexture2D(context, textureIndex) {
        var _a, _b, _c, _d, _e;
        const gltfTex = (_a = this.gltf.textures) === null || _a === void 0 ? void 0 : _a[textureIndex];
        if (!gltfTex) {
            throw new Error(`Asset has no texture with index #${textureIndex}!`);
        }
        const source = (_e = (_b = gltfTex.source) !== null && _b !== void 0 ? _b : (_d = (_c = gltfTex.extensions) === null || _c === void 0 ? void 0 : _c.EXT_texture_webp) === null || _d === void 0 ? void 0 : _d.source) !== null && _e !== void 0 ? _e : 0;
        const url = this.getImageURL(source);
        const texture = new _texture_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdTexture2D(context);
        if (url) {
            loadImage(url)
                .then(bmp => {
                if (bmp)
                    texture.loadBitmap(bmp);
                else
                    console.error("Unable to load this file:", url);
            })
                .catch(console.error);
        }
        else {
            console.error(`[GLTF] texture index #${textureIndex} is empty!`);
        }
        return texture;
    }
    loadImage(imageIndex) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const fromCache = this.cacheImages.get(imageIndex);
            if (fromCache)
                return fromCache;
            const url = this.getImageURL(imageIndex);
            if (!url)
                return;
            const promise = new Promise((resolve, reject) => {
                const img = new Image();
                img.src = url;
                img.addEventListener("load", () => {
                    resolve(img);
                });
                img.addEventListener("error", () => {
                    var _a;
                    console.error(`Unable to load image #${imageIndex}!`, (_a = this.gltf.images) === null || _a === void 0 ? void 0 : _a[imageIndex]);
                    reject();
                });
            });
            this.cacheImages.set(imageIndex, promise);
            return promise;
        });
    }
    getImageURL(imageIndex) {
        var _a;
        const fromCache = this.cacheImageURLs.get(imageIndex);
        if (fromCache)
            return fromCache;
        const { gltf } = this;
        const image = (_a = gltf.images) === null || _a === void 0 ? void 0 : _a[imageIndex];
        if (!image)
            return;
        if (image.uri)
            return image.uri;
        if (typeof image.bufferView !== "number")
            return;
        const buffer = this.getBufferViewData(image.bufferView, "Uint8");
        if (!buffer)
            return;
        const blob = new Blob([buffer], {
            type: image.mimeType,
        });
        const url = URL.createObjectURL(blob);
        this.cacheImageURLs.set(imageIndex, url);
        return url;
    }
    getBufferViewData(accessor, type = "Float32") {
        var _a, _b, _c, _d, _e;
        if (typeof accessor !== "number") {
            return this.getBufferViewData((_a = accessor.bufferView) !== null && _a !== void 0 ? _a : 0, accessor.componentType);
        }
        const bufferViewIndex = accessor;
        const fromCache = this.cacheBufferViewDatas.get(bufferViewIndex);
        if (fromCache)
            return fromCache;
        const { gltf } = this;
        const bufferView = (_b = gltf.bufferViews) === null || _b === void 0 ? void 0 : _b[bufferViewIndex];
        if (!bufferView)
            throw new Error(`No bufferView with index #${bufferViewIndex}!`);
        const buffer = this.chunks[bufferView.buffer];
        const byteOffset = (_c = bufferView.byteOffset) !== null && _c !== void 0 ? _c : 0;
        const data = buffer.slice(byteOffset, byteOffset + bufferView.byteLength);
        const view = figureOutView(data, convertTypeToNumber((_e = type !== null && type !== void 0 ? type : (_d = this.findAccessorForBufferView(bufferViewIndex)) === null || _d === void 0 ? void 0 : _d.componentType) !== null && _e !== void 0 ? _e : "Float32"));
        this.cacheBufferViewDatas.set(bufferViewIndex, view);
        return view;
    }
    findAccessorForBufferView(bufferViewIndex) {
        var _a;
        return ((_a = this.gltf.accessors) !== null && _a !== void 0 ? _a : []).find(accessor => accessor.bufferView === bufferViewIndex);
    }
    setAttrib(dataset, attribName, meshIndex = 0, primitiveIndex = 0, primitiveAttribName) {
        var _a, _b, _c, _d, _e;
        const { gltf } = this;
        const accessorIndex = (_b = (_a = gltf.meshes) === null || _a === void 0 ? void 0 : _a[meshIndex].primitives[primitiveIndex].attributes[primitiveAttribName !== null && primitiveAttribName !== void 0 ? primitiveAttribName : attribName]) !== null && _b !== void 0 ? _b : -1;
        const accessor = (_c = gltf.accessors) === null || _c === void 0 ? void 0 : _c[accessorIndex];
        if (!accessor) {
            throw new Error(`No attribute "${primitiveAttribName !== null && primitiveAttribName !== void 0 ? primitiveAttribName : attribName}" for primitive #${primitiveIndex} of mesh #${meshIndex}!`);
        }
        const bufferViewIndex = (_d = accessor.bufferView) !== null && _d !== void 0 ? _d : 0;
        const bufferView = (_e = gltf.bufferViews) === null || _e === void 0 ? void 0 : _e[bufferViewIndex];
        if (!bufferView) {
            throw new Error(`No bufferView with index #${bufferViewIndex}!`);
        }
        const view = this.getBufferViewData(bufferViewIndex, accessor.componentType);
        dataset.set(attribName, view, {
            byteStride: bufferView.byteStride,
            byteOffset: accessor.byteOffset,
            count: accessor.count,
        });
    }
    makeGeometry({ computeNormals, meshIndex = 0, primitiveIndex = 0, attPositionName = "POSITION", attNormalName = "NORMAL", attTextureCoordsName = "TEXCOORD_0", } = {}) {
        const primitive = this.getMeshPrimitive(meshIndex, primitiveIndex);
        try {
            const { attributes } = primitive;
            if (!attributes)
                throw new Error("No attributes found!");
            const elements = this.getMeshPrimitiveIndices(meshIndex, primitiveIndex);
            const definition = {
                [attPositionName]: "vec3",
            };
            if (typeof attributes[attNormalName] === "string") {
                definition[attNormalName] = "vec3";
            }
            if (typeof attributes[attTextureCoordsName] === "string") {
                definition[attTextureCoordsName] = "vec2";
            }
            const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset(definition);
            dataset.set(attPositionName, returnFloat32Array(this.getBufferViewData(this.getAccessorByAttributeName(primitive, attPositionName))));
            if (typeof attributes[attNormalName] === "string") {
                dataset.set(attNormalName, returnFloat32Array(this.getBufferViewData(this.getAccessorByAttributeName(primitive, attNormalName))));
            }
            if (typeof attributes[attTextureCoordsName] === "string") {
                dataset.set(attTextureCoordsName, returnFloat32Array(this.getBufferViewData(this.getAccessorByAttributeName(primitive, attTextureCoordsName))));
            }
            return new _geometry_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdGeometry({
                computeNormalsIfMissing: computeNormals,
                dataset,
                elements,
                attPosition: attPositionName,
                attNormal: attNormalName,
                attUV: attTextureCoordsName,
            });
        }
        catch (error) {
            const message = error instanceof Error ? error.message : JSON.stringify(error);
            throw new Error(`Error in primitive #${primitiveIndex} of mesh #${meshIndex}:\n${message}`);
        }
    }
}
function figureOutView(data, componentType) {
    switch (componentType) {
        case 5120:
            return new Int8Array(data);
        case 5121:
            return new Uint8Array(data);
        case 5122:
            return new Int16Array(data);
        case 5123:
            return new Uint16Array(data);
        case 5125:
            return new Uint32Array(data);
        default:
            return new Float32Array(data);
    }
}
function convertTypeToNumber(type) {
    if (typeof type === "number")
        return type;
    switch (type) {
        case "Int8":
            return 5120;
        case "Uint8":
            return 5121;
        case "Int16":
            return 5122;
        case "Uint16":
            return 5123;
        case "Uint32":
            return 5125;
        default:
            return WebGL2RenderingContext.FLOAT;
    }
    throw new Error("Function not implemented.");
}
function returnFloat32Array(data) {
    if (data instanceof Float32Array)
        return data;
    throw new Error("We were expecting a Float32Array!");
}
function loadImage(url) {
    return new Promise(resolve => {
        const img = new Image();
        img.src = url;
        img.addEventListener("load", () => resolve(img));
        img.addEventListener("error", () => resolve(null));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x0Zi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYXJzZXIvZ2x0Zi9nbHRmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUF3QixNQUFNLGNBQWMsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBV25DLE9BQU8sRUFDSCw2QkFBNkIsR0FFaEMsTUFBTSxZQUFZLENBQUE7QUFDbkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzNDLE9BQU8sRUFBYSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBcUIsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRTNFLE1BQU0sT0FBTyxVQUFVO0lBdUJuQjs7T0FFRztJQUNILFlBQVksT0FBb0I7UUF0QmYsaUJBQVksR0FHeEIsRUFBRSxDQUFBO1FBQ1UsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFHbkMsQ0FBQTtRQUNjLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUE7UUFDMUMseUJBQW9CLEdBQUcsSUFBSSxHQUFHLEVBUTVDLENBQUE7UUFNQyxJQUFJLENBQUM7WUFDRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtZQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUE7UUFDdkMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixNQUFNLE9BQU8sR0FDVCxLQUFLLFlBQVksS0FB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

/***/ }),

/***/ 2486:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/utils/action/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdActionCreateCameraInterpolation: () => (/* reexport safe */ _camera_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateCameraInterpolation),
/* harmony export */   tgdActionCreateTransfoInterpolation: () => (/* reexport safe */ _transfo_js__WEBPACK_IMPORTED_MODULE_1__.tgdActionCreateTransfoInterpolation),
/* harmony export */   tgdActionCreateVec2Interpolation: () => (/* reexport safe */ _vector_js__WEBPACK_IMPORTED_MODULE_2__.tgdActionCreateVec2Interpolation),
/* harmony export */   tgdActionCreateVec3Interpolation: () => (/* reexport safe */ _vector_js__WEBPACK_IMPORTED_MODULE_2__.tgdActionCreateVec3Interpolation),
/* harmony export */   tgdActionCreateVec4Interpolation: () => (/* reexport safe */ _vector_js__WEBPACK_IMPORTED_MODULE_2__.tgdActionCreateVec4Interpolation)
/* harmony export */ });
/* harmony import */ var _camera_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera.js */ 9999);
/* harmony import */ var _transfo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transfo.js */ 9271);
/* harmony import */ var _vector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector.js */ 8835);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYWN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsVUFBVSxDQUFBO0FBQ3hCLGNBQWMsV0FBVyxDQUFBO0FBQ3pCLGNBQWMsVUFBVSxDQUFBIn0=

/***/ }),

/***/ 2513:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/interface/transformable.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcmZhY2UvdHJhbnNmb3JtYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=

/***/ }),

/***/ 2638:
/*!**************************************!*\
  !*** ../../tgd2/lib/dist/vao/vao.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdVertexArray: () => (/* binding */ TgdVertexArray)
/* harmony export */ });
/* harmony import */ var _buffer_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../buffer/index.js */ 4004);

class TgdVertexArray {
    constructor(gl, program, datasets, elements) {
        this.gl = gl;
        this.program = program;
        this.datasets = datasets;
        this.elements = elements;
        this.drawBuffers = [];
        this.elemBuffer = null;
        const vao = gl.createVertexArray();
        if (!vao)
            throw new Error("Unable to create VertexArrayObject!");
        this.vao = vao;
        if (!program || !datasets)
            return;
        gl.bindVertexArray(vao);
        this.drawBuffers = datasets.map(dataset => {
            const buffer = new _buffer_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdBuffer(gl, {
                data: dataset.data,
                target: dataset.target,
                usage: dataset.usage,
            });
            buffer.bind();
            dataset.defineAttributes(gl, program);
            return buffer;
        });
        if (elements) {
            const buffer = new _buffer_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdBuffer(gl, {
                data: elements,
                target: "ELEMENT_ARRAY_BUFFER",
            });
            buffer.bind();
            this.elemBuffer = buffer;
        }
        gl.bindVertexArray(null);
    }
    getBuffer(index) {
        return this.drawBuffers[index];
    }
    toCode({ indent = "" } = {}) {
        var _a;
        const lines = [
            "function createVAO(",
            `  gl: WebGL2RenderingContext,`,
            `  prg: WebGLProgram${(_a = this.datasets) === null || _a === void 0 ? void 0 : _a.map((_ds, index) => `, data${index}: ArrayBuffer`).join("")}`,
            ") {",
            "  const vao = gl.createVertexArray()",
            "  gl.bindVertexArray(vao)",
        ];
        if (this.datasets)
            for (const [index, dataset] of this.datasets.entries()) {
                lines.push(`  const buff${index} = gl.createBuffer()`, `  gl.bindBuffer(gl.${dataset.target}, buff${index})`, `  gl.bufferData(gl.${dataset.target}, data${index}, gl.${dataset.usage})`, dataset.toCode({ indent: `${indent}  ` }));
            }
        lines.push("  return vao", "}");
        return lines.map(line => `${indent}${line}`).join("\n");
    }
    debug(caption = "TgdVertexArray") {
        console.log(caption);
        if (this.program)
            this.program.debug();
        if (this.datasets) {
            for (const [index, dataset] of this.datasets.entries()) {
                dataset.debug(`   Dataset #${index}`);
            }
        }
        if (this.elements)
            console.log("Elements:", this.elements);
    }
    bind() {
        this.gl.bindVertexArray(this.vao);
    }
    unbind() {
        this.gl.bindVertexArray(null);
    }
    delete() {
        const { gl, vao, drawBuffers, elemBuffer } = this;
        gl.deleteVertexArray(vao);
        for (const buff of drawBuffers)
            buff.delete();
        if (elemBuffer)
            elemBuffer.delete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Zhby92YW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUt2QyxNQUFNLE9BQU8sY0FBYztJQU12QixZQUNvQixFQUEwQixFQUN6QixPQUFvQixFQUNwQixRQUFpQyxFQUNqQyxRQUFrQztRQUhuQyxPQUFFLEdBQUYsRUFBRSxDQUF3QjtRQUN6QixZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQ3BCLGFBQVEsR0FBUixRQUFRLENBQXlCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBUHRDLGdCQUFXLEdBQWdCLEVBQUUsQ0FBQTtRQUM3QixlQUFVLEdBQXFCLElBQUksQ0FBQTtRQVFoRCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtRQUNsQyxJQUFJLENBQUMsR0FBRztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQTtRQUVoRSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTTtRQUVqQyxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDdkIsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ2IsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUNyQyxPQUFPLE1BQU0sQ0FBQTtRQUNqQixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksUUFBUSxFQUFFLENBQUM7WUFDWCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLElBQUksRUFBRSxRQUFRO2dCQUNkLE1BQU0sRUFBRSxzQkFBc0I7YUFDakMsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ2IsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUE7UUFDNUIsQ0FBQztRQUNELEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsS0FBa0MsRUFBRTs7UUFDcEQsTUFBTSxLQUFLLEdBQWE7WUFDcEIscUJBQXFCO1lBQ3JCLCtCQUErQjtZQUMvQixzQkFBc0IsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FDN0IsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsU0FBUyxLQUFLLGVBQWUsRUFDbEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2YsS0FBSztZQUNMLHNDQUFzQztZQUN0QywyQkFBMkI7U0FDOUIsQ0FBQTtRQUNELElBQUksSUFBSSxDQUFDLFFBQVE7WUFDYixLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO2dCQUNyRCxLQUFLLENBQUMsSUFBSSxDQUNOLGVBQWUsS0FBSyxzQkFBc0IsRUFDMUMsc0JBQXNCLE9BQU8sQ0FBQyxNQUFNLFNBQVMsS0FBSyxHQUFHLEVBQ3JELHNCQUFzQixPQUFPLENBQUMsTUFBTSxTQUFTLEtBQUssUUFBUSxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQzFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDLENBQzVDLENBQUE7WUFDTCxDQUFDO1FBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDL0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDdEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDckQsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDekMsQ0FBQztRQUNMLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzlELENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVELE1BQU07UUFDRixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ2pELEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QixLQUFLLE1BQU0sSUFBSSxJQUFJLFdBQVc7WUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDN0MsSUFBSSxVQUFVO1lBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3ZDLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 2659:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/painter/skybox/skybox.frag ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform mat4 uniMatrix;\nuniform samplerCube uniTexture;\n\nin vec4 varPoint;\n\nout vec4 FragColor;\n\nvoid main() {\n    vec4 t = uniMatrix * varPoint;\n    FragColor = texture(uniTexture, normalize(t.xyz));\n}";

/***/ }),

/***/ 2692:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/code/random.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeFunction_random: () => (/* binding */ tgdCodeFunction_random)
/* harmony export */ });
/**
 * Generates function `float random(vec2 seed)`.
 */
function tgdCodeFunction_random(options = {}) {
    const { name = "random" } = options;
    return {
        [name]: `float ${name}(vec2 seed){
   return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453);
}
`,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvZGUvcmFuZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUNsQyxVQUVJLEVBQUU7SUFFTixNQUFNLEVBQUUsSUFBSSxHQUFHLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUNuQyxPQUFPO1FBQ0gsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLElBQUk7OztDQUc1QjtLQUNJLENBQUE7QUFDTCxDQUFDIn0=

/***/ }),

/***/ 2699:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/geometry/box.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdGeometryBox: () => (/* binding */ TgdGeometryBox)
/* harmony export */ });
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../dataset/index.js */ 5710);
/* harmony import */ var _geometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometry.js */ 3440);


class TgdGeometryBox extends _geometry_js__WEBPACK_IMPORTED_MODULE_1__.TgdGeometry {
    static fromBoundingBox(min, max) {
        const [minX, minY, minZ] = min;
        const [maxX, maxY, maxZ] = max;
        const sizeX = maxX - minX;
        const sizeY = maxY - minY;
        const sizeZ = maxZ - minZ;
        const geometry = new TgdGeometryBox({ sizeX, sizeY, sizeZ });
        return geometry;
    }
    constructor({ sizeX = 1, sizeY = 1, sizeZ = 1, uvs = "sameOnEachFace", } = {}) {
        const x = sizeX * 0.5;
        const y = sizeY * 0.5;
        const z = sizeZ * 0.5;
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset({
            POSITION: "vec3",
            NORMAL: "vec3",
            TEXCOORD_0: "vec2",
        });
        // prettier-ignore
        dataset.set("POSITION", new Float32Array([
            ...coords("+x+y+z", x, y, z),
            ...coords("+y+z+x", x, y, z),
            ...coords("+z+x+y", x, y, z),
            ...coords("-x+z+y", x, y, z),
            ...coords("-y+x+z", x, y, z),
            ...coords("-z+y+x", x, y, z),
        ]));
        dataset.set("TEXCOORD_0", new Float32Array(getUVs(uvs)));
        // prettier-ignore
        dataset.set("NORMAL", new Float32Array([...XP6, ...YP6, ...ZP6, ...XN6, ...YN6, ...ZN6]));
        super({
            dataset,
            drawMode: "TRIANGLES",
        });
    }
}
// prettier-ignore
const FACE_IJ = [
    [-1, +1], [+1, +1], [-1, -1],
    [+1, -1], [-1, -1], [+1, +1],
];
function coords(definition, ...sizes) {
    function index(k) {
        const txt = definition.charAt(k);
        switch (txt) {
            case "x":
                return 0;
            case "y":
                return 1;
            case "z":
                return 2;
            default:
                throw new Error(`Invalid coordinate name at pos ${k}: "${txt}"!`);
        }
    }
    function sgn(k) {
        const txt = definition.charAt(k);
        switch (txt) {
            case "+":
                return +1;
            case "-":
                return -1;
            default:
                throw new Error(`Invalid coordinate sign at pos ${k}: "${txt}"!`);
        }
    }
    const out = [];
    const sgnC = sgn(0);
    const indexC = index(1);
    const sgnI = sgn(2);
    const indexI = index(3);
    const sgnJ = sgn(4);
    const indexJ = index(5);
    for (const [index, index_] of FACE_IJ) {
        const row = [];
        row[indexC] = sizes[indexC] * sgnC;
        row[indexI] = sizes[indexI] * sgnI * index;
        row[indexJ] = sizes[indexJ] * sgnJ * index_;
        out.push(...row);
    }
    return out;
}
// prettier-ignore
const FACE_UV = [
    0, 0, 1, 0, 0, 1,
    1, 1, 0, 1, 1, 0
];
const W3x2 = 1 / 3;
const H3x2 = 1 / 2;
function face3x2(col, row) {
    const x = W3x2 * col;
    const y = H3x2 * row;
    return FACE_UV.map((v, index) => index % 2 == 0 ? x + W3x2 * v : y + H3x2 * v);
}
function getUVs(uvs) {
    switch (uvs) {
        case "sameOnEachFace":
            return [
                ...FACE_UV,
                ...FACE_UV,
                ...FACE_UV,
                ...FACE_UV,
                ...FACE_UV,
                ...FACE_UV,
            ];
        default:
            // prettier-ignore
            return [
                ...face3x2(0, 0),
                ...face3x2(1, 0),
                ...face3x2(2, 0),
                ...face3x2(0, 1),
                ...face3x2(1, 1),
                ...face3x2(2, 1),
            ];
    }
}
const XP = [1, 0, 0];
const XP6 = [...XP, ...XP, ...XP, ...XP, ...XP, ...XP];
const XN = [-1, 0, 0];
const XN6 = [...XN, ...XN, ...XN, ...XN, ...XN, ...XN];
const YP = [0, 1, 0];
const YP6 = [...YP, ...YP, ...YP, ...YP, ...YP, ...YP];
const YN = [0, -1, 0];
const YN6 = [...YN, ...YN, ...YN, ...YN, ...YN, ...YN];
const ZP = [0, 0, 1];
const ZP6 = [...ZP, ...ZP, ...ZP, ...ZP, ...ZP, ...ZP];
const ZN = [0, 0, -1];
const ZN6 = [...ZN, ...ZN, ...ZN, ...ZN, ...ZN, ...ZN];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlb21ldHJ5L2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFVeEMsTUFBTSxPQUFPLGNBQWUsU0FBUSxXQUFXO0lBQzNDLE1BQU0sQ0FBQyxlQUFlLENBQ2xCLEdBQWlCLEVBQ2pCLEdBQWlCO1FBRWpCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUM5QixNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUE7UUFDekIsTUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFDNUQsT0FBTyxRQUFRLENBQUE7SUFDbkIsQ0FBQztJQUVELFlBQVksRUFDUixLQUFLLEdBQUcsQ0FBQyxFQUNULEtBQUssR0FBRyxDQUFDLEVBQ1QsS0FBSyxHQUFHLENBQUMsRUFDVCxHQUFHLEdBQUcsZ0JBQWdCLE1BQ0MsRUFBRTtRQUN6QixNQUFNLENBQUMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFBO1FBQ3JCLE1BQU0sQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUE7UUFDckIsTUFBTSxDQUFDLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQTtRQUNyQixNQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUMzQixRQUFRLEVBQUUs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R0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtBQUN0RCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNyQixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7QUFDdEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3BCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtBQUN0RCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNyQixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7QUFDdEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3BCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtBQUN0RCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNyQixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUEifQ==

/***/ }),

/***/ 2700:
/*!*****************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/gltf/gltf.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMeshGltf: () => (/* binding */ TgdPainterMeshGltf)
/* harmony export */ });
/* harmony import */ var _geometry_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../geometry/index.js */ 7250);
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../dataset/index.js */ 5710);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../math/index.js */ 6088);
/* harmony import */ var _material_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../material/index.js */ 8163);
/* harmony import */ var _light_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../light/index.js */ 6594);
/* harmony import */ var _mesh_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mesh/index.js */ 110);






/**
 */
class TgdPainterMeshGltf extends _mesh_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdPainterMesh {
    constructor(context, options) {
        var _a;
        const { asset, meshIndex = 0, primitiveIndex = 0, materialFactory = makeMaterial, } = options;
        const color = figureColor(asset, meshIndex, primitiveIndex, context);
        const material = materialFactory({ color });
        let computeNormals = false;
        const attributes = {
            POSITION: "vec3",
            NORMAL: "vec3",
        };
        if (asset.getMeshPrimitive().attributes.TEXCOORD_0) {
            attributes.TEXCOORD_0 = "vec2";
        }
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdDataset(attributes);
        asset.setAttrib(dataset, "POSITION", meshIndex, primitiveIndex);
        if (asset.getMeshPrimitive().attributes.NORMAL) {
            asset.setAttrib(dataset, "NORMAL", meshIndex, primitiveIndex);
        }
        else {
            // It seems to be impossible to retrieve normals.
            // We will compute them with a smooth shading.
            console.warn("No normals found! We will apply smooth shading.");
            computeNormals = true;
        }
        if (asset.getMeshPrimitive().attributes.TEXCOORD_0) {
            asset.setAttrib(dataset, "TEXCOORD_0", meshIndex, primitiveIndex);
        }
        super(context, {
            geometry: new _geometry_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdGeometry({
                dataset,
                elements: asset.getMeshPrimitiveIndices(meshIndex, primitiveIndex),
                drawMode: "TRIANGLES",
                computeNormalsIfMissing: computeNormals,
            }),
            material,
        });
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `Gltf/${this.name}`;
    }
}
const DEFAULT_COLOR = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4(0.9, 0.5, 0.1, 1);
function figureColor(asset, meshIndex, primitiveIndex, context) {
    var _a, _b;
    const primitive = asset.getMeshPrimitive(meshIndex, primitiveIndex);
    const materialIndex = (_a = primitive.material) !== null && _a !== void 0 ? _a : -1;
    if (materialIndex === -1)
        return DEFAULT_COLOR;
    const material = asset.getMaterial(materialIndex);
    const textureEmissive = getTextureEmissive(context, asset, material);
    const pbr = material.pbrMetallicRoughness;
    if (!pbr)
        return textureEmissive !== null && textureEmissive !== void 0 ? textureEmissive : DEFAULT_COLOR;
    if (textureEmissive)
        return textureEmissive;
    if (pbr.baseColorTexture) {
        const textureIndex = (_b = pbr.baseColorTexture) === null || _b === void 0 ? void 0 : _b.index;
        const color = asset.createTexture2D(context, textureIndex !== null && textureIndex !== void 0 ? textureIndex : 0);
        if (context.paint)
            color.eventChange.addListener(context.paint);
        return color;
    }
    if (pbr.baseColorFactor) {
        return new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4(...pbr.baseColorFactor);
    }
    return DEFAULT_COLOR;
}
function makeMaterial({ color }) {
    const material = new _material_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdMaterialDiffuse({
        color,
        specularIntensity: 0.3,
        specularExponent: 80,
        light: new _light_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdLight({
            color: new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4(1, 1, 1, 1),
            direction: new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(1, 0.2, 0),
        }),
        ambient: new _light_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdLight({
            color: new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4(0.2, 0.1, 0, 1),
        }),
    });
    return material;
}
function getTextureEmissive(context, asset, material) {
    var _a;
    const emissive = material.emissiveTexture;
    if (!emissive)
        return null;
    const color = asset.createTexture2D(context, (_a = emissive.index) !== null && _a !== void 0 ? _a : 0);
    if (context.paint)
        color.eventChange.addListener(context.paint);
    return color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x0Zi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWludGVyL21lc2gvZ2x0Zi9nbHRmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBd0IsTUFBTSxjQUFjLENBQUE7QUFFL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDNUMsT0FBTyxFQUFlLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQWdCeEM7R0FDRztBQUNILE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxjQUFjO0lBQ2xELFlBQ0ksT0FJQyxFQUNELE9BQWtDOztRQUVsQyxNQUFNLEVBQ0YsS0FBSyxFQUNMLFNBQVMsR0FBRyxDQUFDLEVBQ2IsY0FBYyxHQUFHLENBQUMsRUFDbEIsZUFBZSxHQUFHLFlBQVksR0FDakMsR0FBRyxPQUFPLENBQUE7UUFDWCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDcEUsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUMzQyxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUE7UUFDMUIsTUFBTSxVQUFVLEdBQXlCO1lBQ3JDLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUE7UUFDRCxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNqRCxVQUFVLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQTtRQUNsQyxD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

/***/ }),

/***/ 2711:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/material/normals.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialNormals: () => (/* binding */ TgdMaterialNormals)
/* harmony export */ });
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material.js */ 6018);

class TgdMaterialNormals extends _material_js__WEBPACK_IMPORTED_MODULE_0__.TgdMaterial {
    constructor() {
        super();
        this.fragmentShaderCode = [
            `vec3 color = vec3(1.0) + normalize(varNormal);`,
            `color *= 0.5;`,
            `return vec4(color, 1.0);`,
        ];
        this.vertexShaderCode = ["varNormal = NORMAL;"];
        this.varyings = {
            varNormal: "vec3",
        };
    }
    setUniforms(_program) { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRlcmlhbC9ub3JtYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFJeEMsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFdBQVc7SUFLL0M7UUFDSSxLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxrQkFBa0IsR0FBRztZQUN0QixnREFBZ0Q7WUFDaEQsZUFBZTtZQUNmLDBCQUEwQjtTQUM3QixDQUFBO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtRQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ1osU0FBUyxFQUFFLE1BQU07U0FDcEIsQ0FBQTtJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsUUFBb0IsSUFBUyxDQUFDO0NBQzdDIn0=

/***/ }),

/***/ 2780:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/loader/binary.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdLoadArrayBuffer: () => (/* binding */ tgdLoadArrayBuffer),
/* harmony export */   tgdLoadGlb: () => (/* binding */ tgdLoadGlb),
/* harmony export */   tgdLoadText: () => (/* binding */ tgdLoadText)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 5664);
/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../parser/index.js */ 3365);


function tgdLoadGlb(urlOrFile) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
        try {
            if (urlOrFile instanceof File) {
                const data = yield urlOrFile.arrayBuffer();
                return new _parser_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataGlb(data);
            }
            const resp = yield fetch(urlOrFile);
            if (!resp.ok) {
                throw new Error(`Unable to load GLB from url "${urlOrFile}"!\nError #${resp.status}: ${resp.statusText}`);
            }
            const data = yield resp.arrayBuffer();
            return new _parser_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataGlb(data);
        }
        catch (error) {
            console.error(error);
            return null;
        }
    });
}
function tgdLoadArrayBuffer(urlOrFile) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
        if (urlOrFile instanceof File) {
            return yield urlOrFile.arrayBuffer();
        }
        try {
            const resp = yield fetch(urlOrFile);
            const data = yield resp.arrayBuffer();
            return data;
        }
        catch (error) {
            console.error(error);
            return null;
        }
    });
}
function tgdLoadText(urlOrFile) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
        if (urlOrFile instanceof File) {
            return yield urlOrFile.text();
        }
        try {
            const resp = yield fetch(urlOrFile);
            const data = yield resp.text();
            return data;
        }
        catch (error) {
            console.error(error);
            return null;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvYWRlci9iaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFeEMsTUFBTSxVQUFnQixVQUFVLENBQzVCLFNBQXdCOztRQUV4QixJQUFJLENBQUM7WUFDRCxJQUFJLFNBQVMsWUFBWSxJQUFJLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUE7Z0JBQzFDLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDL0IsQ0FBQztZQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ1gsTUFBTSxJQUFJLEtBQUssQ0FDWCxnQ0FBZ0MsU0FBUyxjQUFjLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUMzRixDQUFBO1lBQ0wsQ0FBQztZQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ3JDLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0IsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BCLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztJQUNMLENBQUM7Q0FBQTtBQUVELE1BQU0sVUFBZ0Isa0JBQWtCLENBQ3BDLFNBQXdCOztRQUV4QixJQUFJLFNBQVMsWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUM1QixPQUFPLE1BQU0sU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3hDLENBQUM7UUFDRCxJQUFJLENBQUM7WUFDRCxNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUNuQyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUNyQyxPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNwQixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7SUFDTCxDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQWdCLFdBQVcsQ0FDN0IsU0FBd0I7O1FBRXhCLElBQUksU0FBUyxZQUFZLElBQUksRUFBRSxDQUFDO1lBQzVCLE9BQU8sTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakMsQ0FBQztRQUNELElBQUksQ0FBQztZQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ25DLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQzlCLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3BCLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztJQUNMLENBQUM7Q0FBQSJ9

/***/ }),

/***/ 2805:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/debug/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterDebugStencil: () => (/* reexport safe */ _stencil_stencil_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterDebugStencil)
/* harmony export */ });
/* harmony import */ var _stencil_stencil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stencil/stencil.js */ 718);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9kZWJ1Zy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFtQixDQUFBIn0=

/***/ }),

/***/ 2958:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/webgl/texture/types.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd2ViZ2wvdGV4dHVyZS90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=

/***/ }),

/***/ 3166:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/light/light.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdLight: () => (/* binding */ TgdLight)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);

class TgdLight {
    constructor(options = {}) {
        var _a, _b;
        this._direction = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3();
        this.color = (_a = options.color) !== null && _a !== void 0 ? _a : new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4(0.8, 0.8, 0.8, 1);
        this.direction = (_b = options.direction) !== null && _b !== void 0 ? _b : new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3(0, 0, -1);
    }
    get direction() {
        return this._direction;
    }
    set direction(v) {
        this._direction.from(v).normalize();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGlnaHQvbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFPNUMsTUFBTSxPQUFPLFFBQVE7SUFRakIsWUFBWSxVQUFvQyxFQUFFOztRQUZqQyxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUd2QyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQUEsT0FBTyxDQUFDLEtBQUssbUNBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDM0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFBLE9BQU8sQ0FBQyxTQUFTLG1DQUFJLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFBO0lBQzFCLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxDQUFVO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3ZDLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 3291:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/utils/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertElementsTypedArray: () => (/* reexport safe */ _assert_js__WEBPACK_IMPORTED_MODULE_2__.assertElementsTypedArray),
/* harmony export */   tgdActionCreateCameraInterpolation: () => (/* reexport safe */ _action_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateCameraInterpolation),
/* harmony export */   tgdActionCreateTransfoInterpolation: () => (/* reexport safe */ _action_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateTransfoInterpolation),
/* harmony export */   tgdActionCreateVec2Interpolation: () => (/* reexport safe */ _action_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateVec2Interpolation),
/* harmony export */   tgdActionCreateVec3Interpolation: () => (/* reexport safe */ _action_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateVec3Interpolation),
/* harmony export */   tgdActionCreateVec4Interpolation: () => (/* reexport safe */ _action_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdActionCreateVec4Interpolation),
/* harmony export */   tgdAnimChain: () => (/* reexport safe */ _animation_index_js__WEBPACK_IMPORTED_MODULE_1__.tgdAnimChain),
/* harmony export */   tgdAnimChainTransfoInterpolations: () => (/* reexport safe */ _animation_index_js__WEBPACK_IMPORTED_MODULE_1__.tgdAnimChainTransfoInterpolations),
/* harmony export */   tgdCalcClamp: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcClamp),
/* harmony export */   tgdCalcDegToRad: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcDegToRad),
/* harmony export */   tgdCalcMix: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcMix),
/* harmony export */   tgdCalcModulo: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcModulo),
/* harmony export */   tgdCalcRadToDeg: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcRadToDeg),
/* harmony export */   tgdCalcRandom: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcRandom),
/* harmony export */   tgdCalcSmoothStep: () => (/* reexport safe */ _math_js__WEBPACK_IMPORTED_MODULE_8__.tgdCalcSmoothStep),
/* harmony export */   tgdCanvasCreate: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreate),
/* harmony export */   tgdCanvasCreateCreateGradientvertical: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreateCreateGradientvertical),
/* harmony export */   tgdCanvasCreateFill: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreateFill),
/* harmony export */   tgdCanvasCreateGradient: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreateGradient),
/* harmony export */   tgdCanvasCreateGradientHorizontal: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreateGradientHorizontal),
/* harmony export */   tgdCanvasCreatePalette: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreatePalette),
/* harmony export */   tgdCanvasCreateWithContext2D: () => (/* reexport safe */ _canvas_js__WEBPACK_IMPORTED_MODULE_4__.tgdCanvasCreateWithContext2D),
/* harmony export */   tgdComputeBoundingBox3D: () => (/* reexport safe */ _bbox_js__WEBPACK_IMPORTED_MODULE_3__.tgdComputeBoundingBox3D),
/* harmony export */   tgdEasingFunctionInBack: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInBack),
/* harmony export */   tgdEasingFunctionInBounce: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInBounce),
/* harmony export */   tgdEasingFunctionInCirc: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInCirc),
/* harmony export */   tgdEasingFunctionInCubic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInCubic),
/* harmony export */   tgdEasingFunctionInElastic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInElastic),
/* harmony export */   tgdEasingFunctionInExpo: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInExpo),
/* harmony export */   tgdEasingFunctionInOutBack: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutBack),
/* harmony export */   tgdEasingFunctionInOutBounce: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutBounce),
/* harmony export */   tgdEasingFunctionInOutCirc: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutCirc),
/* harmony export */   tgdEasingFunctionInOutCubic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutCubic),
/* harmony export */   tgdEasingFunctionInOutElastic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutElastic),
/* harmony export */   tgdEasingFunctionInOutExpo: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutExpo),
/* harmony export */   tgdEasingFunctionInOutQuad: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutQuad),
/* harmony export */   tgdEasingFunctionInOutQuart: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutQuart),
/* harmony export */   tgdEasingFunctionInOutQuint: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutQuint),
/* harmony export */   tgdEasingFunctionInOutSine: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInOutSine),
/* harmony export */   tgdEasingFunctionInQuad: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInQuad),
/* harmony export */   tgdEasingFunctionInQuart: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInQuart),
/* harmony export */   tgdEasingFunctionInQuint: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInQuint),
/* harmony export */   tgdEasingFunctionInSine: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionInSine),
/* harmony export */   tgdEasingFunctionLinear: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionLinear),
/* harmony export */   tgdEasingFunctionOutBack: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutBack),
/* harmony export */   tgdEasingFunctionOutBounce: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutBounce),
/* harmony export */   tgdEasingFunctionOutCirc: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutCirc),
/* harmony export */   tgdEasingFunctionOutCubic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutCubic),
/* harmony export */   tgdEasingFunctionOutElastic: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutElastic),
/* harmony export */   tgdEasingFunctionOutExpo: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutExpo),
/* harmony export */   tgdEasingFunctionOutQuad: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutQuad),
/* harmony export */   tgdEasingFunctionOutQuart: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutQuart),
/* harmony export */   tgdEasingFunctionOutQuint: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutQuint),
/* harmony export */   tgdEasingFunctionOutSine: () => (/* reexport safe */ _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__.tgdEasingFunctionOutSine),
/* harmony export */   tgdFullscreenExit: () => (/* reexport safe */ _fullscreen_js__WEBPACK_IMPORTED_MODULE_7__.tgdFullscreenExit),
/* harmony export */   tgdFullscreenRequest: () => (/* reexport safe */ _fullscreen_js__WEBPACK_IMPORTED_MODULE_7__.tgdFullscreenRequest),
/* harmony export */   tgdFullscreenTest: () => (/* reexport safe */ _fullscreen_js__WEBPACK_IMPORTED_MODULE_7__.tgdFullscreenTest),
/* harmony export */   tgdFullscreenToggle: () => (/* reexport safe */ _fullscreen_js__WEBPACK_IMPORTED_MODULE_7__.tgdFullscreenToggle),
/* harmony export */   tgdPixelBufferObjectCreate: () => (/* reexport safe */ _pbo_js__WEBPACK_IMPORTED_MODULE_9__.tgdPixelBufferObjectCreate),
/* harmony export */   webglBlendExec: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglBlendExec),
/* harmony export */   webglBlendGet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglBlendGet),
/* harmony export */   webglBlendSet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglBlendSet),
/* harmony export */   webglCreateFramebuffer: () => (/* reexport safe */ _framebuffer_js__WEBPACK_IMPORTED_MODULE_6__.webglCreateFramebuffer),
/* harmony export */   webglCullExec: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglCullExec),
/* harmony export */   webglCullGet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglCullGet),
/* harmony export */   webglCullSet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglCullSet),
/* harmony export */   webglDebugBlend: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDebugBlend),
/* harmony export */   webglDebugCull: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDebugCull),
/* harmony export */   webglDebugDepth: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDebugDepth),
/* harmony export */   webglDebugStencil: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDebugStencil),
/* harmony export */   webglDepthExec: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDepthExec),
/* harmony export */   webglDepthGet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDepthGet),
/* harmony export */   webglDepthSet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglDepthSet),
/* harmony export */   webglElementTypeFromTypedArray: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_11__.webglElementTypeFromTypedArray),
/* harmony export */   webglLookup: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_11__.webglLookup),
/* harmony export */   webglPresetBlend: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglPresetBlend),
/* harmony export */   webglPresetCull: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglPresetCull),
/* harmony export */   webglPresetDepth: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglPresetDepth),
/* harmony export */   webglPresetStencil: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglPresetStencil),
/* harmony export */   webglStencilExec: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglStencilExec),
/* harmony export */   webglStencilGet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglStencilGet),
/* harmony export */   webglStencilSet: () => (/* reexport safe */ _state_index_js__WEBPACK_IMPORTED_MODULE_10__.webglStencilSet),
/* harmony export */   webglTypedArrayFromBufferSource: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_11__.webglTypedArrayFromBufferSource)
/* harmony export */ });
/* harmony import */ var _action_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./action/index.js */ 2486);
/* harmony import */ var _animation_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animation/index.js */ 7930);
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assert.js */ 6909);
/* harmony import */ var _bbox_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bbox.js */ 3768);
/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canvas.js */ 5819);
/* harmony import */ var _easing_function_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./easing-function/index.js */ 9248);
/* harmony import */ var _framebuffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./framebuffer.js */ 4016);
/* harmony import */ var _fullscreen_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fullscreen.js */ 106);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./math.js */ 1793);
/* harmony import */ var _pbo_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pbo.js */ 5400);
/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./state/index.js */ 8861);
/* harmony import */ var _webgl_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./webgl.js */ 8942);












//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxhQUFhLENBQUE7QUFDM0IsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxtQkFBbUIsQ0FBQTtBQUNqQyxjQUFjLGVBQWUsQ0FBQTtBQUM3QixjQUFjLGNBQWMsQ0FBQTtBQUM1QixjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLE9BQU8sQ0FBQTtBQUNyQixjQUFjLFNBQVMsQ0FBQTtBQUN2QixjQUFjLFNBQVMsQ0FBQSJ9

/***/ }),

/***/ 3298:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/shader/code.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   expandFunctions: () => (/* binding */ expandFunctions),
/* harmony export */   expandVariables: () => (/* binding */ expandVariables),
/* harmony export */   isCodeBloc: () => (/* binding */ isCodeBloc),
/* harmony export */   tgdCodeStringify: () => (/* binding */ tgdCodeStringify)
/* harmony export */ });
/* harmony import */ var _types_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../types/guards.js */ 7937);

function isCodeBloc(v) {
    if (typeof v === "string")
        return true;
    if (!Array.isArray(v))
        return false;
    for (const item of v) {
        if (!isCodeBloc(item))
            return false;
    }
    return true;
}
function tgdCodeStringify(code, indent = "", setOfFunctionNames) {
    if (typeof code === "string")
        return `${indent}${code}`;
    if (!code)
        return "";
    const set = setOfFunctionNames !== null && setOfFunctionNames !== void 0 ? setOfFunctionNames : new Set();
    if (!Array.isArray(code)) {
        return Object.keys(code)
            .map(key => {
            if (set.has(key))
                return null;
            set.add(key);
            return `// ${key}\n${code[key]}\n`;
        })
            .filter(item => (0,_types_guards_js__WEBPACK_IMPORTED_MODULE_0__.isString)(item))
            .join("\n");
    }
    const subIndent = `${indent}    `;
    return code
        .filter(item => item !== null)
        .filter(item => !Array.isArray(item) || item.length > 0)
        .map(line => tgdCodeStringify(line, subIndent, set))
        .join("\n");
}
function expandVariables(definition, prefix, comment = "----------------------------------------") {
    const names = Object.keys(definition);
    if (names.length === 0)
        return [];
    return [
        `// ${comment}`,
        ...names.map(name => `${prefix} ${definition[name]} ${name};`),
    ];
}
function expandFunctions(definition, comment) {
    if (isCodeBloc(definition))
        return [definition];
    const names = Object.keys(definition);
    if (names.length === 0)
        return [];
    const result = comment ? [`// ${comment}`] : [];
    for (const name of names) {
        result.push(definition[name], "");
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFkZXIvY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFlNUMsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFVO0lBQ2pDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFBO0lBRXRDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFBO0lBRW5DLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN2QyxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixJQUFpQixFQUNqQixNQUFNLEdBQUcsRUFBRSxFQUNYLGtCQUFnQztJQUVoQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVE7UUFBRSxPQUFPLEdBQUcsTUFBTSxHQUFHLElBQUksRUFBRSxDQUFBO0lBRXZELElBQUksQ0FBQyxJQUFJO1FBQUUsT0FBTyxFQUFFLENBQUE7SUFFcEIsTUFBTSxHQUFHLEdBQUcsa0JBQWtCLGFBQWxCLGtCQUFrQixjQUFsQixrQkFBa0IsR0FBSSxJQUFJLEdBQUcsRUFBVSxDQUFBO0lBQ25ELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNuQixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDUCxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUFFLE9BQU8sSUFBSSxDQUFBO1lBRTdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDWixPQUFPLE1BQU0sR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3RDLENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbkIsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUE7SUFDakMsT0FBTyxJQUFJO1NBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztTQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDdkQsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBRzNCLFVBQWtDLEVBQ2xDLE1BQWMsRUFDZCxPQUFPLEdBQUcsMENBQTBDO0lBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUVqQyxPQUFPO1FBQ0gsTUFBTSxPQUFPLEVBQUU7UUFDZixHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7S0FDakUsQ0FBQTtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUMzQixVQUEwQyxFQUMxQyxPQUFnQjtJQUVoQixJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFL0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNyQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sRUFBRSxDQUFBO0lBRWpDLE1BQU0sTUFBTSxHQUFrQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDOUQsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyJ9

/***/ }),

/***/ 3352:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/loader/image.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdLoadCanvas: () => (/* binding */ tgdLoadCanvas),
/* harmony export */   tgdLoadImage: () => (/* binding */ tgdLoadImage),
/* harmony export */   tgdLoadImages: () => (/* binding */ tgdLoadImages)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 5664);

/**
 * Try to load an image and return `null` in case of failure.
 * @param url URL of the image to load.
 */
function tgdLoadImage(url) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            const img = new Image();
            img.addEventListener("load", () => resolve(img));
            img.addEventListener("error", () => {
                console.error("Unable to load image:", url);
                resolve(null);
            });
            img.src = url;
        });
    });
}
function tgdLoadImages(urls) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        return Promise.all(urls.map(url => tgdLoadImage(url)));
    });
}
function tgdLoadCanvas(url) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        const img = yield tgdLoadImage(url);
        if (!img)
            return null;
        const canvas = document.createElement("canvas");
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        const context = canvas.getContext("2d");
        if (!context)
            throw new Error("Unable to get a 2D context!");
        context.drawImage(img, 0, 0);
        return canvas;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9hZGVyL2ltYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxNQUFNLFVBQWdCLFlBQVksQ0FDOUIsR0FBVzs7UUFFWCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUE7WUFDdkIsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUNoRCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2pCLENBQUMsQ0FBQyxDQUFBO1lBQ0YsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDakIsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQWdCLGFBQWEsQ0FDL0IsSUFBYzs7UUFFZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNyQyxDQUFBO0lBQ0wsQ0FBQztDQUFBO0FBRUQsTUFBTSxVQUFnQixhQUFhLENBQy9CLEdBQVc7O1FBRVgsTUFBTSxHQUFHLEdBQUcsTUFBTSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLElBQUksQ0FBQTtRQUVyQixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQTtRQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUE7UUFDakMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtRQUU1RCxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDNUIsT0FBTyxNQUFNLENBQUE7SUFDakIsQ0FBQztDQUFBIn0=

/***/ }),

/***/ 3365:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/parser/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdDataGlb: () => (/* reexport safe */ _gltf_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataGlb),
/* harmony export */   TgdParserMeshWavefront: () => (/* reexport safe */ _mesh_wavefront_js__WEBPACK_IMPORTED_MODULE_1__.TgdParserMeshWavefront)
/* harmony export */ });
/* harmony import */ var _gltf_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gltf/index.js */ 1747);
/* harmony import */ var _mesh_wavefront_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mesh/wavefront.js */ 9179);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyc2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsa0JBQWtCLENBQUEifQ==

/***/ }),

/***/ 3368:
/*!**************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/debug/stencil/stencil.vert ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nin vec2 attPoint;\n\nvoid main() {\n    gl_Position = vec4(attPoint, 0.0, 1.0);\n}";

/***/ }),

/***/ 3440:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/geometry/geometry.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdGeometry: () => (/* binding */ TgdGeometry)
/* harmony export */ });
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../dataset/index.js */ 5710);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils/index.js */ 3291);



/**
 * Geometry is used to define a mesh.
 * It must hold at least one vec3 attributes
 * for the vertices.
 */
class TgdGeometry {
    static make(options) {
        var _a, _b, _c;
        const definition = {};
        const { count, drawMode, elements, attPosition, attNormal, attUV } = options;
        definition[attPosition.name] = (_a = attPosition.type) !== null && _a !== void 0 ? _a : "vec3";
        if (attNormal)
            definition[attNormal.name] = (_b = attNormal.type) !== null && _b !== void 0 ? _b : "vec3";
        if (attUV)
            definition[attUV.name] = (_c = attUV.type) !== null && _c !== void 0 ? _c : "vec2";
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset(definition);
        dataset.set(attPosition.name, attPosition.data);
        if (attNormal)
            dataset.set(attNormal.name, attNormal.data);
        if (attUV)
            dataset.set(attUV.name, attUV.data);
        return new TgdGeometry({
            dataset,
            count,
            drawMode,
            elements,
        });
    }
    constructor(options) {
        var _a;
        const { dataset, drawMode = "TRIANGLES", attPosition = "POSITION", attNormal = "NORMAL", attUV = "TEXCOORD_0", } = options;
        this._dataset = dataset;
        this.drawMode = drawMode;
        const { elements } = options;
        this.elements = elements;
        this._elementsType = elements
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.webglElementTypeFromTypedArray)(elements)
            : 0;
        this.attPosition = attPosition;
        this.attNormal = attNormal;
        this.attUV = attUV;
        this.count = (_a = elements === null || elements === void 0 ? void 0 : elements.length) !== null && _a !== void 0 ? _a : dataset.count;
        if (options.computeNormalsIfMissing)
            this.computeNormals();
    }
    get dataset() {
        return this._dataset;
    }
    get elementsType() {
        return this._elementsType;
    }
    getElement(index) {
        var _a, _b;
        return (_b = (_a = this.elements) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : -1;
    }
    computeNormals() {
        let normals = [];
        if (this.drawMode === WebGL2RenderingContext.TRIANGLES ||
            this.drawMode === "TRIANGLES") {
            normals = this.computeNormalsForTrianglesDrawMode();
        }
        else {
            console.error("We don't know how to compute normals for this draw mode:", this.drawMode);
            return;
        }
        const attNormalName = this.attNormal;
        this.dataset.addAttributes({
            [attNormalName]: "vec3",
        });
        const values = [];
        for (const [nx, ny, nz] of normals) {
            values.push(nx, ny, nz);
        }
        this.dataset.set(attNormalName, new Float32Array(values));
    }
    computeNormalsForTrianglesDrawMode() {
        const ds = this.dataset;
        const normalsAccumulator = new Map();
        const addNormal = (index, A, B, C) => {
            const norm = computeNormal(A, B, C);
            const item = normalsAccumulator.get(index);
            if (item) {
                item.add(norm);
            }
            else {
                normalsAccumulator.set(index, new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(norm.x, norm.y, norm.z));
            }
        };
        const { get } = ds.getAttribAccessor(this.attPosition);
        const indexes = new Set();
        let indexMax = 0;
        for (let element = 0; element < this.count; element += 3) {
            const index0 = this.getElement(element + 0);
            indexes.add(index0);
            indexMax = Math.max(indexMax, index0);
            const index1 = this.getElement(element + 1);
            indexes.add(index1);
            indexMax = Math.max(indexMax, index1);
            const index2 = this.getElement(element + 2);
            indexes.add(index2);
            indexMax = Math.max(indexMax, index2);
            const A = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(get(index0, 0), get(index0, 1), get(index0, 2));
            const B = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(get(index1, 0), get(index1, 1), get(index1, 2));
            const C = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(get(index2, 0), get(index2, 1), get(index2, 2));
            addNormal(index0, A, B, C);
            addNormal(index1, B, C, A);
            addNormal(index2, C, A, B);
        }
        const normals = [];
        for (let index = 0; index <= indexMax; index++) {
            const item = normalsAccumulator.get(index);
            if (item) {
                item.normalize();
                normals.push(item);
            }
            else {
                normals.push(new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3());
            }
        }
        return normals;
    }
}
function computeNormal(A, B, C) {
    const AB = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(B).subtract(A);
    const AC = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(C).subtract(A);
    return AB.cross(AC).normalize();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VvbWV0cnkvZ2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBd0MsTUFBTSxjQUFjLENBQUE7QUFFL0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxZQUFZLENBQUE7QUF1QzNEOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sV0FBVztJQWNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBNEI7O1FBQzNDLE1BQU0sVUFBVSxHQUF5QixFQUFFLENBQUE7UUFDM0MsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQzlELE9BQU8sQ0FBQTtRQUNYLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBQSxXQUFXLENBQUMsSUFBSSxtQ0FBSSxNQUFNLENBQUE7UUFDekQsSUFBSSxTQUFTO1lBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFBLFNBQVMsQ0FBQyxJQUFJLG1DQUFJLE1BQU0sQ0FBQTtRQUNwRSxJQUFJLEtBQUs7WUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQUEsS0FBSyxDQUFDLElBQUksbUNBQUksTUFBTSxDQUFBO1FBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0MsSUFBSSxTQUFTO1lBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FB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R0FBRyxDQUFDLENBQUMsQ0FBQTtZQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ25CLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ25CLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNyQyxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FDakIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFDZCxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUNkLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQ2pCLENBQUE7WUFDRCxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FDakIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFDZCxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUNkLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQ2pCLENBQUE7WUFDRCxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FDakIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFDZCxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUNkLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQ2pCLENBQUE7WUFDRCxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDMUIsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQzFCLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM5QixDQUFDO1FBQ0QsTUFBTSxPQUFPLEdBQWMsRUFBRSxDQUFBO1FBQzdCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUM3QyxNQUFNLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDMUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDUCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7Z0JBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDdEIsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1lBQy9CLENBQUM7UUFDTCxDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUE7SUFDbEIsQ0FBQztDQUNKO0FBRUQsU0FBUyxhQUFhLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVO0lBQ3JELE1BQU0sRUFBRSxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNyQyxNQUFNLEVBQUUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFBO0FBQ25DLENBQUMifQ==

/***/ }),

/***/ 3627:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/shader/fragment.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdShaderFragment: () => (/* binding */ TgdShaderFragment)
/* harmony export */ });
/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code.js */ 3298);

/**
 * Helper to wirte the code of a fragment Shader.
 * @see https://registry.khronos.org/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf
 */
class TgdShaderFragment {
    constructor({ precision = "highp", uniforms = {}, outputs = {
        FragColor: "vec4",
    }, varying = {}, functions = {}, mainCode = ["FragColor = vec4(1, 0.667, 0, 1);"], } = {}) {
        this.precision = "mediump";
        this.precision = precision;
        this.uniforms = uniforms;
        this.outputs = outputs;
        this.varying = varying;
        this.functions = functions;
        this.mainCode = mainCode;
    }
    get code() {
        return (0,_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)([
            `#version 300 es`,
            `precision ${this.precision} float;`,
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.uniforms, "uniform"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.varying, "in"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.outputs, "out"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandFunctions)(this.functions),
            "",
            `void main() {`,
            this.mainCode,
            "}",
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhZ21lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhZGVyL2ZyYWdtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFJSCxlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLGVBQWUsR0FDbEIsTUFBTSxRQUFRLENBQUE7QUFFZjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBZTFCLFlBQVksRUFDUixTQUFTLEdBQUcsT0FBTyxFQUNuQixRQUFRLEdBQUcsRUFBRSxFQUNiLE9BQU8sR0FBRztRQUNOLFNBQVMsRUFBRSxNQUFNO0tBQ3BCLEVBQ0QsT0FBTyxHQUFHLEVBQUUsRUFDWixTQUFTLEdBQUcsRUFBRSxFQUNkLFFBQVEsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLE1BUS9DLEVBQUU7UUE5QkEsY0FBUyxHQUFpQyxTQUFTLENBQUE7UUErQnRELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO0lBQzVCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLGdCQUFnQixDQUFDO1lBQ3BCLGlCQUFpQjtZQUNqQixhQUFhLElBQUksQ0FBQyxTQUFTLFNBQVM7WUFDcEMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7WUFDNUMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7WUFDdEMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7WUFDdkMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNsQyxFQUFFO1lBQ0YsZUFBZTtZQUNmLElBQUksQ0FBQyxRQUFRO1lBQ2IsR0FBRztTQUNOLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 3651:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/webgl/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglTextureCreate: () => (/* reexport safe */ _texture_index_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureCreate),
/* harmony export */   webglTextureCreate2DFromArray: () => (/* reexport safe */ _texture_index_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureCreate2DFromArray),
/* harmony export */   webglTextureParametersSet: () => (/* reexport safe */ _texture_index_js__WEBPACK_IMPORTED_MODULE_0__.webglTextureParametersSet)
/* harmony export */ });
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture/index.js */ 407);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2ViZ2wvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxXQUFXLENBQUEifQ==

/***/ }),

/***/ 3672:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/filter/filter.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilter: () => (/* binding */ TgdFilter)
/* harmony export */ });
/**
 * Define the shader to be used in a filter.
 *
 * A filter is mostly a fragment shader working on a texture.
 *
 * Always available varyings:
 *  * `vec2 varUV`
 *
 * Always available uniforms:
 *  * `sampler2D texSource`: input texture.
 *  * `float uniWidth`: width of the texture in pixels.
 *  * `float uniHeight`: height of the texture in pixels.
 */
class TgdFilter {
    constructor(options = {}) {
        /**
         * If you need more uniforms, define them here.
         * And set the values in the `setUniforms()` method.
         */
        this.uniforms = {};
        /**
         * The code of a `vec4 applyColor()` function.
         * Must return a `vec4` color.
         */
        this.fragmentShaderCode = [
            "vec4 color = texture(uniTexture, varUV);",
            "return color;",
        ];
        this.extraFunctions = {};
        this.setUniforms = (_parameters) => { };
        const { uniforms, fragmentShaderCode, extraFunctions, setUniforms } = options;
        if (uniforms)
            this.uniforms = uniforms;
        if (fragmentShaderCode)
            this.fragmentShaderCode = fragmentShaderCode;
        if (extraFunctions)
            this.extraFunctions = extraFunctions;
        if (setUniforms)
            this.setUniforms = setUniforms;
    }
    /** Cleanup function. */
    delete() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpbHRlci9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxPQUFPLFNBQVM7SUFzQmxCLFlBQVksVUFBcUMsRUFBRTtRQXJCbkQ7OztXQUdHO1FBQ2EsYUFBUSxHQUF5QyxFQUFFLENBQUE7UUFFbkU7OztXQUdHO1FBQ2EsdUJBQWtCLEdBQWdCO1lBQzlDLDBDQUEwQztZQUMxQyxlQUFlO1NBQ2xCLENBQUE7UUFFZSxtQkFBYyxHQUFtQyxFQUFFLENBQUE7UUFFbkQsZ0JBQVcsR0FBRyxDQUMxQixXQUEyQyxFQUN2QyxFQUFFLEdBQUUsQ0FBQyxDQUFBO1FBR1QsTUFBTSxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLEdBQy9ELE9BQU8sQ0FBQTtRQUNYLElBQUksUUFBUTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3RDLElBQUksa0JBQWtCO1lBQUUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFBO1FBQ3BFLElBQUksY0FBYztZQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFBO1FBQ3hELElBQUksV0FBVztZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO0lBQ25ELENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsTUFBTSxLQUFJLENBQUM7Q0FDZCJ9

/***/ }),

/***/ 3709:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/color/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdColor: () => (/* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_0__.TgdColor)
/* harmony export */ });
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ 8434);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29sb3IvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 3722:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/debug/debug.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debug: () => (/* binding */ debug),
/* harmony export */   highlightEnum: () => (/* binding */ highlightEnum)
/* harmony export */ });
/* harmony import */ var _utils_webgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/webgl.js */ 8942);

function debug(code, classNames = {}) {
    const css = [];
    const txt = stringify(code, classNames, css);
    console.log(txt, ...css);
}
function highlightEnum(value) {
    const txt = typeof value === "number" ? (0,_utils_webgl_js__WEBPACK_IMPORTED_MODULE_0__.webglLookup)(value) : value;
    return ["gl.", { cls: "enum", txt }, { cls: "code" }];
}
const CLASSNAMES = {
    code: "font-family:monospace;font-size:80%;background:#000;color:#eee;padding:0;margin:0;border-radius:0;",
    bold: "font-weight:bold",
    enum: "font-weight:bold;color:#4af",
};
function stringify(code, classNames, css) {
    var _a, _b, _c, _d;
    if (typeof code === "boolean") {
        css.push(`background:${code ? "#0f0" : "#f77"};font-size:80%;color:#000;padding:0 .5em;border-radius:999vmax`, CLASSNAMES.code);
        return `%c${code ? "true" : "false"}%c`;
    }
    if (typeof code === "string")
        return code;
    if (Array.isArray(code)) {
        return code.map(item => stringify(item, classNames, css)).join("");
    }
    const style = (_a = classNames[code.cls]) !== null && _a !== void 0 ? _a : CLASSNAMES[code.cls];
    if (!style)
        return (_b = code.txt) !== null && _b !== void 0 ? _b : "";
    css.push(`${(_c = classNames.code) !== null && _c !== void 0 ? _c : CLASSNAMES.code};${style}`);
    return `%c${(_d = code.txt) !== null && _d !== void 0 ? _d : ""}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVidWcvZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBUTlDLE1BQU0sVUFBVSxLQUFLLENBQ2pCLElBQXFCLEVBQ3JCLGFBQXFDLEVBQUU7SUFFdkMsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUE7QUFDNUIsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQ3pCLEtBQTRDO0lBRTVDLE1BQU0sR0FBRyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFDbEUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUN6RCxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQTJCO0lBQ3ZDLElBQUksRUFBRSxvR0FBb0c7SUFDMUcsSUFBSSxFQUFFLGtCQUFrQjtJQUN4QixJQUFJLEVBQUUsNkJBQTZCO0NBQ3RDLENBQUE7QUFFRCxTQUFTLFNBQVMsQ0FDZCxJQUFxQixFQUNyQixVQUFrQyxFQUNsQyxHQUFhOztJQUViLElBQUksT0FBTyxJQUFJLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLElBQUksQ0FDSixjQUNJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUNwQixnRUFBZ0UsRUFDaEUsVUFBVSxDQUFDLElBQUksQ0FDbEIsQ0FBQTtRQUNELE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUE7SUFDM0MsQ0FBQztJQUVELElBQUksT0FBTyxJQUFJLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFBO0lBRXpDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3RFLENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxNQUFBLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG1DQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDMUQsSUFBSSxDQUFDLEtBQUs7UUFBRSxPQUFPLE1BQUEsSUFBSSxDQUFDLEdBQUcsbUNBQUksRUFBRSxDQUFBO0lBRWpDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFBLFVBQVUsQ0FBQyxJQUFJLG1DQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMxRCxPQUFPLEtBQUssTUFBQSxJQUFJLENBQUMsR0FBRyxtQ0FBSSxFQUFFLEVBQUUsQ0FBQTtBQUNoQyxDQUFDIn0=

/***/ }),

/***/ 3768:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/utils/bbox.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdComputeBoundingBox3D: () => (/* binding */ tgdComputeBoundingBox3D)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);

/**
 * Compute the bounding box of a Dataset.
 * @param dataset
 * @param attPositionName Name of an atttribute of type `vec3` holding the vertices positions.
 * @param minVector If specified, it will hold the min bounding box value.
 * @param maxVector If specified, it will hold the max bounding box value.
 * @returns
 */
function tgdComputeBoundingBox3D(dataset, attPositionName = "POSITION", minVector, maxVector) {
    const { get } = dataset
        .assertAttribType(attPositionName, "vec3", "vec4")
        .getAttribAccessor(attPositionName);
    const min = minVector !== null && minVector !== void 0 ? minVector : new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3();
    min.reset(get(0, 0), get(0, 1), get(0, 2));
    const max = maxVector !== null && maxVector !== void 0 ? maxVector : new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3();
    max.from(min);
    for (let index = 1; index < dataset.count; index++) {
        const x = get(index, 0);
        const y = get(index, 1);
        const z = get(index, 2);
        min.x = Math.min(min.x, x);
        max.x = Math.max(max.x, x);
        min.y = Math.min(min.y, y);
        max.y = Math.max(max.y, y);
        min.z = Math.min(min.z, z);
        max.z = Math.max(max.z, z);
    }
    return { min, max };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmJveC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9iYm94LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbkM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSx1QkFBdUIsQ0FDbkMsT0FBNkIsRUFDN0IsZUFBZSxHQUFHLFVBQVUsRUFDNUIsU0FBbUIsRUFDbkIsU0FBbUI7SUFLbkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU87U0FDbEIsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDakQsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDdkMsTUFBTSxHQUFHLEdBQUcsU0FBUyxhQUFULFNBQVMsY0FBVCxTQUFTLEdBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQUN0QyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDMUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxhQUFULFNBQVMsY0FBVCxTQUFTLEdBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUNqRCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM5QixDQUFDO0lBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUN2QixDQUFDIn0=

/***/ }),

/***/ 3884:
/*!***********************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/normals/normals.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMeshNormals: () => (/* binding */ TgdPainterMeshNormals)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../painter.js */ 2362);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../program/index.js */ 9974);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../vao/index.js */ 9856);
/* harmony import */ var _shader_frag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shader.frag */ 8312);
/* harmony import */ var _shader_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shader.vert */ 6469);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../utils/index.js */ 3291);






/**
 * Render a totaly opaque black and white mesh
 * with ghost material.
 */
class TgdPainterMeshNormals extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context, geometry) {
        super();
        this.context = context;
        this.paint = () => {
            const { context, prg } = this;
            const { gl, camera } = context;
            gl.enable(gl.CULL_FACE);
            gl.cullFace(gl.BACK);
            prg.use();
            prg.uniformMatrix4fv("uniModelViewMatrix", camera.matrixModelView);
            prg.uniformMatrix4fv("uniProjectionMatrix", camera.matrixProjection);
            this.vao.bind();
            gl.drawElements(gl.TRIANGLES, this.elementsCount, this.elementsType, 0);
            this.vao.unbind();
        };
        const { dataset, count, attNormal, elements } = geometry;
        if (!attNormal) {
            throw new Error("This mesh has no normal!");
        }
        const prg = new _program_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdProgram(context.gl, {
            vert: _shader_vert__WEBPACK_IMPORTED_MODULE_4__,
            frag: _shader_frag__WEBPACK_IMPORTED_MODULE_3__,
        });
        this.prg = prg;
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, prg, [dataset], elements);
        this.elementsType = elements
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_5__.webglElementTypeFromTypedArray)(elements)
            : -1;
        this.elementsCount = count;
    }
    delete() {
        this.vao.delete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWludGVyL21lc2gvbm9ybWFscy9ub3JtYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFekMsT0FBTyxJQUFJLE1BQU0sZUFBZSxDQUFBO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLGVBQWUsQ0FBQTtBQUNoQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFHM0Q7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQVU7SUFNakQsWUFBNkIsT0FBbUIsRUFBRSxRQUFxQjtRQUNuRSxLQUFLLEVBQUUsQ0FBQTtRQURrQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBbUJoQyxVQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFBO1lBQzdCLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFBO1lBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ3ZCLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3BCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNULEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDbEUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQ3BFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDZixFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQ3ZFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDckIsQ0FBQyxDQUFBO1FBNUJHLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxRQUFRLENBQUE7UUFDeEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO1FBQy9DLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNuRSxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLFFBQVEsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDUixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQTtJQUM5QixDQUFDO0lBZUQsTUFBTTtRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDckIsQ0FBQztDQUNKIn0=

/***/ }),

/***/ 3892:
/*!*********************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/normals/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMeshNormals: () => (/* reexport safe */ _normals_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterMeshNormals)
/* harmony export */ });
/* harmony import */ var _normals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normals.js */ 3884);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGFpbnRlci9tZXNoL25vcm1hbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxXQUFXLENBQUEifQ==

/***/ }),

/***/ 4004:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/buffer/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdBuffer: () => (/* reexport safe */ _buffer_js__WEBPACK_IMPORTED_MODULE_0__.TgdBuffer)
/* harmony export */ });
/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer.js */ 8484);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVmZmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsVUFBVSxDQUFBIn0=

/***/ }),

/***/ 4010:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/types/webgl.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebglEnumBlendEquation: () => (/* binding */ WebglEnumBlendEquation),
/* harmony export */   WebglEnumBlendFunction: () => (/* binding */ WebglEnumBlendFunction),
/* harmony export */   WebglEnumCullFace: () => (/* binding */ WebglEnumCullFace),
/* harmony export */   WebglEnumDepthFunction: () => (/* binding */ WebglEnumDepthFunction),
/* harmony export */   WebglEnumStencilFunction: () => (/* binding */ WebglEnumStencilFunction),
/* harmony export */   WebglEnumStencilOperation: () => (/* binding */ WebglEnumStencilOperation),
/* harmony export */   WebglEnumTex2DInternalFormat: () => (/* binding */ WebglEnumTex2DInternalFormat),
/* harmony export */   isWebglImage: () => (/* binding */ isWebglImage)
/* harmony export */ });
function isWebglImage(data) {
    return (data instanceof ImageData ||
        data instanceof HTMLImageElement ||
        data instanceof HTMLCanvasElement ||
        data instanceof HTMLVideoElement ||
        data instanceof ImageBitmap);
}
var WebglEnumDepthFunction;
(function (WebglEnumDepthFunction) {
    /** never pass */
    WebglEnumDepthFunction[WebglEnumDepthFunction["NEVER"] = WebGL2RenderingContext.NEVER] = "NEVER";
    /** pass if the incoming value is less than the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["LESS"] = WebGL2RenderingContext.LESS] = "LESS";
    /** pass if the incoming value equals the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["EQUAL"] = WebGL2RenderingContext.EQUAL] = "EQUAL";
    /** pass if the incoming value is less than or equal to the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["LEQUAL"] = WebGL2RenderingContext.LEQUAL] = "LEQUAL";
    /** pass if the incoming value is greater than the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["GREATER"] = WebGL2RenderingContext.GREATER] = "GREATER";
    /** pass if the incoming value is not equal to the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["NOTEQUAL"] = WebGL2RenderingContext.NOTEQUAL] = "NOTEQUAL";
    /** pass if the incoming value is greater than or equal to the depth buffer value */
    WebglEnumDepthFunction[WebglEnumDepthFunction["GEQUAL"] = WebGL2RenderingContext.GEQUAL] = "GEQUAL";
    /** always pass */
    WebglEnumDepthFunction[WebglEnumDepthFunction["ALWAYS"] = WebGL2RenderingContext.ALWAYS] = "ALWAYS";
})(WebglEnumDepthFunction || (WebglEnumDepthFunction = {}));
var WebglEnumBlendEquation;
(function (WebglEnumBlendEquation) {
    /**  source + destination (default value) */
    WebglEnumBlendEquation[WebglEnumBlendEquation["FUNC_ADD"] = WebGL2RenderingContext.FUNC_ADD] = "FUNC_ADD";
    /**  source - destination */
    WebglEnumBlendEquation[WebglEnumBlendEquation["FUNC_SUBTRACT"] = WebGL2RenderingContext.FUNC_SUBTRACT] = "FUNC_SUBTRACT";
    /**  destination - source */
    WebglEnumBlendEquation[WebglEnumBlendEquation["FUNC_REVERSE_SUBTRACT"] = WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT] = "FUNC_REVERSE_SUBTRACT";
    /**  Minimum of source and destination */
    WebglEnumBlendEquation[WebglEnumBlendEquation["MIN"] = WebGL2RenderingContext.MIN] = "MIN";
    /**  Maximum of source and destination */
    WebglEnumBlendEquation[WebglEnumBlendEquation["MAX"] = WebGL2RenderingContext.MAX] = "MAX";
})(WebglEnumBlendEquation || (WebglEnumBlendEquation = {}));
var WebglEnumBlendFunction;
(function (WebglEnumBlendFunction) {
    /**
     * 0,0,0,0
     *
     * Multiplies all colors by 0.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ZERO"] = WebGL2RenderingContext.ZERO] = "ZERO";
    /**
     * 1,1,1,1
     *
     * Multiplies all colors by 1.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE"] = WebGL2RenderingContext.ONE] = "ONE";
    /**
     * RS, GS, BS, AS
     *
     * Multiplies all colors by the source colors.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["SRC_COLOR"] = WebGL2RenderingContext.SRC_COLOR] = "SRC_COLOR";
    /**
     * 1-RS, 1-GS, 1-BS, 1-AS
     *
     * Multiplies all colors by 1 minus each source color.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_SRC_COLOR"] = WebGL2RenderingContext.ONE_MINUS_SRC_COLOR] = "ONE_MINUS_SRC_COLOR";
    /**
     * RD, GD, BD, AD
     *
     * Multiplies all colors by the destination color.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["DST_COLOR"] = WebGL2RenderingContext.DST_COLOR] = "DST_COLOR";
    /**
     * 1-RD, 1-GD, 1-BD, 1-AD
     *
     * Multiplies all colors by 1 minus each destination color.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_DST_COLOR"] = WebGL2RenderingContext.ONE_MINUS_DST_COLOR] = "ONE_MINUS_DST_COLOR";
    /**
     * AS, AS, AS, AS
     *
     * Multiplies all colors by the source alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["SRC_ALPHA"] = WebGL2RenderingContext.SRC_ALPHA] = "SRC_ALPHA";
    /**
     * 1-AS, 1-AS, 1-AS, 1-AS
     *
     * Multiplies all colors by 1 minus the source alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_SRC_ALPHA"] = WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA] = "ONE_MINUS_SRC_ALPHA";
    /**
     * AD, AD, AD, AD
     *
     * Multiplies all colors by the destination alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["DST_ALPHA"] = WebGL2RenderingContext.DST_ALPHA] = "DST_ALPHA";
    /**
     * 1-AD, 1-AD, 1-AD, 1-AD
     *
     * Multiplies all colors by 1 minus the destination alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_DST_ALPHA"] = WebGL2RenderingContext.ONE_MINUS_DST_ALPHA] = "ONE_MINUS_DST_ALPHA";
    /**
     * RC, GC, BC, AC
     *
     * Multiplies all colors by a constant color.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["CONSTANT_COLOR"] = WebGL2RenderingContext.CONSTANT_COLOR] = "CONSTANT_COLOR";
    /**
     * 1-RC, 1-GC, 1-BC, 1-AC
     *
     * Multiplies all colors by 1 minus a constant color.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_CONSTANT_COLOR"] = WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR] = "ONE_MINUS_CONSTANT_COLOR";
    /**
     * AC, AC, AC, AC
     *
     * Multiplies all colors by a constant alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["CONSTANT_ALPHA"] = WebGL2RenderingContext.CONSTANT_ALPHA] = "CONSTANT_ALPHA";
    /**
     * 1-AC, 1-AC, 1-AC, 1-AC
     *
     * Multiplies all colors by 1 minus a constant alpha value.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["ONE_MINUS_CONSTANT_ALPHA"] = WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA] = "ONE_MINUS_CONSTANT_ALPHA";
    /**
     * min(AS, 1 - AD), min(AS, 1 - AD), min(AS, 1 - AD), 1
     *
     * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value. The alpha value is multiplied by 1.
     */
    WebglEnumBlendFunction[WebglEnumBlendFunction["SRC_ALPHA_SATURATE"] = WebGL2RenderingContext.SRC_ALPHA_SATURATE] = "SRC_ALPHA_SATURATE";
})(WebglEnumBlendFunction || (WebglEnumBlendFunction = {}));
var WebglEnumStencilFunction;
(function (WebglEnumStencilFunction) {
    /** Never pass. */
    WebglEnumStencilFunction[WebglEnumStencilFunction["NEVER"] = WebGL2RenderingContext.NEVER] = "NEVER";
    /** Pass if (ref & mask) < (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["LESS"] = WebGL2RenderingContext.LESS] = "LESS";
    /** Pass if (ref & mask) = (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["EQUAL"] = WebGL2RenderingContext.EQUAL] = "EQUAL";
    /** Pass if (ref & mask) <= (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["LEQUAL"] = WebGL2RenderingContext.LEQUAL] = "LEQUAL";
    /** Pass if (ref & mask) > (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["GREATER"] = WebGL2RenderingContext.GREATER] = "GREATER";
    /** Pass if (ref & mask) !== (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["NOTEQUAL"] = WebGL2RenderingContext.NOTEQUAL] = "NOTEQUAL";
    /** Pass if (ref & mask) >= (stencil & mask). */
    WebglEnumStencilFunction[WebglEnumStencilFunction["GEQUAL"] = WebGL2RenderingContext.GEQUAL] = "GEQUAL";
    /** Always pass. */
    WebglEnumStencilFunction[WebglEnumStencilFunction["ALWAYS"] = WebGL2RenderingContext.ALWAYS] = "ALWAYS";
})(WebglEnumStencilFunction || (WebglEnumStencilFunction = {}));
var WebglEnumStencilOperation;
(function (WebglEnumStencilOperation) {
    /** Keeps the current value. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["KEEP"] = WebGL2RenderingContext.KEEP] = "KEEP";
    /** Sets the stencil buffer value to 0. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["ZERO"] = WebGL2RenderingContext.ZERO] = "ZERO";
    /** Sets the stencil buffer value to the reference value as specified by WebGLRenderingContext.stencilFunc(). */
    WebglEnumStencilOperation[WebglEnumStencilOperation["REPLACE"] = WebGL2RenderingContext.REPLACE] = "REPLACE";
    /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["INCR"] = WebGL2RenderingContext.INCR] = "INCR";
    /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["INCR_WRAP"] = WebGL2RenderingContext.INCR_WRAP] = "INCR_WRAP";
    /** Decrements the current stencil buffer value. Clamps to 0. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["DECR"] = WebGL2RenderingContext.DECR] = "DECR";
    /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["DECR_WRAP"] = WebGL2RenderingContext.DECR_WRAP] = "DECR_WRAP";
    /** Inverts the current stencil buffer value bitwise. */
    WebglEnumStencilOperation[WebglEnumStencilOperation["INVERT"] = WebGL2RenderingContext.INVERT] = "INVERT";
})(WebglEnumStencilOperation || (WebglEnumStencilOperation = {}));
var WebglEnumCullFace;
(function (WebglEnumCullFace) {
    WebglEnumCullFace[WebglEnumCullFace["FRONT"] = WebGL2RenderingContext.FRONT] = "FRONT";
    WebglEnumCullFace[WebglEnumCullFace["BACK"] = WebGL2RenderingContext.BACK] = "BACK";
    WebglEnumCullFace[WebglEnumCullFace["FRONT_AND_BACK"] = WebGL2RenderingContext.FRONT_AND_BACK] = "FRONT_AND_BACK";
})(WebglEnumCullFace || (WebglEnumCullFace = {}));
var WebglEnumTex2DInternalFormat;
(function (WebglEnumTex2DInternalFormat) {
    /** : Discards the red, green and blue components and reads the alpha component. */
    WebglEnumTex2DInternalFormat[WebglEnumTex2DInternalFormat["ALPHA"] = WebGL2RenderingContext.ALPHA] = "ALPHA";
    /** : Discards the alpha components and reads the red, green and blue components. */
    WebglEnumTex2DInternalFormat[WebglEnumTex2DInternalFormat["RGB"] = WebGL2RenderingContext.RGB] = "RGB";
    /** : Red, green, blue and alpha components are read from the color buffer. */
    WebglEnumTex2DInternalFormat[WebglEnumTex2DInternalFormat["RGBA"] = WebGL2RenderingContext.RGBA] = "RGBA";
    /** : Each color component is a luminance component, alpha is 1.0. */
    WebglEnumTex2DInternalFormat[WebglEnumTex2DInternalFormat["LUMINANCE"] = WebGL2RenderingContext.LUMINANCE] = "LUMINANCE";
    /** : Each component is a luminance/alpha component. */
    WebglEnumTex2DInternalFormat[WebglEnumTex2DInternalFormat["LUMINANCE_ALPHA"] = WebGL2RenderingContext.LUMINANCE_ALPHA] = "LUMINANCE_ALPHA";
})(WebglEnumTex2DInternalFormat || (WebglEnumTex2DInternalFormat = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvd2ViZ2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOENBLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBYTtJQUN0QyxPQUFPLENBQ0gsSUFBSSxZQUFZLFNBQVM7UUFDekIsSUFBSSxZQUFZLGdCQUFnQjtRQUNoQyxJQUFJLFlBQVksaUJBQWlCO1FBQ2pDLElBQUksWUFBWSxnQkFBZ0I7UUFDaEMsSUFBSSxZQUFZLFdBQVcsQ0FDOUIsQ0FBQTtBQUNMLENBQUM7QUFvQkQsTUFBTSxDQUFOLElBQVksc0JBaUJYO0FBakJELFdBQVksc0JBQXNCO0lBQzlCLGlCQUFpQjtJQUNqQix5REFBUSxzQkFBc0IsQ0FBQyxLQUFLLFdBQUEsQ0FBQTtJQUNwQyxxRUFBcUU7SUFDckUsd0RBQU8sc0JBQXNCLENBQUMsSUFBSSxVQUFBLENBQUE7SUFDbEMsK0RBQStEO0lBQy9ELHlEQUFRLHNCQUFzQixDQUFDLEtBQUssV0FBQSxDQUFBO0lBQ3BDLGlGQUFpRjtJQUNqRiwwREFBUyxzQkFBc0IsQ0FBQyxNQUFNLFlBQUEsQ0FBQTtJQUN0Qyx3RUFBd0U7SUFDeEUsMkRBQVUsc0JBQXNCLENBQUMsT0FBTyxhQUFBLENBQUE7SUFDeEMsd0VBQXdFO0lBQ3hFLDREQUFXLHNCQUFzQixDQUFDLFFBQVEsY0FBQSxDQUFBO0lBQzFDLG9GQUFvRjtJQUNwRiwwREFBUyxzQkFBc0IsQ0FBQyxNQUFNLFlBQUEsQ0FBQTtJQUN0QyxrQkFBa0I7SUFDbEIsMERBQVMsc0JBQXNCLENBQUMsTUFBTSxZQUFBLENBQUE7QUFDMUMsQ0FBQyxFQWpCVyxzQkFBc0IsS0FBdEIsc0JBQXNCLFFBaUJqQztBQWNELE1BQU0sQ0FBTixJQUFZLHNCQVdYO0FBWEQsV0FBWSxzQkFBc0I7SUFDOUIsNENBQTRDO0lBQzVDLDREQUFXLHNCQUFzQixDQUFDLFFBQVEsY0FBQSxDQUFBO0lBQzFDLDRCQUE0QjtJQUM1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

/***/ }),

/***/ 4016:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/utils/framebuffer.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglCreateFramebuffer: () => (/* binding */ webglCreateFramebuffer)
/* harmony export */ });
function webglCreateFramebuffer(gl) {
    const fb = gl.createFramebuffer();
    if (!fb)
        throw new Error("Unable to create a WebGLFramebuffer!");
    return fb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVidWZmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvZnJhbWVidWZmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLHNCQUFzQixDQUNsQyxFQUEwQjtJQUUxQixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUNqQyxJQUFJLENBQUMsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtJQUVoRSxPQUFPLEVBQUUsQ0FBQTtBQUNiLENBQUMifQ==

/***/ }),

/***/ 4049:
/*!******************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background-with-depth/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterBackgroundWithDepth: () => (/* reexport safe */ _background_with_depth_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterBackgroundWithDepth)
/* harmony export */ });
/* harmony import */ var _background_with_depth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background-with-depth.js */ 858);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9iYWNrZ3JvdW5kLXdpdGgtZGVwdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyx5QkFBeUIsQ0FBQSJ9

/***/ }),

/***/ 4117:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/input/keyboard.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdInputKeyboardImpl: () => (/* binding */ TgdInputKeyboardImpl)
/* harmony export */ });
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../event/index.js */ 5018);

class TgdInputKeyboardImpl {
    constructor() {
        this.eventKeyPress = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this.keysDown = new Set();
        this.keysUp = new Set();
        this.attached = false;
        this.handleKeyDown = (event) => {
            this.keysDown.add(event.key);
            this.keysUp.delete(event.key);
        };
        this.handleKeyUp = (event) => {
            this.keysDown.delete(event.key);
            this.keysUp.add(event.key);
            this.eventKeyPress.dispatch(event);
        };
        document.addEventListener("keydown", this.handleKeyDown);
        document.addEventListener("keyup", this.handleKeyUp);
        this.attached = true;
    }
    detach() {
        if (!this.attached)
            return;
        document.removeEventListener("keydown", this.handleKeyDown);
        document.removeEventListener("keyup", this.handleKeyUp);
        this.attached = false;
    }
    isUp(...keys) {
        return !this.isDown(...keys);
    }
    isDown(...keys) {
        for (const key of keys) {
            if (!this.keysDown.has(key))
                return false;
        }
        return true;
    }
    hasClicked(key) {
        if (this.keysUp.has(key)) {
            this.keysUp.delete(key);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5wdXQva2V5Ym9hcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVuQyxNQUFNLE9BQU8sb0JBQW9CO0lBTzdCO1FBTmdCLGtCQUFhLEdBQUcsSUFBSSxRQUFRLEVBQWlCLENBQUE7UUFFNUMsYUFBUSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7UUFDNUIsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUE7UUFDbkMsYUFBUSxHQUFHLEtBQUssQ0FBQTtRQW1DUCxrQkFBYSxHQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFO1lBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakMsQ0FBQyxDQUFBO1FBRWdCLGdCQUFXLEdBQUcsQ0FBQyxLQUFvQixFQUFFLEVBQUU7WUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN0QyxDQUFDLENBQUE7UUF6Q0csUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDeEQsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFDeEIsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFNO1FBRTFCLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNELFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO0lBQ3pCLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBRyxJQUFjO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQWM7UUFDcEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUFFLE9BQU8sS0FBSyxDQUFBO1FBQzdDLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBVztRQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDdkIsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztDQVlKIn0=

/***/ }),

/***/ 4143:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/input/pointer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdInputPointerImpl: () => (/* binding */ TgdInputPointerImpl)
/* harmony export */ });
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../event/index.js */ 5018);

const MOUSE_BUTTON_RIGHT = 2;
class TgdInputPointerImpl {
    constructor(canvas) {
        this.canvas = canvas;
        this.eventTap = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this.eventMoveStart = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this.eventMove = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this.eventMoveEnd = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        this.eventZoom = new _event_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent();
        /**
         * This is a tap only of the pointer touched for less that
         * `tapDelay` milliseconds.
         */
        this.tapDelay = 300;
        this.controlKeys = {
            altKey: false,
            ctrlKey: false,
            metaKey: false,
            shiftKey: false,
        };
        this.start = {
            x: 0,
            y: 0,
            t: 0,
            fingersCount: 1,
        };
        this.current = {
            x: 0,
            y: 0,
            t: 0,
            fingersCount: 1,
        };
        this.previous = {
            x: 0,
            y: 0,
            t: 0,
            fingersCount: 1,
        };
        /**
         * If not null, the pointer is touching.
         */
        this.pointerEvent = null;
        this.handleContextMenu = (event) => {
            event.preventDefault();
        };
        this.handleCanvasWheel = (event) => {
            let delta = event.deltaX + event.deltaY + event.deltaZ;
            delta = delta > 0 ? 1 : -1;
            this.eventZoom.dispatch(Object.assign({ current: this.getPoint(event), direction: delta, preventDefault: () => event.preventDefault() }, this.controlKeys));
        };
        this.handlePointerDown = (event) => {
            if (!event.isPrimary)
                return;
            this.canvas.setPointerCapture(event.pointerId);
            event.preventDefault();
            event.stopPropagation();
            this.pointerEvent = event;
            const point = this.getPoint(event);
            this.start = this.current = this.previous = point;
            this.eventMoveStart.dispatch(Object.assign({ start: point, current: point, previous: point }, this.controlKeys));
        };
        this.handlePointerMove = (event) => {
            if (!event.isPrimary || !this.pointerEvent || !this.canvas)
                return;
            this.previous = this.current;
            this.current = this.getPoint(event);
            this.eventMove.dispatch(Object.assign({ start: this.start, current: this.current, previous: this.previous }, this.controlKeys));
        };
        this.handlePointerUp = (event) => {
            if (!event.isPrimary || !this.pointerEvent)
                return;
            event.preventDefault();
            this.current = this.getPoint(event);
            this.eventMoveEnd.dispatch(Object.assign({ start: this.start, current: this.current, previous: this.previous }, this.controlKeys));
            this.pointerEvent = null;
            // Tap event.
            if (event.timeStamp - this.start.t < this.tapDelay) {
                this.eventTap.dispatch(Object.assign(Object.assign({}, this.start), this.controlKeys));
            }
        };
        canvas.addEventListener("pointerdown", this.handlePointerDown, true);
        canvas.addEventListener("wheel", this.handleCanvasWheel);
        canvas.addEventListener("contextmenu", this.handleContextMenu);
        canvas.addEventListener("pointermove", this.handlePointerMove);
        canvas.addEventListener("pointerup", this.handlePointerUp);
    }
    isTouching(hitTest) {
        if (!this.pointerEvent)
            return false;
        if (!hitTest)
            return true;
        return hitTest(this.current);
    }
    detach() {
        const { canvas } = this;
        if (!canvas)
            return;
        canvas.removeEventListener("pointerdown", this.handlePointerDown);
        canvas.removeEventListener("wheel", this.handleCanvasWheel);
        canvas.removeEventListener("contextmenu", this.handleContextMenu);
        canvas.removeEventListener("pointermove", this.handlePointerMove);
        canvas.removeEventListener("pointerup", this.handlePointerUp);
    }
    getPoint(event) {
        this.controlKeys = {
            altKey: event.altKey || event.buttons === MOUSE_BUTTON_RIGHT,
            ctrlKey: event.ctrlKey,
            metaKey: event.metaKey,
            shiftKey: event.shiftKey,
        };
        const { left, top, width, height } = this.canvas.getBoundingClientRect();
        const x = 2 * ((event.clientX - left) / width - 0.5);
        const y = -2 * ((event.clientY - top) / height - 0.5);
        return { x, y, t: event.timeStamp, fingersCount: 1 };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnB1dC9wb2ludGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFTckMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUE7QUFFNUIsTUFBTSxPQUFPLG1CQUFtQjtJQXlDNUIsWUFBNkIsTUFBeUI7UUFBekIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUF4QzdDLGFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBcUMsQ0FBQTtRQUM1RCxtQkFBYyxHQUFHLElBQUksUUFBUSxFQUFzQyxDQUFBO1FBQ25FLGNBQVMsR0FBRyxJQUFJLFFBQVEsRUFBc0MsQ0FBQTtRQUM5RCxpQkFBWSxHQUFHLElBQUksUUFBUSxFQUFzQyxDQUFBO1FBQ2pFLGNBQVMsR0FBRyxJQUFJLFFBQVEsRUFBc0MsQ0FBQTtRQUN2RTs7O1dBR0c7UUFDSSxhQUFRLEdBQUcsR0FBRyxDQUFBO1FBRWIsZ0JBQVcsR0FBRztZQUNsQixNQUFNLEVBQUUsS0FBSztZQUNiLE9BQU8sRUFBRSxLQUFLO1lBQ2QsT0FBTyxFQUFFLEtBQUs7WUFDZCxRQUFRLEVBQUUsS0FBSztTQUNsQixDQUFBO1FBQ08sVUFBSyxHQUErQjtZQUN4QyxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixZQUFZLEVBQUUsQ0FBQztTQUNsQixDQUFBO1FBQ08sWUFBTyxHQUErQjtZQUMxQyxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixZQUFZLEVBQUUsQ0FBQztTQUNsQixDQUFBO1FBQ08sYUFBUSxHQUErQjtZQUMzQyxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixZQUFZLEVBQUUsQ0FB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

/***/ }),

/***/ 4153:
/*!********************************************************!*\
  !*** ../../tgd2/lib/dist/camera/camera-perspective.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCameraPerspective: () => (/* binding */ TgdCameraPerspective)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _camera_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camera.js */ 666);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ 2157);



class TgdCameraPerspective extends _camera_js__WEBPACK_IMPORTED_MODULE_1__.TgdCamera {
    constructor(options = {}) {
        var _a;
        super(options);
        this._matrixProjection = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        this._fovy = Math.PI / 4;
        this._ray = {
            origin: new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3(),
            direction: new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3(),
        };
        this._fovy = (_a = options.fovy) !== null && _a !== void 0 ? _a : Math.PI / 4;
    }
    copyProjectionFrom(camera) {
        this.fovy = camera.fovy;
        this.near = camera.near;
        this.far = camera.far;
        return this;
    }
    castRay(screenX, screenY) {
        const { transfo } = this;
        const { origin, direction } = this._ray;
        origin.from(transfo.actualPosition);
        const h = Math.atan(this.fovy * 0.5);
        const w = h * this.screenAspectRatio;
        direction
            .fromOpposite(transfo.axisZ)
            .addWithScale(transfo.axisX, w * screenX)
            .addWithScale(transfo.axisY, h * screenY)
            .normalize();
        return this._ray;
    }
    /**
     * Vertical field of view in radians.
     *
     * The revealed space at a distance of 1 from the camera
     * will have a height of `2 * tan(fovy / 2)`.
     */
    get fovy() {
        return this._fovy;
    }
    set fovy(v) {
        if (v === this._fovy)
            return;
        this._fovy = v;
        this.dirtyProjection = true;
    }
    get matrixProjection() {
        this.updateProjectionIfNeeded();
        return this._matrixProjection;
    }
    getSpaceHeightAtTarget() {
        return 2 * Math.tan(this.fovy * 0.5) * this.transfo.distance;
    }
    setSpaceHeightAtTarget(v) {
        this.transfo.setDistance(v / (2 * Math.tan(this.fovy * 0.5)));
    }
    updateProjectionIfNeeded() {
        if (!this.dirtyProjection)
            return;
        const fovy = this._fovy;
        const aspect = this.screenAspectRatio;
        const near = this._near;
        const far = this._far;
        const out = this._matrixProjection;
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.perspective(out, fovy, aspect, near, far);
        out[0] *= this.zoom;
        out[5] *= this.zoom;
        this.dirtyProjection = true;
    }
    toCode(caption) {
        const code = [];
        if (caption)
            code.push(`// ${caption}`);
        code.push(`const camera = new TgdCameraPerspective({`);
        if (this.name)
            code.push(`  name: ${JSON.stringify(this.name)},`);
        code.push(`  fovy: ${this._fovy},`);
        code.push(`  near: ${this._near},`);
        code.push(`  far: ${this._far},`);
        code.push(`  zoom: ${this.zoom},`);
        code.push(`  transfo: {`);
        code.push(`  distance: ${this.transfo.distance},`);
        code.push(`    position: ${JSON.stringify([...this.transfo.position])},`);
        code.push(`    orientation: ${JSON.stringify([...this.transfo.orientation])},`);
        code.push(`    scale: ${JSON.stringify([...this.transfo.scale])},`);
        code.push(`  }`);
        code.push("}");
        return code.join("\n");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLXBlcnNwZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhbWVyYS9jYW1lcmEtcGVyc3BlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBb0IsTUFBTSxVQUFVLENBQUE7QUFDdEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQVloQyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsU0FBUztJQVEvQyxZQUFZLFVBQXVDLEVBQUU7O1FBQ2pELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQVJELHNCQUFpQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDMUMsVUFBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ1YsU0FBSSxHQUFHO1lBQ3BCLE1BQU0sRUFBRSxJQUFJLE9BQU8sRUFBRTtZQUNyQixTQUFTLEVBQUUsSUFBSSxPQUFPLEVBQUU7U0FDM0IsQ0FBQTtRQUlHLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBQSxPQUFPLENBQUMsSUFBSSxtQ0FBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBNEI7UUFDM0MsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUE7UUFDckIsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQsT0FBTyxDQUNILE9BQWUsRUFDZixPQUFlO1FBRWYsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQTtRQUN4QixNQUFNLEVBQUUsTUFB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

/***/ }),

/***/ 4252:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/material/ghost.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialGhost: () => (/* binding */ TgdMaterialGhost)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material.js */ 6018);


const DEFAULT_COLOR = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4(0.6, 1, 0.9, 1);
class TgdMaterialGhost extends _material_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterial {
    constructor({ color = DEFAULT_COLOR, exponent = 3, intensity = 3, } = {}) {
        super();
        this.fragmentShaderCode = [
            `float light = 1.0 - varNormal.z;`,
            `light = pow(light, ${exponent.toFixed(6)});`,
            `vec4 color = vec4(${color.join(", ")});`,
            `return vec4(color.rgb * ${intensity.toFixed(6)}, color.a) * light;`,
        ];
        this.vertexShaderCode = [
            "varNormal = mat3(uniModelViewMatrix) * NORMAL;",
        ];
        this.varyings = {
            varNormal: "vec3",
        };
    }
    setUniforms(_program) { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2hvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0ZXJpYWwvZ2hvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBVXhDLE1BQU0sYUFBYSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRWpELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUFXO0lBSzdDLFlBQVksRUFDUixLQUFLLEdBQUcsYUFBYSxFQUNyQixRQUFRLEdBQUcsQ0FBQyxFQUNaLFNBQVMsR0FBRyxDQUFDLE1BQ1ksRUFBRTtRQUMzQixLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxrQkFBa0IsR0FBRztZQUN0QixrQ0FBa0M7WUFDbEMsc0JBQXNCLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDN0MscUJBQXFCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDekMsMkJBQTJCLFNBQVMsQ0FBQyxPQUFPLENBQ3hDLENBQUMsQ0FDSixxQkFBcUI7U0FDekIsQ0FBQTtRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRztZQUNwQixnREFBZ0Q7U0FDbkQsQ0FBQTtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUc7WUFDWixTQUFTLEVBQUUsTUFBTTtTQUNwQixDQUFBO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFvQixJQUFTLENBQUM7Q0FDN0MifQ==

/***/ }),

/***/ 4389:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/utils/state/stencil.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglDebugStencil: () => (/* binding */ webglDebugStencil),
/* harmony export */   webglPresetStencil: () => (/* binding */ webglPresetStencil),
/* harmony export */   webglStencilExec: () => (/* binding */ webglStencilExec),
/* harmony export */   webglStencilGet: () => (/* binding */ webglStencilGet),
/* harmony export */   webglStencilSet: () => (/* binding */ webglStencilSet)
/* harmony export */ });
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../debug/index.js */ 9205);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../types/index.js */ 5327);


const webglPresetStencil = {
    off: {
        enabled: false,
        maskBack: 0,
        maskFront: 0,
        functionBack: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.ALWAYS,
        functionBackMask: 0,
        functionBackRef: 0,
        functionFront: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.ALWAYS,
        functionFrontMask: 0,
        functionFrontRef: 0,
        operationBack1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
    },
    /** Set the stencil to `value` for each fragment. */
    write: (value) => ({
        enabled: true,
        maskBack: 0xff,
        maskFront: 0xff,
        functionBack: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.ALWAYS,
        functionBackRef: value,
        functionBackMask: 0xff,
        functionFront: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.ALWAYS,
        functionFrontRef: value,
        functionFrontMask: 0xff,
        operationBack1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.REPLACE,
        operationFront1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.REPLACE,
    }),
    /** Paint only if the stencil is equal to `value` */
    paintIfEqual: (value) => ({
        enabled: true,
        maskBack: 0x00,
        maskFront: 0x00,
        functionBack: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.EQUAL,
        functionBackRef: value,
        functionBackMask: 0xff,
        functionFront: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilFunction.EQUAL,
        functionFrontRef: value,
        functionFrontMask: 0xff,
        operationBack1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationBack3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront1FailStencil: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront2FailDepth: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
        operationFront3Pass: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumStencilOperation.KEEP,
    }),
};
function webglStencilSet(gl, stencil) {
    if (stencil.enabled) {
        gl.enable(gl.STENCIL_TEST);
        gl.stencilFuncSeparate(gl.FRONT, stencil.functionFront, stencil.functionFrontRef, stencil.functionFrontMask);
        gl.stencilFuncSeparate(gl.BACK, stencil.functionBack, stencil.functionBackRef, stencil.functionBackMask);
        gl.stencilOpSeparate(gl.FRONT, stencil.operationFront1FailStencil, stencil.operationFront2FailDepth, stencil.operationFront3Pass);
        gl.stencilOpSeparate(gl.BACK, stencil.operationBack1FailStencil, stencil.operationBack2FailDepth, stencil.operationBack3Pass);
        gl.stencilMaskSeparate(gl.FRONT, stencil.maskFront);
        gl.stencilMaskSeparate(gl.BACK, stencil.maskBack);
    }
    else {
        gl.disable(gl.STENCIL_TEST);
    }
}
function webglStencilGet(gl) {
    const enabled = Boolean(gl.getParameter(gl.STENCIL_TEST));
    if (!enabled)
        return Object.assign({}, webglPresetStencil.off);
    return {
        enabled,
        maskBack: gl.getParameter(gl.STENCIL_BACK_WRITEMASK),
        maskFront: gl.getParameter(gl.STENCIL_WRITEMASK),
        functionFront: gl.getParameter(gl.STENCIL_FUNC),
        functionFrontMask: gl.getParameter(gl.STENCIL_VALUE_MASK),
        functionFrontRef: gl.getParameter(gl.STENCIL_REF),
        functionBack: gl.getParameter(gl.STENCIL_BACK_FUNC),
        functionBackMask: gl.getParameter(gl.STENCIL_BACK_VALUE_MASK),
        functionBackRef: gl.getParameter(gl.STENCIL_BACK_REF),
        operationFront1FailStencil: gl.getParameter(gl.STENCIL_FAIL),
        operationFront2FailDepth: gl.getParameter(gl.STENCIL_PASS_DEPTH_FAIL),
        operationFront3Pass: gl.getParameter(gl.STENCIL_PASS_DEPTH_PASS),
        operationBack1FailStencil: gl.getParameter(gl.STENCIL_BACK_FAIL),
        operationBack2FailDepth: gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_FAIL),
        operationBack3Pass: gl.getParameter(gl.STENCIL_BACK_PASS_DEPTH_PASS),
    };
}
function webglStencilExec(gl, stencil, action) {
    const currentState = webglStencilGet(gl);
    webglStencilSet(gl, stencil);
    try {
        action();
    }
    finally {
        webglStencilSet(gl, currentState);
    }
}
function webglDebugStencil(gl, caption = "Stencil test:") {
    const stencil = webglStencilGet(gl);
    (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.debug)([`Stencil ${caption}: `, stencil.enabled]);
    console.log(stencil);
    if (stencil.enabled) {
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.debug)([
            { cls: "code" },
            [`gl.enable(`, (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("STENCIL_TEST"), ")\n"],
            [
                "gl.stencilFuncSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("FRONT"),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.functionFront),
                `, ${stencil.functionFrontRef}, 0b${stencil.functionFrontMask.toString(2)})\n`,
            ],
            [
                "gl.stencilFuncSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("BACK"),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.functionBack),
                `, ${stencil.functionBackRef}, 0b${stencil.functionBackMask.toString(2)})\n`,
            ],
            [
                "gl.stencilOpSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("FRONT"),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationFront1FailStencil),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationFront2FailDepth),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationFront3Pass),
                ")\n",
            ],
            [
                "gl.stencilOpSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("BACK"),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationBack1FailStencil),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationBack2FailDepth),
                ", ",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(stencil.operationBack3Pass),
                ")\n",
            ],
            [
                "gl.stencilMaskSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("FRONT"),
                `, 0b${stencil.maskFront.toString(2)})\n`,
            ],
            [
                "gl.stencilMaskSeparate(",
                (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("BACK"),
                `, 0b${stencil.maskBack.toString(2)})\n`,
            ],
        ]);
    }
    else {
        (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.debug)([{ cls: "code" }, [`gl.disable(`, (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("STENCIL_TEST")]]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlbmNpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9zdGF0ZS9zdGVuY2lsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ2pELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQW9CaEYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDOUIsR0FBRyxFQUFFO1FBQ0QsT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRLEVBQUUsQ0FBQztRQUNYLFNBQVMsRUFBRSxDQUFDO1FBQ1osWUFBWSxFQUFFLHdCQUF3QixDQUFDLE1BQU07UUFDN0MsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuQixlQUFlLEVBQUUsQ0FBQztRQUNsQixhQUFhLEVBQUUsd0JBQXdCLENBQUMsTUFBTTtRQUM5QyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3BCLGdCQUFnQixFQUFFLENBQUM7UUFDbkIseUJBQXlCLEVBQUUseUJBQXlCLENBQUMsSUFBSTtRQUN6RCx1QkFBdUIsRUFBRSx5QkFBeUIsQ0FBQyxJQUFJO1FBQ3ZELGtCQUFrQixFQUFFLHlCQUF5QixDQUFDLElBQUk7UUFDbEQsMEJBQTBCLEVBQUUseUJBQXlCLENBQUMsSUFBSTtRQUMxRCx3QkFBd0IsRUFBRSx5QkFBeUIsQ0FBQyxJQUFJO1FBQ3hELG1CQUFtQixFQUFFLHlCQUF5QixDQUFDLElBQUk7S0FDdEQ7SUFDRCxvREFBb0Q7SUFDcEQsS0FBSyxFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUFFLElBQUk7UUFDZCxTQUFTLEVBQUUsSUFBSTtRQUNmLFlBQVksRUFBRSx3QkFBd0IsQ0FBQyxNQUFNO1FBQzdDLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLGdCQUFnQixFQUFFLElB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

/***/ }),

/***/ 4504:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/types/texture-cube.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZS1jdWJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL3RleHR1cmUtY3ViZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=

/***/ }),

/***/ 4519:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/painter/logic.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterLogic: () => (/* binding */ TgdPainterLogic)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./painter.js */ 2362);

/**
 * This painter paints nothing but execute some logic at every frame.
 */
class TgdPainterLogic extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(logicFunction, options = {}) {
        var _a;
        super();
        this.logicFunction = logicFunction;
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `Logic/${this.name}`;
    }
    delete() { }
    paint(time, delay) {
        this.logicFunction(time, delay);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9sb2dpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRXRDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWdCLFNBQVEsVUFBVTtJQUMzQyxZQUNxQixhQUFvRCxFQUNyRSxVQUFxQyxFQUFFOztRQUV2QyxLQUFLLEVBQUUsQ0FBQTtRQUhVLGtCQUFhLEdBQWIsYUFBYSxDQUF1QztRQUlyRSxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQUEsT0FBTyxDQUFDLElBQUksbUNBQUksU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDcEQsQ0FBQztJQUVELE1BQU0sS0FBVSxDQUFDO0lBRWpCLEtBQUssQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0NBQ0oifQ==

/***/ }),

/***/ 4687:
/*!*************************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background-with-depth/background.vert ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nuniform float uniScale;\nin vec2 attPoint;\nin vec2 attUV;\nout vec2 varUV;\n\nvoid main() {\n    vec2 s = vec2(uniScale, 1.0);\n    vec2 o = vec2(0.5, 0);\n    varUV = o + (attUV - o) * s;\n    gl_Position = vec4(attPoint, 1.0, 1.0);\n}";

/***/ }),

/***/ 4713:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/code/coords.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeFunction_polar2uv: () => (/* binding */ tgdCodeFunction_polar2uv),
/* harmony export */   tgdCodeFunction_polar2xy: () => (/* binding */ tgdCodeFunction_polar2xy),
/* harmony export */   tgdCodeFunction_uv2polar: () => (/* binding */ tgdCodeFunction_uv2polar),
/* harmony export */   tgdCodeFunction_uv2xy: () => (/* binding */ tgdCodeFunction_uv2xy),
/* harmony export */   tgdCodeFunction_xy2polar: () => (/* binding */ tgdCodeFunction_xy2polar),
/* harmony export */   tgdCodeFunction_xy2uv: () => (/* binding */ tgdCodeFunction_xy2uv)
/* harmony export */ });
/**
 * Convert uv coords ([0.0, +1.0]) into xy coords ([-1.0, +1.0]).
 * Requires uniform `uniAspectRatio`.
 */
function tgdCodeFunction_uv2xy(options = {}) {
    const { name = "uv2xy", uniAspectRatio = "uniAspectRatio" } = options;
    return {
        [name]: `vec2 ${name}(vec2 uv) {
    return 2.0 * (uv - vec2(0.5)) * vec2(${uniAspectRatio}, 1.0);
}
`,
    };
}
/**
 * Convert xy coords ([-1.0, +1.0]) into uv coords ([0.0, +1.0]) .
 * Requires uniform `uniAspectRatioInverse`.
 */
function tgdCodeFunction_xy2uv(options = {}) {
    const { name = "xy2uv", uniAspectRatioInverse = "uniAspectRatioInverse" } = options;
    return {
        [name]: `vec2 ${name}(vec2 xy) {
    return (0.5 * xy * vec2(${uniAspectRatioInverse}, 1.0)) + vec2(0.5);
}
`,
    };
}
/**
 * Convert othogonal coords into polar coords.
 * The function will return a vec2 with the length as first component,
 * and the angle as second.
 */
function tgdCodeFunction_xy2polar(options = {}) {
    const { name = "xy2polar" } = options;
    return {
        [name]: `vec2 ${name}(vec2 xy) {
    return vec2(
        length(xy),
        atan(xy.y, xy.x)
    );
}
`,
    };
}
/**
 * Reverse function of `xy2polar`.
 * @see tgdCodeFunction_xy2polar
 */
function tgdCodeFunction_polar2xy(options = {}) {
    const { name = "polar2uv" } = options;
    return {
        [name]: `vec2 ${name}(vec2 polar) {
    float r = polar.x;
    float a = polar.y;
    return vec2(
        r * cos(a),
        r * sin(a)
    );
}
`,
    };
}
/**
 * Reverse function of `xy2polar`.
 * Requires uniform `uniAspectRatioInverse`.
 * @see tgdCodeFunction_xy2polar
 */
function tgdCodeFunction_polar2uv(options = {}) {
    const { name = "polar2uv", uniAspectRatioInverse = "uniAspectRatioInverse", } = options;
    return {
        [name]: `vec2 ${name}(vec2 polar) {
    float r = polar.x;
    float a = polar.y;
    vec2 xy = vec2(
        r * cos(a),
        r * sin(a)
    );
    return (0.5 * xy * vec2(${uniAspectRatioInverse}, 1.0)) + vec2(0.5);
}
`,
    };
}
function tgdCodeFunction_uv2polar(options = {}) {
    const { name = "uv2polar", uniAspectRatio = "uniAspectRatio" } = options;
    return {
        [name]: `vec2 ${name}(vec2 uv) {
    vec2 xy = 2.0 * (uv - vec2(0.5)) * vec2(${uniAspectRatio}, 1.0);
    return vec2(
        length(xy),
        atan(xy.y, xy.x)
    );
}
`,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29vcmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvZGUvY29vcmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7R0FHRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FDakMsVUFBNkQsRUFBRTtJQUUvRCxNQUFNLEVBQUUsSUFBSSxHQUFHLE9BQU8sRUFBRSxjQUFjLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUE7SUFDckUsT0FBTztRQUNILENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxJQUFJOzJDQUNlLGNBQWM7O0NBRXhEO0tBQ0ksQ0FBQTtBQUNMLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQ2pDLFVBQW9FLEVBQUU7SUFFdEUsTUFBTSxFQUFFLElBQUksR0FBRyxPQUFPLEVBQUUscUJBQXFCLEdBQUcsdUJBQXVCLEVBQUUsR0FDckUsT0FBTyxDQUFBO0lBQ1gsT0FBTztRQUNILENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxJQUFJOzhCQUNFLHFCQUFxQjs7Q0FFbEQ7S0FDSSxDQUFBO0FBQ0wsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFVBRUksRUFBRTtJQUVOLE1BQU0sRUFBRSxJQUFJLEdBQUcsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQ3JDLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsSUFBSTs7Ozs7O0NBTTNCO0tBQ0ksQ0FBQTtBQUNMLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFVBRUksRUFBRTtJQUVOLE1BQU0sRUFBRSxJQUFJLEdBQUcsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQ3JDLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsSUFBSTs7Ozs7Ozs7Q0FRM0I7S0FDSSxDQUFBO0FBQ0wsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFVBQW9FLEVBQUU7SUFFdEUsTUFBTSxFQUNGLElBQUksR0FBRyxVQUFVLEVBQ2pCLHFCQUFxQixHQUFHLHVCQUF1QixHQUNsRCxHQUFHLE9BQU8sQ0FBQTtJQUNYLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsSUFBSTs7Ozs7Ozs4QkFPRSxxQkFBcUI7O0NBRWxEO0tBQ0ksQ0FBQTtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLFVBQTZELEVBQUU7SUFFL0QsTUFBTSxFQUFFLElBQUksR0FBRyxVQUFVLEVBQUUsY0FBYyxHQUFHLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQ3hFLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsSUFBSTs4Q0FDa0IsY0FBYzs7Ozs7O0NBTTNEO0tBQ0ksQ0FBQTtBQUNMLENBQUMifQ==

/***/ }),

/***/ 4765:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/texture/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTexture2D: () => (/* reexport safe */ _texture2d_js__WEBPACK_IMPORTED_MODULE_0__.TgdTexture2D),
/* harmony export */   TgdTextureCubeImpl: () => (/* reexport safe */ _texture_cube_js__WEBPACK_IMPORTED_MODULE_1__.TgdTextureCubeImpl)
/* harmony export */ });
/* harmony import */ var _texture2d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./texture2d.js */ 1623);
/* harmony import */ var _texture_cube_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./texture-cube.js */ 6330);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGV4dHVyZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGFBQWEsQ0FBQTtBQUMzQixjQUFjLGdCQUFnQixDQUFBIn0=

/***/ }),

/***/ 4773:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/context/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_0__.TgdContext),
/* harmony export */   TgdLogger: () => (/* reexport safe */ _log_js__WEBPACK_IMPORTED_MODULE_1__.TgdLogger)
/* harmony export */ });
/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ 8658);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ 303);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udGV4dC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFdBQVcsQ0FBQTtBQUN6QixjQUFjLFFBQVEsQ0FBQSJ9

/***/ }),

/***/ 4825:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/interface/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _transformable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformable.js */ 2513);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJmYWNlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsaUJBQWlCLENBQUEifQ==

/***/ }),

/***/ 4968:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/painter/depth.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterDepth: () => (/* binding */ TgdPainterDepth)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./painter.js */ 2362);

class TgdPainterDepth extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor({ gl }, { enabled = true, func: function_ = "LESS", mask = true, rangeMin = 0, rangeMax = 1, } = {}) {
        super();
        this.gl = gl;
        this.enabled = enabled;
        this.func = function_;
        this.mask = mask;
        this.rangeMin = rangeMin;
        this.rangeMax = rangeMax;
    }
    delete() { }
    paint() {
        const { gl } = this;
        const { enabled } = this;
        if (!enabled) {
            gl.disable(gl.DEPTH_TEST);
            return;
        }
        const { func, mask, rangeMin, rangeMax } = this;
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(gl[func]);
        gl.depthMask(mask);
        gl.depthRange(rangeMin, rangeMax);
    }
    update() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9kZXB0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBVXRDLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFTM0MsWUFDSSxFQUFFLEVBQUUsRUFBa0MsRUFDdEMsRUFDSSxPQUFPLEdBQUcsSUFBSSxFQUNkLElBQUksRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUN4QixJQUFJLEdBQUcsSUFBSSxFQUNYLFFBQVEsR0FBRyxDQUFDLEVBQ1osUUFBUSxHQUFHLENBQUMsTUFDcUIsRUFBRTtRQUV2QyxLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUE7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7SUFDNUIsQ0FBQztJQUVELE1BQU0sS0FBVSxDQUFDO0lBRWpCLEtBQUs7UUFDRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ25CLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ1gsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDekIsT0FBTTtRQUNWLENBQUM7UUFFRCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQy9DLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3hCLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdEIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNsQixFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRUQsTUFBTSxLQUFVLENBQUM7Q0FDcEIifQ==

/***/ }),

/***/ 4978:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/code/transfo.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeFunction_rotate2D: () => (/* binding */ tgdCodeFunction_rotate2D)
/* harmony export */ });
/**
 * Rotate 2D coordinates.
 */
function tgdCodeFunction_rotate2D(options) {
    const { name = "rotate2D" } = options;
    return {
        [name]: `vec2 ${name}(vec2 p, float angle) {
    float c = cos(angle);
    float s = sin(angle);
    mat2 m = mat2(
        c, s,
        -s, c
    );
    return m * p;
}
`,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2RlL3RyYW5zZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7O0dBRUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsT0FFeEM7SUFDRyxNQUFNLEVBQUUsSUFBSSxHQUFHLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUNyQyxPQUFPO1FBQ0gsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLElBQUk7Ozs7Ozs7OztDQVMzQjtLQUNJLENBQUE7QUFDTCxDQUFDIn0=

/***/ }),

/***/ 4999:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/gizmo/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCanvasGizmo: () => (/* reexport safe */ _gizmo_js__WEBPACK_IMPORTED_MODULE_0__.TgdCanvasGizmo)
/* harmony export */ });
/* harmony import */ var _gizmo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gizmo.js */ 557);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2FudmFzL2dpem1vL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsU0FBUyxDQUFBIn0=

/***/ }),

/***/ 5008:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/mat4.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMat4: () => (/* binding */ TgdMat4)
/* harmony export */ });
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../debug/index.js */ 9205);
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec3.js */ 7389);
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec4.js */ 6648);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ 2157);




/**
 * Column-first 4x4 matrix.
 *
 * - `m12` means row 2 and column 3 (__A__).
 * - `m20` means row 3 and column 1 (__B__).
 *
 * ```
 * +-+-+-+-+
 * | | | | |
 * +-+-+-+-+
 * | | |A| |
 * +-+-+-+-+
 * |B| | | |
 * +-+-+-+-+
 * | | | | |
 * +-+-+-+-+
 * ```
 *
 * This is how mathematicians use matrices.
 *
 * But, internally, for WebGL compliance, we store the data like this:
 *
 * ```
 * +--+--+--+--+
 * | 0| 4| 8|12|
 * +--+--+--+--+
 * | 1| 5| 9|13|
 * +--+--+--+--+
 * | 2| 6|10|14|
 * +--+--+--+--+
 * | 3| 7|11|15|
 * +--+--+--+--+
 * ```
 *
 * That's why is better to access members through the accessor `m00`, `m01`, etc.
 */
class TgdMat4 extends Float32Array {
    constructor(m00 = 1, m10 = 0, m20 = 0, m30 = 0, m01 = 0, m11 = 1, m21 = 0, m31 = 0, m02 = 0, m12 = 0, m22 = 1, m32 = 0, m03 = 0, m13 = 0, m23 = 0, m33 = 1) {
        if (typeof m00 === "number") {
            super([
                m00,
                m10,
                m20,
                m30,
                m01,
                m11,
                m21,
                m31,
                m02,
                m12,
                m22,
                m32,
                m03,
                m13,
                m23,
                m33,
            ]);
        }
        else {
            super(m00);
        }
    }
    reset(row0 = _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4.X, row1 = _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4.Y, row2 = _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4.Z, row3 = _vec4_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec4.W) {
        const [m00, m01, m02, m03] = row0;
        const [m10, m11, m12, m13] = row1;
        const [m20, m21, m22, m23] = row2;
        const [m30, m31, m32, m33] = row3;
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
        return this;
    }
    multiply(mat) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.multiply(this, this, mat);
        return this;
    }
    /**
     * @param from This matrix will become the inversion of `from`.
     * If not defined, the matrix will invert itself.
     */
    invert(from) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.invert(this, from !== null && from !== void 0 ? from : this);
        return this;
    }
    get translation() {
        const { m03, m13, m23 } = this;
        return new _vec3_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(m03, m13, m23);
    }
    set translation(vec) {
        const [x, y, z] = vec;
        this.m03 = x;
        this.m13 = y;
        this.m23 = z;
    }
    toTanslation(target) {
        target.x = this.m03;
        target.y = this.m13;
        target.z = this.m23;
        return this;
    }
    /**
     * Add `delta` to the current translation.
     */
    translate(delta) {
        const [x, y, z] = delta;
        this.m03 += x;
        this.m13 += y;
        this.m23 += z;
        return this;
    }
    from(mat) {
        var _a;
        for (let index = 0; index < this.length; index++) {
            this[index] = (_a = mat[index]) !== null && _a !== void 0 ? _a : 0;
        }
        return this;
    }
    fromMat3(mat) {
        this.m00 = mat.m00;
        this.m01 = mat.m01;
        this.m02 = mat.m02;
        this.m10 = mat.m10;
        this.m11 = mat.m11;
        this.m12 = mat.m12;
        this.m20 = mat.m20;
        this.m21 = mat.m21;
        this.m22 = mat.m22;
        return this;
    }
    toAxes(axisX, axisY, axisZ) {
        this.toAxisX(axisX);
        this.toAxisY(axisY);
        return this.toAxisZ(axisZ);
    }
    toAxisX(axisX) {
        axisX.x = this.m00;
        axisX.y = this.m01;
        axisX.z = this.m02;
        return this;
    }
    toAxisY(axisY) {
        axisY.x = this.m10;
        axisY.y = this.m11;
        axisY.z = this.m12;
        return this;
    }
    toAxisZ(axisZ) {
        axisZ.x = this.m20;
        axisZ.y = this.m21;
        axisZ.z = this.m22;
        return this;
    }
    fromQuat({ x, y, z, w }) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.fromQuat(this, [x, y, z, w]);
        return this;
    }
    get m00() {
        return this[IDX_m00];
    }
    set m00(v) {
        this[IDX_m00] = v;
    }
    get m10() {
        return this[IDX_m10];
    }
    set m10(v) {
        this[IDX_m10] = v;
    }
    get m20() {
        return this[IDX_m20];
    }
    set m20(v) {
        this[IDX_m20] = v;
    }
    get m30() {
        return this[IDX_m30];
    }
    set m30(v) {
        this[IDX_m30] = v;
    }
    get m01() {
        return this[IDX_m01];
    }
    set m01(v) {
        this[IDX_m01] = v;
    }
    get m11() {
        return this[IDX_m11];
    }
    set m11(v) {
        this[IDX_m11] = v;
    }
    get m21() {
        return this[IDX_m21];
    }
    set m21(v) {
        this[IDX_m21] = v;
    }
    get m31() {
        return this[IDX_m31];
    }
    set m31(v) {
        this[IDX_m31] = v;
    }
    get m02() {
        return this[IDX_m02];
    }
    set m02(v) {
        this[IDX_m02] = v;
    }
    get m12() {
        return this[IDX_m12];
    }
    set m12(v) {
        this[IDX_m12] = v;
    }
    get m22() {
        return this[IDX_m22];
    }
    set m22(v) {
        this[IDX_m22] = v;
    }
    get m32() {
        return this[IDX_m32];
    }
    set m32(v) {
        this[IDX_m32] = v;
    }
    get m03() {
        return this[IDX_m03];
    }
    set m03(v) {
        this[IDX_m03] = v;
    }
    get m13() {
        return this[IDX_m13];
    }
    set m13(v) {
        this[IDX_m13] = v;
    }
    get m23() {
        return this[IDX_m23];
    }
    set m23(v) {
        this[IDX_m23] = v;
    }
    get m33() {
        return this[IDX_m33];
    }
    set m33(v) {
        this[IDX_m33] = v;
    }
    debug(caption = "Mat4") {
        const row0 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m00, this.m01, this.m02, this.m03]);
        const row1 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m10, this.m11, this.m12, this.m13]);
        const row2 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m20, this.m21, this.m22, this.m23]);
        const row3 = (0,_debug_index_js__WEBPACK_IMPORTED_MODULE_0__.padColOfNumbers)([this.m30, this.m31, this.m32, this.m33]);
        console.log(caption);
        console.log("   ", row0.join(" | "));
        console.log("   ", row1.join(" | "));
        console.log("   ", row2.join(" | "));
        console.log("   ", row3.join(" | "));
    }
}
const IDX_m00 = 0;
const IDX_m10 = 1;
const IDX_m20 = 2;
const IDX_m30 = 3;
const IDX_m01 = 4;
const IDX_m11 = 5;
const IDX_m21 = 6;
const IDX_m31 = 7;
const IDX_m02 = 8;
const IDX_m12 = 9;
const IDX_m22 = 10;
const IDX_m32 = 11;
const IDX_m03 = 12;
const IDX_m13 = 13;
const IDX_m23 = 14;
const IDX_m33 = 15;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 5018:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/event/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdEvent: () => (/* reexport safe */ _event_js__WEBPACK_IMPORTED_MODULE_0__.TgdEvent)
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ 5970);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 5079:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/code/consts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeConstants: () => (/* binding */ tgdCodeConstants)
/* harmony export */ });
const CONSTS_FLOAT = {
    E: Math.E,
    PI: Math.PI,
    TAU: 2 * Math.PI,
    PI_INVERSE: 1 / Math.PI,
    TAU_INVERSE: 0.5 / Math.PI,
    DEG_PER_RAD: 180 / Math.PI,
    RAD_PER_DEG: Math.PI / 180,
};
/**
 * Define common constants.
 */
function tgdCodeConstants(...names) {
    const code = {};
    for (const name of names) {
        code[name] = `const float ${name} = ${CONSTS_FLOAT[name]};`;
    }
    return code;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvZGUvY29uc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNULEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtJQUNYLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUU7SUFDaEIsVUFBVSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRTtJQUN2QixXQUFXLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFO0lBQzFCLFdBQVcsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUU7SUFDMUIsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRztDQUM3QixDQUFBO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQzVCLEdBQUcsS0FBdUM7SUFFMUMsTUFBTSxJQUFJLEdBQXFCLEVBQUUsQ0FBQTtJQUNqQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFlLElBQUksTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQTtJQUMvRCxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDIn0=

/***/ }),

/***/ 5327:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/types/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebglEnumBlendEquation: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumBlendEquation),
/* harmony export */   WebglEnumBlendFunction: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumBlendFunction),
/* harmony export */   WebglEnumCullFace: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumCullFace),
/* harmony export */   WebglEnumDepthFunction: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumDepthFunction),
/* harmony export */   WebglEnumStencilFunction: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumStencilFunction),
/* harmony export */   WebglEnumStencilOperation: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumStencilOperation),
/* harmony export */   WebglEnumTex2DInternalFormat: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.WebglEnumTex2DInternalFormat),
/* harmony export */   assertTgdFormatGltf: () => (/* reexport safe */ _gltf_js__WEBPACK_IMPORTED_MODULE_3__.assertTgdFormatGltf),
/* harmony export */   assertTgdTypeArrayForElements: () => (/* reexport safe */ _elements_js__WEBPACK_IMPORTED_MODULE_2__.assertTgdTypeArrayForElements),
/* harmony export */   isTgdFormatGltfCameraOrthographic: () => (/* reexport safe */ _gltf_js__WEBPACK_IMPORTED_MODULE_3__.isTgdFormatGltfCameraOrthographic),
/* harmony export */   isTgdFormatGltfCameraPerspective: () => (/* reexport safe */ _gltf_js__WEBPACK_IMPORTED_MODULE_3__.isTgdFormatGltfCameraPerspective),
/* harmony export */   isWebglImage: () => (/* reexport safe */ _webgl_js__WEBPACK_IMPORTED_MODULE_8__.isWebglImage)
/* harmony export */ });
/* harmony import */ var _animation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation.js */ 1701);
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrays.js */ 857);
/* harmony import */ var _elements_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elements.js */ 6182);
/* harmony import */ var _gltf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gltf.js */ 6022);
/* harmony import */ var _input_keyboard_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./input-keyboard.js */ 177);
/* harmony import */ var _input_pointer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./input-pointer.js */ 9051);
/* harmony import */ var _program_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./program.js */ 8415);
/* harmony import */ var _texture_cube_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./texture-cube.js */ 4504);
/* harmony import */ var _webgl_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./webgl.js */ 4010);
/* harmony import */ var _interface_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../interface/index.js */ 4825);










//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxhQUFhLENBQUE7QUFDM0IsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxrQkFBa0IsQ0FBQTtBQUNoQyxjQUFjLGlCQUFpQixDQUFBO0FBQy9CLGNBQWMsV0FBVyxDQUFBO0FBQ3pCLGNBQWMsZ0JBQWdCLENBQUE7QUFDOUIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxjQUFjLENBQUEifQ==

/***/ }),

/***/ 5332:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/code/color.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeFunction_luminance: () => (/* binding */ tgdCodeFunction_luminance),
/* harmony export */   tgdCodeFunction_shiftHue: () => (/* binding */ tgdCodeFunction_shiftHue)
/* harmony export */ });
/**
 * Fast hue shifting for colors.
 * Hue shift is expressed in __radians__.
 */
function tgdCodeFunction_shiftHue({ name = "shiftHue", } = {}) {
    return {
        [name]: `vec3 ${name}(vec3 color, float hue) {
    const vec3 k = vec3(0.5773502691896258);
    float cosAngle = cos(hue);
    return vec3(
        color * cosAngle 
        + cross(k, color) * sin(hue) 
        + k * dot(k, color) * (1.0 - cosAngle)
    );
}
`,
    };
}
function tgdCodeFunction_luminance({ name = "luminance", } = {}) {
    return {
        [name]: `float ${name}(vec3 color) {
    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}`,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZS9jb2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsRUFDckMsSUFBSSxHQUFHLFVBQVUsTUFHakIsRUFBRTtJQUNGLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsSUFBSTs7Ozs7Ozs7O0NBUzNCO0tBQ0ksQ0FBQTtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsRUFDdEMsSUFBSSxHQUFHLFdBQVcsTUFHbEIsRUFBRTtJQUNGLE9BQU87UUFDSCxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsSUFBSTs7RUFFM0I7S0FDRyxDQUFBO0FBQ0wsQ0FBQyJ9

/***/ }),

/***/ 5383:
/*!**************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background/background.frag ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\nin vec2 varUV;\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = texture(uniTexture, varUV);\n}";

/***/ }),

/***/ 5400:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/utils/pbo.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdPixelBufferObjectCreate: () => (/* binding */ tgdPixelBufferObjectCreate)
/* harmony export */ });
/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas.js */ 5819);

/**
 * Creating a Pixel Buffer Object is usefull to store big images into the GPU.
 *
 * @param gl
 * @param source
 * @returns Handle of the created PBO.
 */
function tgdPixelBufferObjectCreate(gl, source, width, height) {
    const { data, width: w, height: h } = getData(source, width, height);
    const buffer = gl.createBuffer();
    if (!buffer)
        throw new Error("Unable to create a WebGL2 pixel buffer buffer!");
    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer);
    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW);
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, w);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, h);
    return buffer;
}
function getData(source, width, height) {
    if (source instanceof Uint8ClampedArray) {
        if (typeof width === "number" && typeof height === "number") {
            return { data: source, width, height };
        }
        throw new Error("If you give a Uint8Array to tgdPixelBufferObjectCreate(), you must specify both width and height arguments!");
    }
    const { width: w, height: h } = source;
    const { ctx } = (0,_canvas_js__WEBPACK_IMPORTED_MODULE_0__.tgdCanvasCreateWithContext2D)(w, h);
    ctx.drawImage(source, 0, 0);
    return { data: ctx.getImageData(0, 0, w, h).data, width: w, height: h };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGJvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3Biby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFdkQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQixDQUN0QyxFQUEwQixFQUMxQixNQUFnRSxFQUNoRSxLQUFjLEVBQ2QsTUFBZTtJQUVmLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDcEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO0lBQ2hDLElBQUksQ0FBQyxNQUFNO1FBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFBO0lBRXJFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzdDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDM0QsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDdkMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekMsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUNaLE1BQWdFLEVBQ2hFLEtBQWMsRUFDZCxNQUFlO0lBRWYsSUFBSSxNQUFNLFlBQVksaUJBQWlCLEVBQUUsQ0FBQztRQUN0QyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMxRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUE7UUFDMUMsQ0FBQztRQUNELE1BQU0sSUFBSSxLQUFLLENBQ1gsNkdBQTZHLENBQ2hILENBQUE7SUFDTCxDQUFDO0lBRUQsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQTtJQUN0QyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsNEJBQTRCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xELEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMzQixPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFBO0FBQzNFLENBQUMifQ==

/***/ }),

/***/ 5512:
/*!****************************************************!*\
  !*** ../../tgd2/lib/dist/painter/filter/filter.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterFilter: () => (/* binding */ TgdPainterFilter)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../painter.js */ 2362);
/* harmony import */ var _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../dataset/dataset.js */ 6526);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _shader_vertex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../shader/vertex.js */ 8725);
/* harmony import */ var _shader_fragment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../shader/fragment.js */ 3627);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../program/index.js */ 9974);






class TgdPainterFilter extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context, options) {
        var _a, _b, _c;
        super();
        this.context = context;
        this.z = 0;
        this.textures = null;
        this.texturesWith = -1;
        this.texturesHeight = -1;
        this.z = (_a = options.z) !== null && _a !== void 0 ? _a : 0.999999;
        this.texture = options.texture;
        const filters = (_b = options.filters) !== null && _b !== void 0 ? _b : [];
        if (filters.length === 0) {
            throw new Error(`[TgdPainterFilter] filters is expected to have at least one element!`);
        }
        const programs = filters.map(filter => {
            const vert = new _shader_vertex_js__WEBPACK_IMPORTED_MODULE_3__.TgdShaderVertex({
                attributes: {
                    attPoint: "vec2",
                    attUV: "vec2",
                },
                varying: {
                    varUV: "vec2",
                },
                uniforms: {
                    uniZ: "float",
                },
                mainCode: [
                    "varUV = attUV;",
                    "gl_Position = vec4(",
                    ["attPoint,", "uniZ,", "1.0"],
                    ");",
                ],
            }).code;
            const frag = new _shader_fragment_js__WEBPACK_IMPORTED_MODULE_4__.TgdShaderFragment({
                uniforms: Object.assign({ uniWidth: "float", uniHeight: "float", uniTexture: "sampler2D" }, filter.uniforms),
                varying: {
                    varUV: "vec2",
                },
                mainCode: filter.fragmentShaderCode,
                functions: filter.extraFunctions,
            }).code;
            return new _program_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdProgram(context.gl, { vert, frag });
        });
        const vaos = programs.map(program => createVAO(context, program, options.flipY ? -1 : +1));
        this.program = programs.pop();
        this.programs = programs;
        this.filter = filters.pop();
        this.filters = filters;
        const vao = vaos.pop();
        this.vaos = vaos;
        const count = vaos.length + (options.flipY ? 1 : 0);
        this.vao = count % 2 === 0 ? vao : createVAO(context, this.program, -1);
        const framebuffer = context.gl.createFramebuffer();
        if (!framebuffer)
            throw new Error("Unable to create a WebGL Framebuffer!");
        this.framebuffer = framebuffer;
        this.name = (_c = options.name) !== null && _c !== void 0 ? _c : `Filter/${this.name}`;
    }
    delete() {
        const { context, textures, vaos, vao, framebuffer } = this;
        const { gl } = context;
        for (const vao of vaos)
            vao.delete();
        vao.delete();
        gl.deleteFramebuffer(framebuffer);
        if (textures) {
            for (const tex of textures)
                gl.deleteTexture(tex);
        }
    }
    paint(time, delay) {
        const { vaos, texture, z, context } = this;
        const { gl } = this.program;
        let inputTexture = texture === null || texture === void 0 ? void 0 : texture.glTexture;
        if (!inputTexture) {
            console.warn("[TgdPainterFilter] Input texture is undefined!");
            return;
        }
        if (vaos.length > 0) {
            const { programs, filters, framebuffer } = this;
            const currentFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
            const textures = this.getTextures(gl);
            let texIndex = 0;
            let outputTexture = textures[texIndex];
            for (const [index, vao] of vaos.entries()) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);
                paintOneFilter(time, delay, vao, programs[index], filters[index], inputTexture, z, context);
                texIndex = 1 - texIndex;
                inputTexture = outputTexture;
                outputTexture = textures[texIndex];
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER, currentFramebuffer);
        }
        paintOneFilter(time, delay, this.vao, this.program, this.filter, inputTexture, z, context);
        gl.bindVertexArray(null);
    }
    getTextures(gl) {
        var _a;
        const { width, height } = (_a = this.texture) !== null && _a !== void 0 ? _a : { width: 64, height: 64 };
        if (this.textures &&
            this.texturesWith === width &&
            this.texturesHeight === height) {
            return [...this.textures];
        }
        if (this.textures) {
            for (const tex of this.textures)
                gl.deleteTexture(tex);
        }
        this.texturesWith = width;
        this.texturesHeight = height;
        this.textures = [0, 1].map(() => {
            const texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            return texture;
        });
        return this.textures;
    }
}
function paintOneFilter(time, delay, vao, program, filter, texture, z, context) {
    const { gl } = program;
    program.use();
    program.uniform1f("uniZ", z);
    filter.setUniforms({ context, program, time, delay });
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    program.uniform1i("uniTexture", 0);
    vao.bind();
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
}
function createVAO(context, program, flipY = +1) {
    const dataset = new _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__.TgdDataset({
        attPoint: "vec2",
        attUV: "vec2",
    });
    // prettier-ignore
    dataset.set("attPoint", new Float32Array([
        -1, +1 * flipY,
        +1, +1 * flipY,
        -1, -1 * flipY,
        +1, -1 * flipY,
    ]));
    dataset.set("attUV", new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]));
    const vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, program, [dataset]);
    if (!vao)
        throw new Error("Unable to create WebGL VAO!");
    return vao;
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 5647:
/*!****************************************************!*\
  !*** ../../tgd2/lib/dist/utils/animation/chain.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdAnimChain: () => (/* binding */ tgdAnimChain)
/* harmony export */ });
/* harmony import */ var _easing_function_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../easing-function/index.js */ 9248);

/**
 * Create an animation which is the chain of `animations`.
 */
function tgdAnimChain(animations, options = {}) {
    if (animations.length === 0) {
        return {
            action() { },
            duration: 0,
        };
    }
    const { intervals, duration } = computeIntervals(animations);
    let previousAnimation = null;
    let previousName = "???";
    return Object.assign(Object.assign({}, options), { duration,
        onEnd() {
            var _a, _b;
            (_a = previousAnimation === null || previousAnimation === void 0 ? void 0 : previousAnimation.onEnd) === null || _a === void 0 ? void 0 : _a.call(previousAnimation);
            (_b = options.onEnd) === null || _b === void 0 ? void 0 : _b.call(options);
        },
        action(alpha) {
            var _a, _b, _c;
            const t = alpha * duration;
            for (const { animation, begin, end } of intervals) {
                if (t >= begin && t <= end) {
                    if (previousAnimation && previousAnimation !== animation) {
                        (_a = previousAnimation.onEnd) === null || _a === void 0 ? void 0 : _a.call(previousAnimation);
                    }
                    previousAnimation = animation;
                    const intervalAlpha = computeIntervalAlpha(t, begin, end, animation.delay);
                    if (intervalAlpha < 0 || intervalAlpha > 1)
                        return;
                    if (previousName !== animation.name) {
                        previousName = (_b = animation.name) !== null && _b !== void 0 ? _b : "";
                    }
                    const easingFunction = (_c = animation.easingFunction) !== null && _c !== void 0 ? _c : _easing_function_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionLinear;
                    animation.action(easingFunction(intervalAlpha));
                    return;
                }
            }
        } });
}
function computeIntervals(animations) {
    var _a;
    const intervals = [];
    let begin = 0;
    let end = 0;
    for (const animation of animations) {
        const duration = animation.duration + ((_a = animation.delay) !== null && _a !== void 0 ? _a : 0);
        end = begin + duration;
        intervals.push({ animation, begin, end });
        begin += duration;
    }
    return { intervals, duration: end };
}
function computeIntervalAlpha(t, begin, end, delay = 0) {
    const actualBegin = begin + delay;
    const duration = end - actualBegin;
    return (t - actualBegin) / duration;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYW5pbWF0aW9uL2NoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRTVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FDeEIsVUFBMEIsRUFDMUIsVUFLSyxFQUFFO0lBRVAsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzFCLE9BQU87WUFDSCxNQUFNLEtBQUksQ0FBQztZQUNYLFFBQVEsRUFBRSxDQUFDO1NBQ2QsQ0FBQTtJQUNMLENBQUM7SUFFRCxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzVELElBQUksaUJBQWlCLEdBQXdCLElBQUksQ0FBQTtJQUNqRCxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUE7SUFDeEIsdUNBQ08sT0FBTyxLQUNWLFFBQVE7UUFDUixLQUFLOztZQUNELE1BQUEsaUJBQWlCLGFBQWpCLGlCQUFpQix1QkFBakIsaUJBQWlCLENBQUUsS0FBSyxpRUFBSSxDQUFBO1lBQzVCLE1BQUEsT0FBTyxDQUFDLEtBQUssdURBQUksQ0FBQTtRQUNyQixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQWE7O1lBQ2hCLE1BQU0sQ0FBQyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUE7WUFDMUIsS0FBSyxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxTQUFTLEVBQUUsQ0FBQztnQkFDaEQsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFDekIsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUUsQ0FBQzt3QkFDdkQsTUFBQSxpQkFBaUIsQ0FBQyxLQUFLLGlFQUFJLENBQUE7b0JBQy9CLENBQUM7b0JBQ0QsaUJBQWlCLEdBQUcsU0FBUyxDQUFBO29CQUM3QixNQUFNLGFBQWEsR0FBRyxvQkFBb0IsQ0FDdEMsQ0FBQyxFQUNELEtBQUssRUFDTCxHQUFHLEVBQ0gsU0FBUyxDQUFDLEtBQUssQ0FDbEIsQ0FBQTtvQkFDRCxJQUFJLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFHLENBQUM7d0JBQUUsT0FBTTtvQkFFbEQsSUFBSSxZQUFZLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUNsQyxZQUFZLEdBQUcsTUFBQSxTQUFTLENBQUMsSUFBSSxtQ0FBSSxFQUFFLENBQUE7b0JBQ3ZDLENBQUM7b0JBQ0QsTUFBTSxjQUFjLEdBQ2hCLE1BQUEsU0FBUyxDQUFDLGNBQWMsbUNBQUksdUJBQXVCLENBQUE7b0JBQ3ZELFNBQVMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUE7b0JBQy9DLE9BQU07Z0JBQ1YsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLElBQ0o7QUFDTCxDQUFDO0FBUUQsU0FBUyxnQkFBZ0IsQ0FBQyxVQUEwQjs7SUFDaEQsTUFBTSxTQUFTLEdBQWUsRUFBRSxDQUFBO0lBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNiLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUNYLEtBQUssTUFBTSxTQUFTLElBQUksVUFBVSxFQUFFLENBQUM7UUFDakMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxDQUFDLE1BQUEsU0FBUyxDQUFDLEtBQUssbUNBQUksQ0FBQyxDQUFDLENBQUE7UUFDNUQsR0FBRyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUE7UUFDdEIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUN6QyxLQUFLLElBQUksUUFBUSxDQUFBO0lBQ3JCLENBQUM7SUFDRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUN2QyxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FDekIsQ0FBUyxFQUNULEtBQWEsRUFDYixHQUFXLEVBQ1gsS0FBSyxHQUFHLENBQUM7SUFFVCxNQUFNLFdBQVcsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ2pDLE1BQU0sUUFBUSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUE7SUFDbEMsT0FBTyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxRQUFRLENBQUE7QUFDdkMsQ0FBQyJ9

/***/ }),

/***/ 5710:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/dataset/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdDataset: () => (/* reexport safe */ _dataset_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset)
/* harmony export */ });
/* harmony import */ var _dataset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataset.js */ 6526);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0YXNldC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFdBQVcsQ0FBQSJ9

/***/ }),

/***/ 5723:
/*!***************************************************************************!*\
  !*** ../../tgd2/lib/dist/utils/animation/chain-transfo-interpolations.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdAnimChainTransfoInterpolations: () => (/* binding */ tgdAnimChainTransfoInterpolations)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _action_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../action/index.js */ 2486);
/* harmony import */ var _chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chain.js */ 5647);



function tgdAnimChainTransfoInterpolations(transfo, steps, options = {}) {
    const animations = [];
    let previousTransfo = transfo;
    let counter = 1;
    for (const step of steps) {
        const nextTransfo = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdTransfo(previousTransfo).from(step.transfo);
        animations.push(Object.assign(Object.assign({ name: `Step#${counter++}` }, step), { action: (0,_action_index_js__WEBPACK_IMPORTED_MODULE_1__.tgdActionCreateTransfoInterpolation)(transfo, previousTransfo, nextTransfo) }));
        previousTransfo = nextTransfo;
    }
    return (0,_chain_js__WEBPACK_IMPORTED_MODULE_2__.tgdAnimChain)(animations, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhaW4tdHJhbnNmby1pbnRlcnBvbGF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9hbmltYXRpb24vY2hhaW4tdHJhbnNmby1pbnRlcnBvbGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFxQixNQUFNLFdBQVcsQ0FBQTtBQUV6RCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQVd0QyxNQUFNLFVBQVUsaUNBQWlDLENBQzdDLE9BQW1CLEVBQ25CLEtBQWlDLEVBQ2pDLFVBS0ssRUFBRTtJQUVQLE1BQU0sVUFBVSxHQUFtQixFQUFFLENBQUE7SUFDckMsSUFBSSxlQUFlLEdBQWUsT0FBTyxDQUFBO0lBQ3pDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQTtJQUNmLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7UUFDdkIsTUFBTSxXQUFXLEdBQUcsSUFBSSxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0RSxVQUFVLENBQUMsSUFBSSwrQkFDWCxJQUFJLEVBQUUsUUFBUSxPQUFPLEVBQUUsRUFBRSxJQUN0QixJQUFJLEtBQ1AsTUFBTSxFQUFFLG1DQUFtQyxDQUN2QyxPQUFPLEVBQ1AsZUFBZSxFQUNmLFdBQVcsQ0FDZCxJQUNILENBQUE7UUFDRixlQUFlLEdBQUcsV0FBVyxDQUFBO0lBQ2pDLENBQUM7SUFDRCxPQUFPLFlBQVksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDNUMsQ0FBQyJ9

/***/ }),

/***/ 5784:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background/background.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterBackground: () => (/* binding */ TgdPainterBackground)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../painter.js */ 2362);
/* harmony import */ var _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../dataset/dataset.js */ 6526);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../program/index.js */ 9974);
/* harmony import */ var _background_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./background.vert */ 7790);
/* harmony import */ var _background_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./background.frag */ 5383);






class TgdPainterBackground extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context, { texture, x = 0, y = 0, z = 0.999999, zoom = 1, scaleX = 1, scaleY = 1, mode = "cover", } = {}) {
        super();
        this.context = context;
        /**
         * With a zoom of **1**, the image will have the smaller size to cover
         * the whole scene.
         */
        this.zoom = 1;
        this.x = 0;
        this.y = 0;
        this.z = 1;
        this.mode = "cover";
        this.texture = texture;
        this.mode = mode;
        this.x = x;
        this.y = y;
        this.z = z;
        this.zoom = zoom;
        this.texture = texture;
        this.program = new _program_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdProgram(context.gl, {
            vert: _background_vert__WEBPACK_IMPORTED_MODULE_4__,
            frag: _background_frag__WEBPACK_IMPORTED_MODULE_5__,
        });
        const dataset = new _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__.TgdDataset({
            attPoint: "vec2",
            attUV: "vec2",
        });
        dataset.set("attPoint", new Float32Array([
            -1 * scaleX,
            +1 * scaleY,
            +1 * scaleX,
            +1 * scaleY,
            -1 * scaleX,
            -1 * scaleY,
            +1 * scaleX,
            -1 * scaleY,
        ]));
        dataset.set("attUV", new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]));
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, this.program, [dataset]);
    }
    delete() {
        const { program, vao } = this;
        program.delete();
        vao.delete();
    }
    paint() {
        const { gl } = this.context;
        const { vao, program, texture, zoom, x, y, z, mode } = this;
        program.use();
        const { scaleX, scaleY } = mode === "cover"
            ? this.getScaleForCover()
            : this.getScaleForContain();
        program.uniform2f("uniScale", scaleX, scaleY);
        program.uniform2f("uniScroll", x, y);
        program.uniform1f("uniZoom", 1 / zoom);
        program.uniform1f("uniZ", z);
        texture === null || texture === void 0 ? void 0 : texture.activate(0, program, "uniTexture");
        gl.disable(gl.CULL_FACE);
        vao.bind();
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    }
    getScaleForCover() {
        const { texture, context } = this;
        if (!texture)
            return { scaleX: 1, scaleY: 1 };
        const { drawingBufferWidth: width, drawingBufferHeight: height } = context.gl;
        const horizontal = texture.width * height > texture.height * width;
        const scaleX = horizontal
            ? (texture.width * height) / (width * texture.height)
            : 1;
        const scaleY = horizontal
            ? 1
            : (texture.height * width) / (height * texture.width);
        return { scaleX, scaleY };
    }
    getScaleForContain() {
        const { texture, context } = this;
        if (!texture)
            return { scaleX: 1, scaleY: 1 };
        const { drawingBufferWidth: width, drawingBufferHeight: height } = context.gl;
        const aspectRatio = width / height;
        const aspectRatioTexture = texture.width / texture.height;
        const sx = width / texture.width;
        const sy = height / texture.height;
        if (sx > sy) {
            // We took all vertical space and have void on right an left.
            return {
                scaleX: aspectRatioTexture / aspectRatio,
                scaleY: 1,
            };
        }
        return {
            scaleX: 1,
            scaleY: aspectRatio / aspectRatioTexture,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWludGVyL2JhY2tncm91bmQvYmFja2dyb3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBR3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFekMsT0FBTyxJQUFJLE1BQU0sbUJBQW1CLENBQUE7QUFDcEMsT0FBTyxJQUFJLE1BQU0sbUJBQW1CLENBQUE7QUE0QnBDLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxVQUFVO0lBZ0JoRCxZQUNxQixPQUF1QyxFQUN4RCxFQUNJLE9BQU8sRUFDUCxDQUFDLEdBQUcsQ0FBQyxFQUNMLENBQUMsR0FBRyxDQUFDLEVBQ0wsQ0FBQyxHQUFHLFFBQVEsRUFDWixJQUFJLEdBQUcsQ0FBQyxFQUNSLE1BQU0sR0FBRyxDQUFDLEVBQ1YsTUFBTSxHQUFHLENBQUMsRUFDVixJQUFJLEdBQUcsT0FBTyxNQUN3QixFQUFFO1FBRTVDLEtBQUssRUFBRSxDQUFBO1FBWlUsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7UUFYNUQ7OztXQUdHO1FBQ0ksU0FBSSxHQUFHLENBQUMsQ0FBQTtRQUNSLE1BQUMsR0FBRyxDQUFDLENBQUE7UUFDTCxNQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ0wsTUFBQyxHQUFHLENBQUMsQ0FBQTtRQUNMLFNBQUksR0FBd0IsT0FBTyxDQUFBO1FBZ0J0QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNWLElBQUksQ0FBQyxDQUFD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

/***/ }),

/***/ 5791:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/painter/axes/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterAxes: () => (/* reexport safe */ _axes_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterAxes)
/* harmony export */ });
/* harmony import */ var _axes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axes.js */ 2426);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9heGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxDQUFBIn0=

/***/ }),

/***/ 5819:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/utils/canvas.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCanvasCreate: () => (/* binding */ tgdCanvasCreate),
/* harmony export */   tgdCanvasCreateCreateGradientvertical: () => (/* binding */ tgdCanvasCreateCreateGradientvertical),
/* harmony export */   tgdCanvasCreateFill: () => (/* binding */ tgdCanvasCreateFill),
/* harmony export */   tgdCanvasCreateGradient: () => (/* binding */ tgdCanvasCreateGradient),
/* harmony export */   tgdCanvasCreateGradientHorizontal: () => (/* binding */ tgdCanvasCreateGradientHorizontal),
/* harmony export */   tgdCanvasCreatePalette: () => (/* binding */ tgdCanvasCreatePalette),
/* harmony export */   tgdCanvasCreateWithContext2D: () => (/* binding */ tgdCanvasCreateWithContext2D)
/* harmony export */ });
/**
 * Helper to get a canvas with the given size.
 */
function tgdCanvasCreate(width, height) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    return canvas;
}
/**
 * Helper to get a canvas of the given size and a 2D context on it.
 * If this is not possible, the method will throw an exception.
 */
function tgdCanvasCreateWithContext2D(width, height, settings) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    const context = canvas.getContext("2d", settings);
    if (!context)
        throw new Error("Unable to create 2D context!");
    return { canvas, ctx: context };
}
/**
 * A palette is an image with a different (or not) color for each pixel.
 * It can be used in a texture with NEAREST filter, for instance.
 * @param colors CSS colors of each pixel
 * @param colums If not defined, the canvas will have a size of (colors.length, 1).
 * But if `colums` is defined, it will be the width of the vanva and the height will
 * be computed to hold all the colors.
 * If there are more pixels in the canvas that colors, we just wrap around the colors
 * array.
 * @param rows If defined, it will be the height of the canvas.
 * @example
 * ```
 * // Create a 5x5 checkboard.
 * const canvas = tgdCanvasCreatePalette(["#000", "#fff"], 5, 5)
 * ```
 */
function tgdCanvasCreatePalette(colors, colums = 0, rows = 0) {
    const width = colums > 0 ? colums : colors.length;
    const height = rows > 0 ? rows : Math.ceil(colors.length / width);
    const { canvas, ctx } = tgdCanvasCreateWithContext2D(width, height);
    let colorIndex = 0;
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            ctx.fillStyle = colors[colorIndex % colors.length];
            ctx.fillRect(x, y, 1, 1);
            colorIndex++;
        }
    }
    return canvas;
}
function tgdCanvasCreateFill(width, height, fillColor = "#000") {
    const { canvas, ctx } = tgdCanvasCreateWithContext2D(width, height);
    ctx.fillStyle = fillColor;
    ctx.fillRect(0, 0, width, height);
    return canvas;
}
function tgdCanvasCreateGradientHorizontal(size, colors) {
    return tgdCanvasCreateGradient(size, 1, 1, 0, colors);
}
function tgdCanvasCreateCreateGradientvertical(size, colors) {
    return tgdCanvasCreateGradient(1, size, 0, 1, colors);
}
/**
 * Create a canvas with a linear gradient.
 * @param width Width of the resulting canvas.
 * @param height Height of the resulting canvas.
 * @param directionX X coord of the direction vector.
 * @param directionY Y coord of the direction vector.
 * @param colors CSS colors of each step
 */
function tgdCanvasCreateGradient(width, height, directionX, directionY, colors) {
    const { canvas, ctx } = tgdCanvasCreateWithContext2D(width, height);
    const gradient = ctx.createLinearGradient(0, 0, width * directionX, height * directionY);
    for (let colorIndex = 0; colorIndex < colors.length; colorIndex++) {
        gradient.addColorStop(colorIndex / (colors.length - 1), colors[colorIndex]);
    }
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    return canvas;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzNCLEtBQWEsRUFDYixNQUFjO0lBRWQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUMvQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUN0QixPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLDRCQUE0QixDQUN4QyxLQUFhLEVBQ2IsTUFBYyxFQUNkLFFBQTJDO0lBRTNDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDL0MsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDdEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDakQsSUFBSSxDQUFDLE9BQU87UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUE7SUFFN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFDbkMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxNQUFnQixFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUM7SUFDekUsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBQ2pFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsNEJBQTRCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ25FLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzdCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDbEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUN4QixVQUFVLEVBQUUsQ0FBQTtRQUNoQixDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQy9CLEtBQWEsRUFDYixNQUFjLEVBQ2QsWUFBb0IsTUFBTTtJQUUxQixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLDRCQUE0QixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNuRSxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtJQUN6QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ2pDLE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsaUNBQWlDLENBQzdDLElBQVksRUFDWixNQUFnQjtJQUVoQixPQUFPLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUN6RCxDQUFDO0FBRUQsTUFBTSxVQUFVLHFDQUFxQyxDQUNqRCxJQUFZLEVBQ1osTUFBZ0I7SUFFaEIsT0FBTyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDekQsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQ25DLEtBQWEsRUFDYixNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsVUFBa0IsRUFDbEIsTUFBZ0I7SUFFaEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyw0QkFBNEIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDbkUsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUNyQyxDQUFDLEVBQ0QsQ0FBQyxFQUNELEtBQUssR0FBRyxVQUFVLEVBQ2xCLE1BQU0sR0FBRyxVQUFVLENBQ3RCLENBQUE7SUFDRCxLQUFLLElBQUksVUFBVSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDO1FBQ2hFLFFBQVEsQ0FBQyxZQUFZLENBQ2pCLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FDckIsQ0FBQTtJQUNMLENBQUM7SUFDRCxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQTtJQUN4QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ2pDLE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUMifQ==

/***/ }),

/***/ 5856:
/*!*****************************************************!*\
  !*** ../../tgd2/lib/dist/painter/segments/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterSegments: () => (/* reexport safe */ _segments_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterSegments),
/* harmony export */   TgdPainterSegmentsData: () => (/* reexport safe */ _segments_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterSegmentsData)
/* harmony export */ });
/* harmony import */ var _segments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./segments.js */ 7964);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9zZWdtZW50cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFlBQVksQ0FBQSJ9

/***/ }),

/***/ 5938:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/table/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTable: () => (/* reexport safe */ _table_js__WEBPACK_IMPORTED_MODULE_0__.TgdTable),
/* harmony export */   TgdTableFloat32: () => (/* reexport safe */ _table_js__WEBPACK_IMPORTED_MODULE_0__.TgdTableFloat32),
/* harmony export */   TgdTableUint8: () => (/* reexport safe */ _table_js__WEBPACK_IMPORTED_MODULE_0__.TgdTableUint8)
/* harmony export */ });
/* harmony import */ var _table_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./table.js */ 8806);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFibGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 5950:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/utils/state/blend.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglBlendExec: () => (/* binding */ webglBlendExec),
/* harmony export */   webglBlendGet: () => (/* binding */ webglBlendGet),
/* harmony export */   webglBlendSet: () => (/* binding */ webglBlendSet),
/* harmony export */   webglDebugBlend: () => (/* binding */ webglDebugBlend),
/* harmony export */   webglPresetBlend: () => (/* binding */ webglPresetBlend)
/* harmony export */ });
/* harmony import */ var _debug_debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../debug/debug.js */ 3722);
/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../types/index.js */ 5327);


const webglPresetBlend = {
    off: {
        enabled: false,
        equationColor: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionColorSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.SRC_ALPHA,
        functionColorDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE_MINUS_SRC_ALPHA,
        equationAlpha: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionAlphaSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionAlphaDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ZERO,
    },
    alpha: {
        enabled: true,
        equationColor: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionColorSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.SRC_ALPHA,
        functionColorDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE_MINUS_SRC_ALPHA,
        equationAlpha: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionAlphaSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionAlphaDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ZERO,
    },
    add: {
        enabled: true,
        equationColor: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionColorSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionColorDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        equationAlpha: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionAlphaSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionAlphaDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ZERO,
    },
    premultipliedAlpha: {
        enabled: true,
        equationColor: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionColorSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionColorDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE_MINUS_SRC_ALPHA,
        equationAlpha: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendEquation.FUNC_ADD,
        functionAlphaSrc: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ONE,
        functionAlphaDst: _types_index_js__WEBPACK_IMPORTED_MODULE_1__.WebglEnumBlendFunction.ZERO,
    },
};
function webglBlendSet(gl, blend) {
    if (blend.enabled)
        gl.enable(gl.BLEND);
    else
        gl.disable(gl.BLEND);
    gl.blendEquationSeparate(blend.equationColor, blend.equationAlpha);
    gl.blendFuncSeparate(blend.functionColorSrc, blend.functionColorDst, blend.functionAlphaSrc, blend.functionAlphaDst);
}
function webglBlendGet(gl) {
    return {
        enabled: Boolean(gl.getParameter(gl.BLEND)),
        equationAlpha: gl.getParameter(gl.BLEND_EQUATION_ALPHA),
        equationColor: gl.getParameter(gl.BLEND_EQUATION_RGB),
        functionAlphaDst: gl.getParameter(gl.BLEND_DST_ALPHA),
        functionAlphaSrc: gl.getParameter(gl.BLEND_SRC_ALPHA),
        functionColorDst: gl.getParameter(gl.BLEND_DST_RGB),
        functionColorSrc: gl.getParameter(gl.BLEND_SRC_ALPHA),
    };
}
function webglBlendExec(gl, blend, action) {
    const currentState = webglBlendGet(gl);
    webglBlendSet(gl, blend);
    try {
        action();
    }
    finally {
        webglBlendSet(gl, currentState);
    }
}
function webglDebugBlend(gl, caption = "Blend enabled:") {
    console.log(caption);
    const blend = webglBlendGet(gl);
    (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.debug)([
        [caption, blend.enabled, "\n"],
        [
            { cls: "code" },
            [
                "gl.",
                blend.enabled ? "enable" : "disable",
                "(",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)("BLEND"),
                ")\n",
            ],
            [
                "gl.blendEquationSeparate(",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.equationColor),
                ", ",
                (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.equationAlpha),
                ")\n",
            ],
            [
                "gl.blendFuncSeparate(\n",
                ["    ", (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.functionColorSrc), ",\n"],
                ["    ", (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.functionColorDst), ",\n"],
                ["    ", (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.functionAlphaSrc), ",\n"],
                ["    ", (0,_debug_debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum)(blend.functionAlphaDst), "\n"],
                ")\n",
            ],
        ],
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RhdGUvYmxlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFZM0UsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBRXpCO0lBQ0EsR0FBRyxFQUFFO1FBQ0QsT0FBTyxFQUFFLEtBQUs7UUFDZCxhQUFhLEVBQUUsc0JBQXNCLENBQUMsUUFBUTtRQUM5QyxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxTQUFTO1FBQ2xELGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLG1CQUFtQjtRQUM1RCxhQUFhLEVBQUUsc0JBQXNCLENBQUMsUUFBUTtRQUM5QyxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxHQUFHO1FBQzVDLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLElBQUk7S0FDaEQ7SUFDRCxLQUFLLEVBQUU7UUFDSCxPQUFPLEVBQUUsSUFBSTtRQUNiLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxRQUFRO1FBQzlDLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLFNBQVM7UUFDbEQsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUMsbUJBQW1CO1FBQzVELGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxRQUFRO1FBQzlDLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLEdBQUc7UUFDNUMsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUMsSUFBSTtLQUNoRDtJQUNELEdBQUcsRUFBRTtRQUNELE9BQU8sRUFBRSxJQUFJO1FBQ2IsYUFBYSxFQUFFLHNCQUFzQixDQUFDLFFBQVE7UUFDOUMsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUMsR0FBRztRQUM1QyxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxHQUFHO1FBQzVDLGFB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

/***/ }),

/***/ 5961:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/input/inputs.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdInputs: () => (/* binding */ TgdInputs)
/* harmony export */ });
/* harmony import */ var _keyboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyboard.js */ 4117);
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pointer.js */ 4143);


class TgdInputs {
    constructor(canvas) {
        this.canvas = canvas;
        this._keyboard = null;
        this._pointer = null;
    }
    get keyboard() {
        if (!this._keyboard) {
            this._keyboard = new _keyboard_js__WEBPACK_IMPORTED_MODULE_0__.TgdInputKeyboardImpl();
        }
        return this._keyboard;
    }
    get pointer() {
        if (!this._pointer) {
            this._pointer = new _pointer_js__WEBPACK_IMPORTED_MODULE_1__.TgdInputPointerImpl(this.canvas);
        }
        return this._pointer;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2lucHV0L2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUl4RCxNQUFNLE9BQU8sU0FBUztJQUlsQixZQUE2QixNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUg5QyxjQUFTLEdBQTRCLElBQUksQ0FBQTtRQUN6QyxhQUFRLEdBQTJCLElBQUksQ0FBQTtJQUVVLENBQUM7SUFFMUQsSUFBSSxRQUFRO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQTtRQUMvQyxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFBO0lBQ3pCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEQsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQTtJQUN4QixDQUFDO0NBQ0oifQ==

/***/ }),

/***/ 5970:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/event/event.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdEvent: () => (/* binding */ TgdEvent)
/* harmony export */ });
class TgdEvent {
    constructor() {
        this.listeners = new Set();
    }
    addListener(listener) {
        this.listeners.add(listener);
    }
    removeListener(listener) {
        this.listeners.delete(listener);
    }
    dispatch(value) {
        for (const listener of this.listeners)
            listener(value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnQvZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFFBQVE7SUFBckI7UUFDcUIsY0FBUyxHQUFHLElBQUksR0FBRyxFQUFlLENBQUE7SUFhdkQsQ0FBQztJQVhHLFdBQVcsQ0FBQyxRQUFxQjtRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsY0FBYyxDQUFDLFFBQXFCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBUTtRQUNiLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVM7WUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDMUQsQ0FBQztDQUNKIn0=

/***/ }),

/***/ 6009:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/painter/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterAxes: () => (/* reexport safe */ _axes_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterAxes),
/* harmony export */   TgdPainterBackground: () => (/* reexport safe */ _background_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainterBackground),
/* harmony export */   TgdPainterBackgroundWithDepth: () => (/* reexport safe */ _background_with_depth_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdPainterBackgroundWithDepth),
/* harmony export */   TgdPainterClear: () => (/* reexport safe */ _clear_js__WEBPACK_IMPORTED_MODULE_3__.TgdPainterClear),
/* harmony export */   TgdPainterDebugStencil: () => (/* reexport safe */ _debug_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdPainterDebugStencil),
/* harmony export */   TgdPainterDepth: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_5__.TgdPainterDepth),
/* harmony export */   TgdPainterFilter: () => (/* reexport safe */ _filter_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdPainterFilter),
/* harmony export */   TgdPainterFramebuffer: () => (/* reexport safe */ _framebuffer_js__WEBPACK_IMPORTED_MODULE_7__.TgdPainterFramebuffer),
/* harmony export */   TgdPainterGroup: () => (/* reexport safe */ _group_js__WEBPACK_IMPORTED_MODULE_8__.TgdPainterGroup),
/* harmony export */   TgdPainterLogic: () => (/* reexport safe */ _logic_js__WEBPACK_IMPORTED_MODULE_9__.TgdPainterLogic),
/* harmony export */   TgdPainterMesh: () => (/* reexport safe */ _mesh_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdPainterMesh),
/* harmony export */   TgdPainterMeshGltf: () => (/* reexport safe */ _mesh_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdPainterMeshGltf),
/* harmony export */   TgdPainterMeshNormals: () => (/* reexport safe */ _mesh_index_js__WEBPACK_IMPORTED_MODULE_10__.TgdPainterMeshNormals),
/* harmony export */   TgdPainterNode: () => (/* reexport safe */ _node_node_js__WEBPACK_IMPORTED_MODULE_11__.TgdPainterNode),
/* harmony export */   TgdPainterSegments: () => (/* reexport safe */ _segments_index_js__WEBPACK_IMPORTED_MODULE_12__.TgdPainterSegments),
/* harmony export */   TgdPainterSegmentsData: () => (/* reexport safe */ _segments_index_js__WEBPACK_IMPORTED_MODULE_12__.TgdPainterSegmentsData),
/* harmony export */   TgdPainterSkybox: () => (/* reexport safe */ _skybox_index_js__WEBPACK_IMPORTED_MODULE_13__.TgdPainterSkybox),
/* harmony export */   TgdPainterState: () => (/* reexport safe */ _state_state_js__WEBPACK_IMPORTED_MODULE_14__.TgdPainterState)
/* harmony export */ });
/* harmony import */ var _axes_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./axes/index.js */ 5791);
/* harmony import */ var _background_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./background/index.js */ 1230);
/* harmony import */ var _background_with_depth_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./background-with-depth/index.js */ 4049);
/* harmony import */ var _clear_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clear.js */ 640);
/* harmony import */ var _debug_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug/index.js */ 2805);
/* harmony import */ var _depth_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./depth.js */ 4968);
/* harmony import */ var _filter_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./filter/index.js */ 1940);
/* harmony import */ var _framebuffer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./framebuffer.js */ 1178);
/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./group.js */ 814);
/* harmony import */ var _logic_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logic.js */ 4519);
/* harmony import */ var _mesh_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./mesh/index.js */ 8255);
/* harmony import */ var _node_node_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./node/node.js */ 7872);
/* harmony import */ var _segments_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./segments/index.js */ 5856);
/* harmony import */ var _skybox_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./skybox/index.js */ 8228);
/* harmony import */ var _state_state_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./state/state.js */ 8918);















//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFpbnRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLGNBQWMsQ0FBQTtBQUM1QixjQUFjLHlCQUF5QixDQUFBO0FBQ3ZDLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsVUFBVSxDQUFBO0FBQ3hCLGNBQWMsZUFBZSxDQUFBO0FBQzdCLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsYUFBYSxDQUFBO0FBQzNCLGNBQWMsWUFBWSxDQUFBO0FBQzFCLGNBQWMsVUFBVSxDQUFBO0FBQ3hCLGNBQWMsZUFBZSxDQUFBIn0=

/***/ }),

/***/ 6018:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/material/material.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterial: () => (/* binding */ TgdMaterial)
/* harmony export */ });
class TgdMaterial {
    constructor() {
        /**
         * Example:
         * ```
         * {
         *   varNormal: "vec3",
         *   varUV: "vec2"
         * }
         * ```
         */
        this.varyings = {};
        this.uniforms = {};
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0ZXJpYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0ZXJpYWwvbWF0ZXJpYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxPQUFnQixXQUFXO0lBQWpDO1FBQ0k7Ozs7Ozs7O1dBUUc7UUFDYSxhQUFRLEdBQTJDLEVBQUUsQ0FBQTtRQUVyRCxhQUFRLEdBQXlDLEVBQUUsQ0FBQTtJQXNCdkUsQ0FBQztDQUFBIn0=

/***/ }),

/***/ 6022:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/types/gltf.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertTgdFormatGltf: () => (/* binding */ assertTgdFormatGltf),
/* harmony export */   isTgdFormatGltfCameraOrthographic: () => (/* binding */ isTgdFormatGltfCameraOrthographic),
/* harmony export */   isTgdFormatGltfCameraPerspective: () => (/* binding */ isTgdFormatGltfCameraPerspective)
/* harmony export */ });
/* harmony import */ var _guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guards.js */ 7937);
// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.pdf

function isTgdFormatGltfCameraPerspective(data) {
    return data.type === "perspective";
}
function isTgdFormatGltfCameraOrthographic(data) {
    return data.type === "orthographic";
}
function assertTgdFormatGltf(data) {
    (0,_guards_js__WEBPACK_IMPORTED_MODULE_0__.assertType)(data, [
        "partial",
        {
            accessors: [
                "array",
                {
                    bufferView: ["?", "number"],
                    byteOffset: ["?", "number"],
                    componentType: "number",
                    normalized: ["?", "boolean"],
                    count: "number",
                    type: "string",
                    name: ["?", "string"],
                },
            ],
            meshes: [
                "array",
                {
                    name: "string",
                    primitives: [
                        "array",
                        {
                            attributes: ["map", "number"],
                            indices: ["?", "number"],
                            mode: ["?", "number"],
                            material: ["?", "number"],
                        },
                    ],
                },
            ],
            images: [
                "array",
                [
                    "partial",
                    {
                        bufferView: "number",
                        mimeType: "string",
                        name: "string",
                        uri: "string",
                    },
                ],
            ],
            bufferViews: [
                "array",
                {
                    buffer: "number",
                    byteLength: "number",
                    byteOffset: ["?", "number"],
                    byteStride: ["?", "number"],
                    target: ["?", "number"],
                },
            ],
            materials: ["array", typeMaterial],
            samplers: [
                "array",
                [
                    "partial",
                    {
                        minFilter: "number",
                        magFilter: "number",
                        wrapS: "number",
                        wrapT: "number",
                        name: "string",
                    },
                ],
            ],
            textures: [
                "array",
                [
                    "partial",
                    {
                        sampler: "number",
                        source: "number",
                        name: "string",
                    },
                ],
            ],
        },
    ]);
}
const typeTextureInfo = {
    index: "number",
    texCoord: ["?", "number"],
};
const typePbrMetallicRoughness = [
    "partial",
    {
        baseColorFactor: ["array(4)", "number"],
        baseColorTexture: typeTextureInfo,
        metallicFactor: "number",
        roughnessFactor: "number",
        metalicRoughnessTexture: typeTextureInfo,
    },
];
const typeMaterial = [
    "partial",
    {
        name: "string",
        pbrMetallicRoughness: typePbrMetallicRoughness,
        normalTexture: Object.assign(Object.assign({}, typeTextureInfo), { scale: ["?", "number"] }),
        occlusionTexture: Object.assign(Object.assign({}, typeTextureInfo), { strength: ["?", "number"] }),
        emissiveTexture: typeTextureInfo,
        alphaMode: ["literal", "OPAQUE", "MASK", "BLEND"],
        alphaCutoff: "number",
        doubleSided: "boolean",
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x0Zi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9nbHRmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUUzRCxPQUFPLEVBQVcsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFtS3ZELE1BQU0sVUFBVSxnQ0FBZ0MsQ0FDNUMsSUFBeUI7SUFFekIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQTtBQUN0QyxDQUFDO0FBZUQsTUFBTSxVQUFVLGlDQUFpQyxDQUM3QyxJQUF5QjtJQUV6QixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFBO0FBQ3ZDLENBQUM7QUFnREQsTUFBTSxVQUFVLG1CQUFtQixDQUMvQixJQUFhO0lBRWIsVUFBVSxDQUFDLElBQUksRUFBRTtRQUNiLFNBQVM7UUFDVDtZQUNJLFNBQVMsRUFBRTtnQkFDUCxPQUFPO2dCQUNQO29CQUNJLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7b0JBQzNCLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7b0JBQzNCLGFBQWEsRUFBRSxRQUFRO29CQUN2QixVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO29CQUM1QixLQUFLLEVBQUUsUUFBUTtvQkFDZixJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO2lCQUN4QjthQUNKO1lBQ0QsTUFBTSxFQUFFO2dCQUNKLE9BQU87Z0JBQ1A7b0JBQ0ksSUFBSSxFQUFFLFFBQVE7b0JBQ2QsVUFBVSxFQUFFO3dCQUNSLE9BQU87d0JBQ1A7NEJBQ0ksVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQzs0QkFDN0IsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQzs0QkFDeEIsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQzs0QkFDckIsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQzt5QkFDNUI7cUJBQ0o7aUJBQ0o7YUFDSjtZQUNELE1BQU0sRUFBRTtnQkFDSixPQUFPO2dCQUNQO29CQUNJLFNBQVM7b0JBQ1Q7d0JBQ0ksVUFBVSxFQUFFLFFBQVE7d0JBQ3BCLFFBQVEsRUFBRSxRQUFRO3dCQUNsQixJQUFJLEVBQUUsUUFBUTt3QkFDZCxHQUFHLEVBQUUsUUFBUTtxQkFDaEI7aUJBQ0o7YUFDSjtZQUNELFdBQVcsRUFBRTtnQkFDVCxPQUFPO2dCQUNQO29CQUNJLE1BQU0sRUFBRSxRQUFRO29CQUNoQixVQUFVLEVBQUUsUUFBUTtvQkFDcEIsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztvQkFDM0IsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztvQkFDM0IsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztpQkFDMUI7YUFDSjtZQUNELFNBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7WUFDbEMsUUFBUSxFQUFFO2dCQUNOLE9BQU87Z0JBQ1A7b0JBQ0ksU0FBUztvQkFDVDt3QkFDSSxTQUFTLEVBQUUsUUFBUTt3QkFDbkIsU0FBUyxFQUFFLFFBQVE7d0JBQ25CLEtBQUssRUFBRSxRQUFRO3dCQUNmLEtBQUssRUFBRSxRQUFRO3dCQUNmLElBQUksRUFBRSxRQUFRO3FCQUNqQjtpQkFDSjthQUNKO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLE9BQU87Z0JBQ1A7b0JBQ0ksU0FBUztvQkFDVDt3QkFDSSxPQUFPLEVBQUUsUUFBUTt3QkFDakIsTUFBTSxFQUFFLFFBQVE7d0JBQ2hCLElBQUksRUFBRSxRQUFRO3FCQUNqQjtpQkFDSjthQUNKO1NBQ0o7S0FDSixDQUFDLENBQUE7QUFDTixDQUFDO0FBRUQsTUFBTSxlQUFlLEdBQVk7SUFDN0IsS0FBSyxFQUFFLFFBQVE7SUFDZixRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO0NBQzVCLENBQUE7QUFFRCxNQUFNLHdCQUF3QixHQUFZO0lBQ3RDLFNBQVM7SUFDVDtRQUNJLGVBQWUsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7UUFDdkMsZ0JBQWdCLEVBQUUsZUFBZTtRQUNqQyxjQUFjLEVBQUUsUUFBUTtRQUN4QixlQUFlLEVBQUUsUUFBUTtRQUN6Qix1QkFBdUIsRUFBRSxlQUFlO0tBQzNDO0NBQ0osQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFZO0lBQzFCLFNBQVM7SUFDVDtRQUNJLElBQUksRUFBRSxRQUFRO1FBQ2Qsb0JBQW9CLEVBQUUsd0JBQXdCO1FBQzlDLGFBQWEsa0NBQ04sZUFBZSxLQUNsQixLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQ3pCO1FBQ0QsZ0JBQWdCLGtDQUNULGVBQWUsS0FDbEIsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUM1QjtRQUNELGVBQWUsRUFBRSxlQUFlO1FBQ2hDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztRQUNqRCxXQUFXLEVBQUUsUUFBUTtRQUNyQixXQUFXLEVBQUUsU0FBUztLQUN6QjtDQUNKLENBQUEifQ==

/***/ }),

/***/ 6088:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/math/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMat3: () => (/* reexport safe */ _mat3_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat3),
/* harmony export */   TgdMat4: () => (/* reexport safe */ _mat4_js__WEBPACK_IMPORTED_MODULE_1__.TgdMat4),
/* harmony export */   TgdQuat: () => (/* reexport safe */ _quat_js__WEBPACK_IMPORTED_MODULE_2__.TgdQuat),
/* harmony export */   TgdTransfo: () => (/* reexport safe */ _transfo_js__WEBPACK_IMPORTED_MODULE_3__.TgdTransfo),
/* harmony export */   TgdVec2: () => (/* reexport safe */ _vec2_js__WEBPACK_IMPORTED_MODULE_4__.TgdVec2),
/* harmony export */   TgdVec3: () => (/* reexport safe */ _vec3_js__WEBPACK_IMPORTED_MODULE_5__.TgdVec3),
/* harmony export */   TgdVec4: () => (/* reexport safe */ _vec4_js__WEBPACK_IMPORTED_MODULE_6__.TgdVec4)
/* harmony export */ });
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat3.js */ 277);
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat4.js */ 5008);
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quat.js */ 721);
/* harmony import */ var _transfo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transfo.js */ 8537);
/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vec2.js */ 7470);
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vec3.js */ 7389);
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vec4.js */ 6648);







//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLFdBQVcsQ0FBQTtBQUN6QixjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLFFBQVEsQ0FBQTtBQUN0QixjQUFjLFFBQVEsQ0FBQSJ9

/***/ }),

/***/ 6120:
/*!******************************************************************!*\
  !*** ../../tgd2/lib/dist/context/animation/animation-manager.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdManagerAnimation: () => (/* binding */ TgdManagerAnimation)
/* harmony export */ });
class TgdManagerAnimation {
    constructor() {
        this.animations = new Map();
    }
    schedule(animation) {
        var _a;
        if (!animation.name)
            animation.name = `TgdAnimation#${TgdManagerAnimation.counter++}`;
        const { action, duration, easingFunction, repeat } = animation;
        this.animations.set(animation, {
            start: -1,
            delay: (_a = animation.delay) !== null && _a !== void 0 ? _a : 0,
            duration: duration,
            inverseDuration: 1 / duration,
            action: easingFunction
                ? (alpha) => action(easingFunction(alpha))
                : action,
            loop: 1,
            repeat: repeat !== null && repeat !== void 0 ? repeat : 1,
            cancel: () => this.cancel(animation),
            onEnd: animation.onEnd,
        });
        return animation;
    }
    cancel(animation) {
        this.animations.delete(animation);
    }
    paint(time) {
        var _a;
        if (this.animations.size === 0)
            return false;
        for (const anim of this.animations.values()) {
            if (anim.start < 0) {
                // Initialize animation.
                anim.start = time + anim.delay;
            }
            const relativeTime = time - anim.start;
            if (relativeTime < 0)
                continue;
            const t = Math.min(1, anim.inverseDuration * relativeTime);
            anim.action(t);
            while (time > anim.start + anim.duration) {
                try {
                    (_a = anim.onEnd) === null || _a === void 0 ? void 0 : _a.call(anim);
                }
                catch (error) {
                    console.error("Animation.onEnd() failed for", anim);
                    console.error(error);
                }
                anim.loop++;
                anim.start += anim.duration;
            }
            if (anim.loop > anim.repeat) {
                anim.cancel();
            }
        }
        return true;
    }
}
TgdManagerAnimation.counter = 1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udGV4dC9hbmltYXRpb24vYW5pbWF0aW9uLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY0EsTUFBTSxPQUFPLG1CQUFtQjtJQUFoQztRQUdxQixlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTJCLENBQUE7SUF1RHBFLENBQUM7SUFyREcsUUFBUSxDQUFDLFNBQXVCOztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUk7WUFDZixTQUFTLENBQUMsSUFBSSxHQUFHLGdCQUFnQixtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFBO1FBQ3BFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUE7UUFDOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFO1lBQzNCLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDVCxLQUFLLEVBQUUsTUFBQSxTQUFTLENBQUMsS0FBSyxtQ0FBSSxDQUFDO1lBQzNCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLGVBQWUsRUFBRSxDQUFDLEdBQUcsUUFBUTtZQUM3QixNQUFNLEVBQUUsY0FBYztnQkFDbEIsQ0FBQyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNsRCxDQUFDLENBQUMsTUFBTTtZQUNaLElBQUksRUFBRSxDQUFDO1lBQ1AsTUFBTSxFQUFFLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLENBQUM7WUFDbkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSztTQUN6QixDQUFDLENBQUE7UUFDRixPQUFPLFNBQVMsQ0FBQTtJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQXVCO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBWTs7UUFDZCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQTtRQUU1QyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztZQUMxQyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pCLHdCQUF3QjtnQkFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtZQUNsQyxDQUFDO1lBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7WUFDdEMsSUFBSSxZQUFZLEdBQUcsQ0FBQztnQkFBRSxTQUFRO1lBRTlCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLENBQUE7WUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNkLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN2QyxJQUFJLENBQUM7b0JBQ0QsTUFBQSxJQUFJLENBQUMsS0FBSyxvREFBSSxDQUFBO2dCQUNsQixDQUFDO2dCQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7b0JBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxJQUFJLENBQUMsQ0FBQTtvQkFDbkQsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDeEIsQ0FBQztnQkFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFBO1lBQy9CLENBQUM7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUMxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDakIsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7O0FBeERjLDJCQUFPLEdBQUcsQ0FBQyxBQUFKLENBQUkifQ==

/***/ }),

/***/ 6182:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/types/elements.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertTgdTypeArrayForElements: () => (/* binding */ assertTgdTypeArrayForElements)
/* harmony export */ });
function assertTgdTypeArrayForElements(data) {
    if (data instanceof Uint8Array)
        return;
    if (data instanceof Uint16Array)
        return;
    if (data instanceof Uint32Array)
        return;
    throw new Error("Only Uint8Array, Uint16Array or Uint32Array are allowed for elements!");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvZWxlbWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxVQUFVLDZCQUE2QixDQUN6QyxJQUFhO0lBRWIsSUFBSSxJQUFJLFlBQVksVUFBVTtRQUFFLE9BQU07SUFDdEMsSUFBSSxJQUFJLFlBQVksV0FBVztRQUFFLE9BQU07SUFDdkMsSUFBSSxJQUFJLFlBQVksV0FBVztRQUFFLE9BQU07SUFFdkMsTUFBTSxJQUFJLEtBQUssQ0FDWCx1RUFBdUUsQ0FDMUUsQ0FBQTtBQUNMLENBQUMifQ==

/***/ }),

/***/ 6194:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/painter/skybox/skybox.vert ***!
  \******************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nuniform float uniZoom;\nuniform float uniZ;\n\nin vec4 attPoint;\n\nout vec4 varPoint;\n\nvoid main() {\n    varPoint =  attPoint;\n    gl_Position = vec4(attPoint.xy, uniZ, 1.0);\n}";

/***/ }),

/***/ 6330:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/texture/texture-cube.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTextureCubeImpl: () => (/* binding */ TgdTextureCubeImpl)
/* harmony export */ });
class TgdTextureCubeImpl {
    constructor(context, options) {
        this.context = context;
        this._width = 0;
        this._height = 0;
        this.numberOfImagesToLoad = 6;
        const { gl } = context;
        const texture = gl.createTexture();
        if (!texture)
            throw new Error("Unable to create a WebGLTexture!");
        this.texture = texture;
        this.loadImage(gl.TEXTURE_CUBE_MAP_POSITIVE_X, options.imagePosX);
        this.loadImage(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, options.imageNegX);
        this.loadImage(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, options.imagePosY);
        this.loadImage(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, options.imageNegY);
        this.loadImage(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, options.imagePosZ);
        this.loadImage(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, options.imageNegZ);
    }
    delete() {
        this.context.gl.deleteTexture(this.texture);
    }
    get ready() {
        return this.numberOfImagesToLoad === 0;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    bind() {
        const { gl } = this.context;
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture);
    }
    activate(unit, program, uniformName) {
        if (!this.ready)
            return;
        const { context, texture } = this;
        const { gl } = context;
        gl.activeTexture(gl.TEXTURE0 + unit);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
        program.uniform1i(uniformName, unit);
    }
    loadImage(target, image) {
        const { width, height } = image;
        if (width !== height) {
            throw new Error(`Images in a CubeMap must be squares, but we got ${width}×${height}!`);
        }
        if (this._width === 0) {
            this._width = width;
            this._height = height;
        }
        else if (this._width !== width || this._height !== height) {
            throw new Error(`Images in a CubeMap must all have the same size, but we got ${this._width}×${this._height} and ${width}×${height}!`);
        }
        const { context, texture } = this;
        const { gl } = context;
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, image instanceof Image);
        gl.texImage2D(target, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        this.numberOfImagesToLoad--;
        if (this.numberOfImagesToLoad === 0) {
            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
            context.paint();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZS1jdWJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RleHR1cmUvdGV4dHVyZS1jdWJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxrQkFBa0I7SUFPM0IsWUFDb0IsT0FHZixFQUNELE9BQThCO1FBSmQsWUFBTyxHQUFQLE9BQU8sQ0FHdEI7UUFSRyxXQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ1YsWUFBTyxHQUFHLENBQUMsQ0FBQTtRQUNYLHlCQUFvQixHQUFHLENBQUMsQ0FBQTtRQVM1QixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNsQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtRQUVqRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDakUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNqRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDakUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FB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

/***/ }),

/***/ 6469:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/normals/shader.vert ***!
  \************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\n/**\n * Positon and normal.\n */\nin vec4 attPosition;\nin vec3 attNormal;\n\nout vec3 varNormal;\n\nvoid main() {\n    varNormal = attNormal;\n    gl_Position = uniProjectionMatrix * uniModelViewMatrix * attPosition;\n}\n";

/***/ }),

/***/ 6526:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/dataset/dataset.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdDataset: () => (/* binding */ TgdDataset)
/* harmony export */ });
class TgdDataset {
    constructor(attributesDefinition, options = {}) {
        var _a, _b;
        this.attributesDefinition = attributesDefinition;
        this.options = options;
        this.stride = 0;
        this.definitions = {};
        this._data = new ArrayBuffer(0);
        this._count = 0;
        this.target = (_a = options.target) !== null && _a !== void 0 ? _a : "ARRAY_BUFFER";
        this.usage = (_b = options.usage) !== null && _b !== void 0 ? _b : "STATIC_DRAW";
        this.initialize(attributesDefinition, options);
    }
    initialize(attributesDefinition, options = {}) {
        var _a;
        for (const name of Object.keys(attributesDefinition)) {
            const definition = attributesDefinition[name];
            this.attributesDefinition[name] = definition;
        }
        const divisor = (_a = options.divisor) !== null && _a !== void 0 ? _a : 0;
        let stride = 0;
        const data = {};
        const definitions = {};
        for (const name of Object.keys(attributesDefinition)) {
            data[name] = new ArrayBuffer(0);
            const definition = {
                dimension: DIMS[attributesDefinition[name]],
                byteOffset: stride,
                bytesPerElement: Float32Array.BYTES_PER_ELEMENT,
                divisor,
                getter(view, byteOffset) {
                    if (byteOffset >= view.byteLength) {
                        byteOffset %= view.byteLength;
                    }
                    return view.getFloat32(byteOffset, true);
                },
                setter(view, byteOffset, value) {
                    view.setFloat32(byteOffset, value, true);
                },
            };
            definitions[name] = definition;
            stride += definition.bytesPerElement * definition.dimension;
        }
        this.definitions = definitions;
        this.stride = stride;
        this._data = resize(this._data, this.count * this.stride);
    }
    /**
     * Throw an exception if the attribute `attribName` does not exist,
     * or if it is not of any of the `types`.
     * @param attribName
     * @param types
     */
    assertAttribType(attribName, ...types) {
        const type = this.attributesDefinition[attribName];
        if (!type)
            throw new Error(`Attribute "${attribName}" does not exist! Available names are: ${Object.keys(this.attributesDefinition).join(", ")}.`);
        if (!types.includes(type)) {
            throw new Error(`Attribute "${attribName}" is of type "${type}", which is not ${types.join(" nor ")}!`);
        }
        return this;
    }
    addAttributes(attributesDefinition) {
        const oldDataset = this.clone();
        for (const key of Object.keys(attributesDefinition)) {
            const oldType = this.attributesDefinition[key];
            const newType = attributesDefinition[key];
            if (oldType && oldType !== newType) {
                throw new Error(`It is not allowed to change the type of attribute "${key}" from "${oldType}" to "${newType}"! Prefer removing the attribute first.`);
            }
        }
        this.initialize(Object.assign(Object.assign({}, this.attributesDefinition), attributesDefinition), this.options);
        // eslint-disable-next-line unicorn/no-this-assignment, @typescript-eslint/no-this-alias
        const newDataset = this;
        newDataset.count = oldDataset.count;
        for (const attribName of oldDataset.attributesNames) {
            try {
                const { get } = oldDataset.getAttribAccessor(attribName);
                const { set } = newDataset.getAttribAccessor(attribName);
                for (let index = 0; index < oldDataset.count; index++) {
                    const definition = this.getDef(attribName);
                    for (let dim = 0; dim < definition.dimension; dim++) {
                        set(get(index, dim), index, dim);
                    }
                }
            }
            catch (error) {
                const message = error instanceof Error
                    ? error.message
                    : JSON.stringify(error);
                throw new Error(`Unable to clone attribute "${attribName}"!\n${message}`);
            }
        }
    }
    clone() {
        const ds = new TgdDataset(structuredClone(this.attributesDefinition), this.options);
        ds.count = this.count;
        const source = new DataView(this._data);
        const definition = new DataView(ds._data);
        for (let offset = 0; offset < source.byteLength; offset++) {
            definition.setUint8(offset, source.getUint8(offset));
        }
        return ds;
    }
    /**
     * Warning!
     *
     * This ArrayBuffer will be detached as soon as its
     * size is changed!
     */
    get data() {
        return this._data;
    }
    /** Get number of attributes. */
    get count() {
        return this._count;
    }
    /** Set number of attributes (reallocate data accordingly) */
    set count(count) {
        if (this._count === count)
            return;
        this._count = count;
        this._data = resize(this._data, count * this.stride);
    }
    get attributesNames() {
        return Object.keys(this.attributesDefinition);
    }
    getAttribAccessor(attribName) {
        const definition = this.getDef(attribName);
        const view = new DataView(this.data);
        const stride = this.stride;
        return {
            get(index, dimension = 0) {
                const byteOffset = definition.byteOffset +
                    stride * index +
                    dimension * definition.bytesPerElement;
                return definition.getter(view, byteOffset);
            },
            set(value, index, dimension = 0) {
                const byteOffset = definition.byteOffset +
                    stride * index +
                    dimension * definition.bytesPerElement;
                definition.setter(view, byteOffset, value);
            },
        };
    }
    /**
     * Set the data for one attribute.
     *
     * If you try to set more element that the current buffer
     * can hold, the buffer will be expanded.
     * And the property `count` will change accordingly.
     *
     * @param attribName If the attribute does not exist,
     * you will get an exception.
     * @param value The ArrayBuffer holding the data you
     * want to set to this attribute
     * @param param2
     */
    set(attribName, value, { byteOffset = 0, byteStride, first = 0, count = Infinity, targetFirst = 0, } = {}) {
        const { bytesPerElement, dimension, byteOffset: attribByteOffset, } = this.getDef(attribName);
        const buffer = value instanceof ArrayBuffer ? value : value.buffer;
        const chunkLength = bytesPerElement * dimension;
        const sourceStride = byteStride !== null && byteStride !== void 0 ? byteStride : chunkLength;
        let sourceOffset = byteOffset + sourceStride * first;
        const dstStride = this.stride;
        let dstOffset = targetFirst * dstStride + attribByteOffset;
        this.count = Math.max(this.count, Math.min(count, Math.floor((buffer.byteLength - sourceOffset) / sourceStride)));
        const sourceStop = buffer.byteLength - sourceStride + 1;
        const dstStop = this._data.byteLength + attribByteOffset - dstStride + 1;
        const sourceBuffer = new Uint8Array(buffer);
        const dstBuffer = new Uint8Array(this._data);
        let index = 0;
        while (index < count &&
            sourceOffset < sourceStop &&
            dstOffset < dstStop) {
            dstBuffer.set(sourceBuffer.subarray(sourceOffset, sourceOffset + chunkLength), dstOffset);
            index++;
            sourceOffset += sourceStride;
            dstOffset += dstStride;
        }
    }
    getDef(attribName) {
        const definition = this.definitions[attribName];
        if (!definition)
            throw new Error(`[TgdDataset] Attribute "${String(attribName)}" not found in this DataSet!\nAvailable names are: ${Object.keys(this.definitions)
                .map(name => JSON.stringify(name))
                .join(", ")}.`);
        return definition;
    }
    /**
     * Enable the vertex attrib array, and set
     * the vertex attrib pointer for every declared
     * attribute.
     */
    defineAttributes(gl, prg) {
        let offsetDestination = 0;
        const { definitions } = this;
        for (const name of Object.keys(definitions)) {
            const definition = definitions[name];
            if (prg.hasAttribute(name)) {
                const att = prg.getAttribLocation(name);
                gl.enableVertexAttribArray(att);
                gl.vertexAttribPointer(att, definition.dimension, gl.FLOAT, false, this.stride, offsetDestination);
                gl.vertexAttribDivisor(att, definition.divisor);
            }
            const bytes = definition.dimension * definition.bytesPerElement;
            offsetDestination += bytes;
        }
    }
    toCode({ indent = "" } = {}) {
        const lines = [];
        let offsetDestination = 0;
        const { definitions } = this;
        for (const name of Object.keys(definitions)) {
            const definition = definitions[name];
            const att = `$${name}`;
            lines.push(`const ${att} = gl.getAttribLocation(prg, "${name}")`, `gl.enableVertexAttribArray(${att})`, `gl.vertexAttribPointer(`, `  ${att},`, `  ${definition.dimension},  // Dimension`, `  gl.FLOAT,`, `  false,`, `  ${this.stride},   // Stride`, `  ${offsetDestination}   // Offset`, `)`, `gl.vertexAttribDivisor(${att}, ${definition.divisor})`);
            const bytes = definition.dimension * definition.bytesPerElement;
            offsetDestination += bytes;
        }
        return lines.map(line => `${indent}${line}`).join("\n");
    }
    debug(caption = "Dataset") {
        console.log(caption, "   count:", this.count, "   target:", this.target, "   usage:", this.usage);
        const rows = [
            ["Name", "type", "offset"],
        ];
        for (const attName of Object.keys(this.definitions)) {
            const definition = this.definitions[attName];
            rows.push([
                attName,
                this.attributesDefinition[attName],
                `${definition.byteOffset}`,
            ]);
        }
        const sizes = [0, 1, 2].map(index => rows.reduce((previous, current) => Math.max(previous, current[index].length), 0));
        for (const [name, type, offset] of rows)
            console.log(`%c${name.padEnd(sizes[0] + 2)}${type.padStart(sizes[1] + 2)}${offset.padStart(sizes[2] + 2)}`, "font-family:monospace");
        for (const attName of Object.keys(this.definitions)) {
            const definition = this.definitions[attName];
            if (!definition)
                continue;
            const { get } = this.getAttribAccessor(attName);
            const data = [];
            for (let index = 0; index < this.count; index++) {
                const items = [];
                for (let dim = 0; dim < definition.dimension; dim++) {
                    items.push(get(index, dim));
                }
                data.push(items);
            }
            console.log(`Attribute "${attName}":`, data);
        }
    }
}
const DIMS = {
    float: 1,
    vec2: 2,
    vec3: 3,
    vec4: 4,
};
function resizeFast(buff, newSize) {
    return buff.transfer(newSize);
}
function resizeSlow(inBuff, newSize) {
    const outBuff = new ArrayBuffer(newSize !== null && newSize !== void 0 ? newSize : inBuff.byteLength);
    new Uint8Array(outBuff).set(new Uint8Array(inBuff));
    return outBuff;
}
const resize = typeof ArrayBuffer.prototype.transfer === "function"
    ? resizeFast
    : resizeSlow;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 6548:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/filter/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilter: () => (/* reexport safe */ _filter_js__WEBPACK_IMPORTED_MODULE_2__.TgdFilter),
/* harmony export */   TgdFilterBlur: () => (/* reexport safe */ _blur_js__WEBPACK_IMPORTED_MODULE_0__.TgdFilterBlur),
/* harmony export */   TgdFilterChromaticAberration: () => (/* reexport safe */ _chromatic_aberration_js__WEBPACK_IMPORTED_MODULE_1__.TgdFilterChromaticAberration),
/* harmony export */   TgdFilterHueRotation: () => (/* reexport safe */ _hue_rotation_js__WEBPACK_IMPORTED_MODULE_3__.TgdFilterHueRotation),
/* harmony export */   TgdFilterVerbatim: () => (/* reexport safe */ _verbatim_js__WEBPACK_IMPORTED_MODULE_4__.TgdFilterVerbatim),
/* harmony export */   TgdFilterZoom: () => (/* reexport safe */ _zoom_js__WEBPACK_IMPORTED_MODULE_5__.TgdFilterZoom)
/* harmony export */ });
/* harmony import */ var _blur_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blur.js */ 9115);
/* harmony import */ var _chromatic_aberration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chromatic-aberration.js */ 1252);
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter.js */ 3672);
/* harmony import */ var _hue_rotation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hue-rotation.js */ 7489);
/* harmony import */ var _verbatim_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./verbatim.js */ 1556);
/* harmony import */ var _zoom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zoom.js */ 9769);






//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlsdGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsd0JBQXdCLENBQUE7QUFDdEMsY0FBYyxVQUFVLENBQUE7QUFDeEIsY0FBYyxnQkFBZ0IsQ0FBQTtBQUM5QixjQUFjLFlBQVksQ0FBQTtBQUMxQixjQUFjLFFBQVEsQ0FBQSJ9

/***/ }),

/***/ 6556:
/*!****************************************************!*\
  !*** ../../tgd2/lib/dist/painter/skybox/skybox.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterSkybox: () => (/* binding */ TgdPainterSkybox)
/* harmony export */ });
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../painter.js */ 2362);
/* harmony import */ var _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../dataset/dataset.js */ 6526);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _skybox_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./skybox.vert */ 6194);
/* harmony import */ var _skybox_frag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./skybox.frag */ 2659);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../program/index.js */ 9974);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../../texture/index.js */ 4765);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../utils/index.js */ 3291);









class TgdPainterSkybox extends _painter_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainter {
    constructor(context, options) {
        var _a;
        super();
        this.context = context;
        this.z = 1;
        this.matrix = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdMat4();
        this.tmpMat = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdMat4();
        this.z = (_a = options.z) !== null && _a !== void 0 ? _a : 1;
        this.transfo = new _math_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdTransfo(options.transfo);
        this.camera = options.camera;
        this.texture = new _texture_index_js__WEBPACK_IMPORTED_MODULE_7__.TgdTextureCubeImpl(context, options);
        this.program = new _program_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdProgram(context.gl, {
            vert: _skybox_vert__WEBPACK_IMPORTED_MODULE_4__,
            frag: _skybox_frag__WEBPACK_IMPORTED_MODULE_5__,
        });
        const dataset = new _dataset_dataset_js__WEBPACK_IMPORTED_MODULE_1__.TgdDataset({
            attPoint: "vec2",
        });
        dataset.set("attPoint", new Float32Array([-1, +1, +1, +1, -1, -1, +1, -1]));
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, this.program, [dataset]);
    }
    delete() {
        const { vao } = this;
        vao.delete();
    }
    paint() {
        const { context, vao, program, texture, z } = this;
        const { gl } = context;
        // Compute matrix from current camera.
        const { camera, matrix, tmpMat } = this;
        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.webglCullExec)(gl, _utils_index_js__WEBPACK_IMPORTED_MODULE_8__.webglPresetCull.off, () => {
            camera.screenWidth = context.width;
            camera.screenHeight = context.height;
            matrix.from(camera.matrixProjection);
            tmpMat
                .fromMat3(this.transfo.matrix)
                .multiply(camera.matrixModelView);
            tmpMat.m03 = 0;
            tmpMat.m13 = 0;
            tmpMat.m23 = 0;
            matrix.multiply(tmpMat).invert();
            program.use();
            program.uniformMatrix4fv("uniMatrix", matrix);
            program.uniform1f("uniZ", z);
            texture.activate(0, program, "uniTexture");
            vao.bind();
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            vao.unbind();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2t5Ym94LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhaW50ZXIvc2t5Ym94L3NreWJveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sV0FBVyxDQUFBO0FBRWxFLE9BQU8sSUFBSSxNQUFNLGVBQWUsQ0FBQTtBQUNoQyxPQUFPLElBQUksTUFBTSxlQUFlLENBQUE7QUFDaEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFRM0QsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFVBQVU7SUFXNUMsWUFDcUIsT0FBbUIsRUFDcEMsT0FBZ0M7O1FBRWhDLEtBQUssRUFBRSxDQUFBO1FBSFUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQVRqQyxNQUFDLEdBQUcsQ0FBQyxDQUFBO1FBS0ssV0FBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDdEIsV0FBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFPbkMsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFBLE9BQU8sQ0FBQyxDQUFDLG1DQUFJLENBQUMsQ0FBQTtRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUE7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDO1lBQzNCLFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUMsQ0FBQTtRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQ1AsVUFBVSxFQUNWLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNyRCxDQUFBO1FBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ3RFLENBQUM7SUFFRCxNQUFNO1FBQ0YsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQTtRQUNwQixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDaEIsQ0FBQztJQUVELEtBQUs7UUFDRCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQTtRQUNsRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBRXRCLHNDQUFzQztRQUN0QyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDdkMsYUFBYSxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUN4QyxNQUFNLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUE7WUFDbEMsTUFBTSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBO1lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFDcEMsTUFBTTtpQkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7aUJBQzdCLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDckMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7WUFDZCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtZQUNkLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1lBQ2QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUVoQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDYixPQUFPLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQzdDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQzVCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQTtZQUMxQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDVixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQ3RDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 6594:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/light/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdLight: () => (/* reexport safe */ _light_js__WEBPACK_IMPORTED_MODULE_0__.TgdLight)
/* harmony export */ });
/* harmony import */ var _light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./light.js */ 3166);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGlnaHQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 6648:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/vec4.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdVec4: () => (/* binding */ TgdVec4)
/* harmony export */ });
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vec3.js */ 7389);

class TgdVec4 extends Float32Array {
    static fromSlerp([x1, y1, z1, w1 = 0], [x2, y2, z2, w2 = 0], a = 0.5) {
        const b = 1 - a;
        const x = b * x1 + a * x2;
        const y = b * y1 + a * y2;
        const z = b * z1 + a * z2;
        const w = b * w1 + a * w2;
        return new TgdVec4(x, y, z, w);
    }
    constructor(x = 0, y = 0, z = 0, w = 1) {
        super(4);
        if (x instanceof TgdVec4) {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
            return;
        }
        if (x instanceof _vec3_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3) {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = w;
            return;
        }
        if (Array.isArray(x)) {
            if (typeof y === "number") {
                const [xx, yy, zz] = x;
                this.x = xx !== null && xx !== void 0 ? xx : 0;
                this.y = yy !== null && yy !== void 0 ? yy : 0;
                this.z = zz !== null && zz !== void 0 ? zz : 0;
                this.w = y;
                return;
            }
            else {
                const [xx, yy, zz, ww] = x;
                this.x = xx !== null && xx !== void 0 ? xx : 0;
                this.y = yy !== null && yy !== void 0 ? yy : 0;
                this.z = zz !== null && zz !== void 0 ? zz : 0;
                this.w = ww !== null && ww !== void 0 ? ww : 1;
                return;
            }
        }
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    reset(x = 0, y = 0, z = 0, w = 1) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    from(vec) {
        const [x, y, z, w] = vec;
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    /**
     * Warning! The `w` component will stay unchanged.
     */
    fromVec3(vec) {
        const [x, y, z] = vec;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    clone() {
        return new TgdVec4(this);
    }
    mix(vec, alpha = 0.5) {
        this.x = (1 - alpha) * this.x + alpha * vec.x;
        this.y = (1 - alpha) * this.y + alpha * vec.y;
        this.z = (1 - alpha) * this.z + alpha * vec.z;
        this.w = (1 - alpha) * this.w + alpha * vec.w;
        return this;
    }
    isEqual(vec) {
        const [x, y, z, w] = vec;
        if (x !== this.x)
            return false;
        if (y !== this.y)
            return false;
        if (z !== this.z)
            return false;
        if (w !== this.w)
            return false;
        return true;
    }
    isClose({ x, y, z, w }, epsilon = 1e-6) {
        if (Math.abs(x - this.x) > epsilon)
            return false;
        if (Math.abs(y - this.y) > epsilon)
            return false;
        if (Math.abs(z - this.z) > epsilon)
            return false;
        if (Math.abs(w - this.w) > epsilon)
            return false;
        return true;
    }
    /**
     * V := M×V
     */
    applyMatrix(mat) {
        const { x, y, z, w } = this;
        this.x = x * mat.m00 + y * mat.m01 + z * mat.m02 + w * mat.m03;
        this.y = x * mat.m10 + y * mat.m11 + z * mat.m12 + w * mat.m13;
        this.z = x * mat.m20 + y * mat.m21 + z * mat.m22 + w * mat.m23;
        this.w = x * mat.m30 + y * mat.m31 + z * mat.m32 + w * mat.m33;
        return this;
    }
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = value;
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = value;
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = value;
    }
    get w() {
        return this[3];
    }
    set w(value) {
        this[3] = value;
    }
    add(...vectors) {
        for (const vec of vectors) {
            this[0] += vec[0];
            this[1] += vec[1];
            this[2] += vec[2];
            if (vec.length > 3)
                this[3] += vec[3];
        }
        return this;
    }
    subtract(vec) {
        this[0] -= vec[0];
        this[1] -= vec[1];
        this[2] -= vec[2];
        if (vec.length > 3)
            this[3] -= vec[3];
        return this;
    }
    scale(factor) {
        this[0] *= factor;
        this[1] *= factor;
        this[2] *= factor;
        this[3] *= factor;
        return this;
    }
    dot(vec) {
        return (this[0] * vec[0] +
            this[1] * vec[1] +
            this[2] * vec[2] +
            this[3] * vec[3]);
    }
    get size() {
        return Math.hypot(this[0], this[1], this[2], this[3]);
    }
    normalize() {
        const squareLength = this[0] * this[0] +
            this[1] * this[1] +
            this[2] * this[2] +
            this[3] * this[3];
        if (squareLength === 0)
            return this;
        return this.scale(1 / Math.sqrt(squareLength));
    }
    debug(caption = "vec4") {
        const { x, y, z, w } = this;
        const out = [x, y, z, w].map(n => n.toFixed(6));
        console.log(`${caption}:   `, out.join(" | "), `  (length = ${this.size})`);
    }
}
TgdVec4.X = new TgdVec4(1, 0, 0, 0);
TgdVec4.Y = new TgdVec4(0, 1, 0, 0);
TgdVec4.Z = new TgdVec4(0, 0, 1, 0);
TgdVec4.W = new TgdVec4(0, 0, 0, 1);
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 6758:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/loader/video.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdLoadVideo: () => (/* binding */ tgdLoadVideo)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 5664);

/**
 * Try to load a video and return `null` in case of failure.
 * @param url URL of the image to load.
 */
function tgdLoadVideo(url) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            const video = document.createElement("video");
            video.addEventListener("canplay", () => resolve(video));
            video.addEventListener("error", () => {
                console.error("Unable to load video:", url);
                resolve(null);
            });
            video.src = url;
            video.setAttribute("loop", "");
            video.setAttribute("muted", "");
            video.setAttribute("autoplay", "");
            video.setAttribute("disablepictureinpicture", "");
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9hZGVyL3ZpZGVvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFDSCxNQUFNLFVBQWdCLFlBQVksQ0FDOUIsR0FBVzs7UUFFWCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDN0MsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUN2RCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQTtnQkFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2pCLENBQUMsQ0FBQyxDQUFBO1lBQ0YsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7WUFDZixLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUM5QixLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUMvQixLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUNsQyxLQUFLLENBQUMsWUFBWSxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3JELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUFBIn0=

/***/ }),

/***/ 6844:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/factory/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdMakeMeshGlbPainter: () => (/* reexport safe */ _mesh_glb_js__WEBPACK_IMPORTED_MODULE_0__.tgdMakeMeshGlbPainter)
/* harmony export */ });
/* harmony import */ var _mesh_glb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mesh-glb.js */ 525);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmFjdG9yeS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFlBQVksQ0FBQSJ9

/***/ }),

/***/ 6900:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/material/solid.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialSolid: () => (/* binding */ TgdMaterialSolid)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material.js */ 6018);


const DEFAULT_COLOR = [0.111, 0.333, 0.999, 1];
class TgdMaterialSolid extends _material_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterial {
    constructor(options = {}) {
        var _a;
        super();
        this.uniforms = {
            uniColor: "vec4",
        };
        this.color = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4((_a = options.color) !== null && _a !== void 0 ? _a : DEFAULT_COLOR);
        this.fragmentShaderCode = [`return uniColor;`];
        this.vertexShaderCode = [];
        this.varyings = {};
    }
    setUniforms(program) {
        program.uniform4fv("uniColor", this.color);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29saWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0ZXJpYWwvc29saWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBUXhDLE1BQU0sYUFBYSxHQUFpQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRTVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUFXO0lBVTdDLFlBQVksVUFBbUMsRUFBRTs7UUFDN0MsS0FBSyxFQUFFLENBQUE7UUFQSyxhQUFRLEdBQXlDO1lBQzdELFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUE7UUFNRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE1BQUEsT0FBTyxDQUFDLEtBQUssbUNBQUksYUFBYSxDQUFDLENBQUE7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBbUI7UUFDM0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlDLENBQUM7Q0FDSiJ9

/***/ }),

/***/ 6909:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/utils/assert.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertElementsTypedArray: () => (/* binding */ assertElementsTypedArray)
/* harmony export */ });
function assertElementsTypedArray(data) {
    if (data instanceof Uint8Array)
        return;
    if (data instanceof Uint16Array)
        return;
    if (data instanceof Uint32Array)
        return;
    throw new Error("Elements can only be Uint8Array, Uint16Array or Uint32Array!");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsd0JBQXdCLENBQ3BDLElBQWE7SUFFYixJQUFJLElBQUksWUFBWSxVQUFVO1FBQUUsT0FBTTtJQUN0QyxJQUFJLElBQUksWUFBWSxXQUFXO1FBQUUsT0FBTTtJQUN2QyxJQUFJLElBQUksWUFBWSxXQUFXO1FBQUUsT0FBTTtJQUV2QyxNQUFNLElBQUksS0FBSyxDQUNYLDhEQUE4RCxDQUNqRSxDQUFBO0FBQ0wsQ0FBQyJ9

/***/ }),

/***/ 7042:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/debug/tools.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   padColOfNumbers: () => (/* binding */ padColOfNumbers)
/* harmony export */ });
function padColOfNumbers(values, decimals = 6) {
    const p = Math.pow(10, decimals);
    const out = [];
    let max = 0;
    for (const value of values) {
        const n = Math.round(value * p) / p;
        const txt = n.toFixed(decimals);
        max = Math.max(max, txt.length);
        out.push(txt);
    }
    return out.map(txt => txt.padStart(max, " "));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVidWcvdG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFnQixFQUFFLFFBQVEsR0FBRyxDQUFDO0lBQzFELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hDLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtJQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNuQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9CLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNqQixDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNqRCxDQUFDIn0=

/***/ }),

/***/ 7061:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/loader/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdLoadArrayBuffer: () => (/* reexport safe */ _binary_js__WEBPACK_IMPORTED_MODULE_1__.tgdLoadArrayBuffer),
/* harmony export */   tgdLoadAssets: () => (/* reexport safe */ _asset_js__WEBPACK_IMPORTED_MODULE_0__.tgdLoadAssets),
/* harmony export */   tgdLoadCanvas: () => (/* reexport safe */ _image_js__WEBPACK_IMPORTED_MODULE_2__.tgdLoadCanvas),
/* harmony export */   tgdLoadGlb: () => (/* reexport safe */ _binary_js__WEBPACK_IMPORTED_MODULE_1__.tgdLoadGlb),
/* harmony export */   tgdLoadImage: () => (/* reexport safe */ _image_js__WEBPACK_IMPORTED_MODULE_2__.tgdLoadImage),
/* harmony export */   tgdLoadImages: () => (/* reexport safe */ _image_js__WEBPACK_IMPORTED_MODULE_2__.tgdLoadImages),
/* harmony export */   tgdLoadText: () => (/* reexport safe */ _binary_js__WEBPACK_IMPORTED_MODULE_1__.tgdLoadText),
/* harmony export */   tgdLoadVideo: () => (/* reexport safe */ _video_js__WEBPACK_IMPORTED_MODULE_3__.tgdLoadVideo)
/* harmony export */ });
/* harmony import */ var _asset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./asset.js */ 5);
/* harmony import */ var _binary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binary.js */ 2780);
/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image.js */ 3352);
/* harmony import */ var _video_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./video.js */ 6758);




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9hZGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsVUFBVSxDQUFBO0FBQ3hCLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsU0FBUyxDQUFBIn0=

/***/ }),

/***/ 7117:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/axes/axes.frag ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nin vec4 varColor;\n\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = varColor;\n}";

/***/ }),

/***/ 7250:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/geometry/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdGeometry: () => (/* reexport safe */ _geometry_js__WEBPACK_IMPORTED_MODULE_1__.TgdGeometry),
/* harmony export */   TgdGeometryBox: () => (/* reexport safe */ _box_js__WEBPACK_IMPORTED_MODULE_0__.TgdGeometryBox),
/* harmony export */   TgdGeometryPlane: () => (/* reexport safe */ _plane_js__WEBPACK_IMPORTED_MODULE_2__.TgdGeometryPlane)
/* harmony export */ });
/* harmony import */ var _box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./box.js */ 2699);
/* harmony import */ var _geometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometry.js */ 3440);
/* harmony import */ var _plane_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plane.js */ 7536);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VvbWV0cnkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxPQUFPLENBQUE7QUFDckIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 7368:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/controller/camera/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdControllerCameraOrbit: () => (/* reexport safe */ _orbit_js__WEBPACK_IMPORTED_MODULE_0__.TgdControllerCameraOrbit)
/* harmony export */ });
/* harmony import */ var _orbit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./orbit.js */ 1468);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJvbGxlci9jYW1lcmEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 7381:
/*!*********************************************************!*\
  !*** ../../tgd2/lib/dist/camera/camera-orthographic.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCameraOrthographic: () => (/* binding */ TgdCameraOrthographic)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _camera_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camera.js */ 666);


class TgdCameraOrthographic extends _camera_js__WEBPACK_IMPORTED_MODULE_1__.TgdCamera {
    constructor(options = {}) {
        var _a;
        super(options);
        this._matrixProjection = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        this._spaceHeight = 10;
        this._ray = {
            origin: new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3(),
            direction: new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec3(),
        };
        this.spaceHeight = (_a = options.spaceHeight) !== null && _a !== void 0 ? _a : 10;
    }
    copyProjectionFrom(camera) {
        this.spaceHeight = camera.spaceHeight;
        return this;
    }
    castRay(screenX, screenY) {
        const { transfo } = this;
        const { origin, direction } = this._ray;
        direction.from(transfo.axisZ);
        const h = this.spaceHeight * 0.5;
        const w = h * this.screenAspectRatio;
        origin
            .from(transfo.actualPosition)
            .addWithScale(transfo.axisX, w * screenX)
            .addWithScale(transfo.axisY, h * screenY);
        return this._ray;
    }
    get spaceHeight() {
        return this._spaceHeight;
    }
    set spaceHeight(v) {
        if (v === this._spaceHeight)
            return;
        this._spaceHeight = v;
        this.dirtyProjection = true;
    }
    get near() {
        return this._near;
    }
    set near(v) {
        if (v === this._near)
            return;
        this._near = v;
        this.dirtyProjection = true;
    }
    get far() {
        return this._far;
    }
    set far(v) {
        if (v === this._far)
            return;
        this._far = v;
        this.dirtyProjection = true;
    }
    get matrixProjection() {
        this.updateProjectionIfNeeded();
        return this._matrixProjection;
    }
    getSpaceHeightAtTarget() {
        return this.spaceHeight;
    }
    setSpaceHeightAtTarget(v) {
        this.spaceHeight = v;
    }
    updateProjectionIfNeeded() {
        if (!this.dirtyProjection)
            return;
        const { near, far, screenAspectRatio, _spaceHeight, zoom } = this;
        const top = _spaceHeight / (zoom + zoom);
        const bottom = -top;
        const right = top * screenAspectRatio;
        const left = -right;
        const out = this._matrixProjection;
        const lr = 1 / (left - right);
        const bt = 1 / (bottom - top);
        const nf = 1 / (near - far);
        out[0] = -2 * lr;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = -2 * bt;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = nf;
        out[11] = 0;
        out[12] = (left + right) * lr;
        out[13] = (top + bottom) * bt;
        out[14] = near * nf;
        out[15] = 1;
        this.dirtyProjection = true;
    }
    toCode(caption) {
        const code = [];
        if (caption)
            code.push(`// ${caption}`);
        code.push(`const camera = new TgdCameraOrthographic({`);
        if (this.name)
            code.push(`  name: ${JSON.stringify(this.name)},`);
        code.push(`  spaceHeight: ${this.spaceHeight},`);
        code.push(`  near: ${this._near},`);
        code.push(`  far: ${this._far},`);
        code.push(`  zoom: ${this.zoom},`);
        code.push(`  transfo: {`);
        code.push(`  distance: ${this.transfo.distance},`);
        code.push(`    position: ${JSON.stringify([...this.transfo.position])},`);
        code.push(`    orientation: ${JSON.stringify([...this.transfo.orientation])},`);
        code.push(`    scale: ${JSON.stringify([...this.transfo.scale])},`);
        code.push(`  }`);
        code.push("}");
        return code.join("\n");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLW9ydGhvZ3JhcGhpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYW1lcmEvY2FtZXJhLW9ydGhvZ3JhcGhpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLFVBQVUsQ0FBQTtBQU10RCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsU0FBUztJQVFoRCxZQUFZLFVBQXdDLEVBQUU7O1FBQ2xELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQVJELHNCQUFpQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDMUMsaUJBQVksR0FBRyxFQUFFLENBQUE7UUFDUixTQUFJLEdBQUc7WUFDcEIsTUFBTSxFQUFFLElBQUksT0FBTyxFQUFFO1lBQ3JCLFNBQVMsRUFBRSxJQUFJLE9BQU8sRUFBRTtTQUMzQixDQUFBO1FBSUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFBLE9BQU8sQ0FBQyxXQUFXLG1DQUFJLEVBQUUsQ0FBQTtJQUNoRCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBNkI7UUFDNUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFBO1FBQ3JDLE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVELE9BQU8sQ0FDSCxPQUFlLEVBQ2YsT0FBZTtRQUVmLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDeEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFBO1FBQ3ZDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFBO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLENBQUMs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

/***/ }),

/***/ 7389:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/vec3.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdVec3: () => (/* binding */ TgdVec3)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ 1848);
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ 1793);


class TgdVec3 extends Float32Array {
    static newFrom([x, y, z]) {
        return new TgdVec3(x, y, z);
    }
    static newFromMix([x1, y1, z1], [x2, y2, z2], a = 0.5) {
        const b = 1 - a;
        const x = b * x1 + a * x2;
        const y = b * y1 + a * y2;
        const z = b * z1 + a * z2;
        return new TgdVec3(x, y, z);
    }
    static distance(from, to) {
        const x = to.x - from.x;
        const y = to.y - from.y;
        const z = to.z - from.z;
        return Math.hypot(x, y, z);
    }
    constructor(x = 0, y = 0, z = 0) {
        super(3);
        if (typeof x !== "number") {
            this.x = x[0];
            this.y = x[1];
            this.z = x[2];
            return;
        }
        this.x = x;
        this.y = y;
        this.z = z;
    }
    clone() {
        return new TgdVec3(this);
    }
    mix(vec, alpha = 0.5) {
        const beta = 1 - alpha;
        this.x = beta * this.x + alpha * vec.x;
        this.y = beta * this.y + alpha * vec.y;
        this.z = beta * this.z + alpha * vec.z;
        return this;
    }
    isEqual(vec) {
        const [x, y, z] = vec;
        if (x !== this.x)
            return false;
        if (y !== this.y)
            return false;
        if (z !== this.z)
            return false;
        return true;
    }
    isClose(vec, epsilon = 1e-6) {
        const [x, y, z] = vec;
        if (Math.abs(x - this.x) > epsilon)
            return false;
        if (Math.abs(y - this.y) > epsilon)
            return false;
        if (Math.abs(z - this.z) > epsilon)
            return false;
        return true;
    }
    /**
     * __Warning__, for performance reason, `axis` is supposed to be of length 1.
     * Otherwise, the result will be a vector rotated then scaled by the length of `axis`.
     */
    rotateAround(axis, angleInRadians) {
        // result := V.cos(a) + (K×V).sin(a) + K(K.V)(1 - cos(a))
        const C = Math.cos(angleInRadians);
        const S = Math.sin(angleInRadians);
        const [Vx, Vy, Vz] = this;
        const [Kx, Ky, Kz] = axis;
        const dot = Vx * Kx + Vy * Ky + Vz * Kz;
        const crossX = Ky * Vz - Kz * Vy;
        const crossY = Kz * Vx - Kx * Vz;
        const crossZ = Kx * Vy - Ky * Vx;
        const a = dot * (1 - C);
        this.x = Vx * C + crossX * S + Kx * a;
        this.y = Vy * C + crossY * S + Ky * a;
        this.z = Vz * C + crossZ * S + Kz * a;
        return this;
    }
    /**
     * V := M×V
     */
    applyMatrix(matrix) {
        const { x, y, z } = this;
        this.x = x * matrix.m00 + y * matrix.m10 + z * matrix.m20;
        this.y = x * matrix.m01 + y * matrix.m11 + z * matrix.m21;
        this.z = x * matrix.m02 + y * matrix.m12 + z * matrix.m22;
        return this;
    }
    applyQuaternion(quaternion) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.transformQuat(this, this, quaternion);
        return this;
    }
    from(vec) {
        const [x, y, z] = vec;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    /**
     * `this = -vec`
     */
    fromOpposite(vec) {
        const [x, y, z] = vec;
        this.x = -x;
        this.y = -y;
        this.z = -z;
        return this;
    }
    fromMix(valueAtT0, valueAtT1, t) {
        const [ax, ay, az] = valueAtT0;
        const [bx, by, bz] = valueAtT1;
        return this.reset((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(ax, bx, t), (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(ay, by, t), (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(az, bz, t));
    }
    reset(x = 0, y = 0, z = 0) {
        this[0] = x;
        this[1] = y;
        this[2] = z;
        return this;
    }
    distanceToLineSquared(origin, normalizedDirection) {
        const [mx, my, mz] = this;
        const [ox, oy, oz] = origin;
        const [dx, dy, dz] = normalizedDirection;
        const OH = dx * (mx - ox) + dy * (my - oy) + dz * (mz - oz);
        const hx = ox + OH * dx;
        const hy = oy + OH * dy;
        const hz = oz + OH * dz;
        const x = mx - hx;
        const y = my - hy;
        const z = mz - hz;
        return x * x + y * y + z * z;
    }
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = value;
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = value;
    }
    get z() {
        return this[2];
    }
    set z(value) {
        this[2] = value;
    }
    add(...vectors) {
        for (const vec of vectors) {
            const [x, y, z] = vec;
            this[0] += x;
            this[1] += y;
            this[2] += z;
        }
        return this;
    }
    addWithScale(vec, scale) {
        this[0] += vec.x * scale;
        this[1] += vec.y * scale;
        this[2] += vec.z * scale;
        return this;
    }
    subtract(vec) {
        this[0] -= vec[0];
        this[1] -= vec[1];
        this[2] -= vec[2];
        return this;
    }
    scale(factor) {
        this[0] *= factor;
        this[1] *= factor;
        this[2] *= factor;
        return this;
    }
    dot(vec) {
        return this[0] * vec[0] + this[1] * vec[1] + this[2] * vec[2];
    }
    get size() {
        return Math.hypot(this[0], this[1], this[2]);
    }
    normalize() {
        const squareLength = this[0] * this[0] + this[1] * this[1] + this[2] * this[2];
        if (squareLength === 0)
            return this;
        return this.scale(1 / Math.sqrt(squareLength));
    }
    cross(vec) {
        const [x1, y1, z1] = this;
        const [x2, y2, z2] = vec;
        this[0] = y1 * z2 - y2 * z1;
        this[1] = z1 * x2 - z2 * x1;
        this[2] = x1 * y2 - x2 * y1;
        return this;
    }
    /**
     * Set random values between -0.5 and +0.5 to each coordinate.
     */
    random() {
        this[0] = Math.random() - 0.5;
        this[1] = Math.random() - 0.5;
        this[2] = Math.random() - 0.5;
        return this;
    }
    debug(caption = "vec3") {
        const { x, y, z } = this;
        const out = [x, y, z].map(n => n.toFixed(6));
        console.log(`${caption}:   `, out.join(" | "), "   length:", Math.hypot(x, y, z));
    }
}
TgdVec3.X = new TgdVec3(1, 0, 0);
TgdVec3.Y = new TgdVec3(0, 1, 0);
TgdVec3.Z = new TgdVec3(0, 0, 1);
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 7470:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/math/vec2.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdVec2: () => (/* binding */ TgdVec2)
/* harmony export */ });
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ 1793);

class TgdVec2 extends Float32Array {
    static fromMix(v1, v2, a = 0.5) {
        const b = 1 - a;
        const x = b * v1.x + a * v2.x;
        const y = b * v1.y + a * v2.y;
        return new TgdVec2(x, y);
    }
    static distance(from, to) {
        const x = to.x - from.x;
        const y = to.y - from.y;
        return Math.hypot(x, y);
    }
    constructor(x = 0, y = 0) {
        super(2);
        if (typeof x !== "number") {
            this.x = x[0];
            this.y = x[1];
            return;
        }
        this.x = x;
        this.y = y;
    }
    clone() {
        return new TgdVec2(this);
    }
    mix(vec, alpha = 0.5) {
        this.x = (1 - alpha) * this.x + alpha * vec.x;
        this.y = (1 - alpha) * this.y + alpha * vec.y;
        return this;
    }
    isEqual(vec) {
        const [x, y] = vec;
        if (x !== this.x)
            return false;
        if (y !== this.y)
            return false;
        return true;
    }
    isClose(vec, epsilon = 1e-6) {
        const [x, y] = vec;
        if (Math.abs(x - this.x) > epsilon)
            return false;
        if (Math.abs(y - this.y) > epsilon)
            return false;
        return true;
    }
    from(vec) {
        const [x, y] = vec;
        this.x = x;
        this.y = y;
        return this;
    }
    fromMix(a, b, t) {
        const [ax, ay] = a;
        const [bx, by] = b;
        return this.reset((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(ax, bx, t), (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(ay, by, t));
    }
    reset(x, y) {
        this[0] = x;
        this[1] = y;
        return this;
    }
    get x() {
        return this[0];
    }
    set x(value) {
        this[0] = value;
    }
    get y() {
        return this[1];
    }
    set y(value) {
        this[1] = value;
    }
    add(...vectors) {
        for (const vec of vectors) {
            this[0] += vec.x;
            this[1] += vec.y;
        }
        return this;
    }
    addWithScale(vec, scale) {
        this[0] += vec.x * scale;
        this[1] += vec.y * scale;
        return this;
    }
    subtract(vec) {
        this[0] -= vec[0];
        this[1] -= vec[1];
        return this;
    }
    scale(factor) {
        this[0] *= factor;
        this[1] *= factor;
        return this;
    }
    dot(vec) {
        return this[0] * vec[0] + this[1] * vec[1];
    }
    get size() {
        return Math.hypot(this[0], this[1]);
    }
    normalize() {
        const squareLength = this[0] * this[0] + this[1] * this[1];
        if (squareLength === 0)
            return this;
        return this.scale(1 / Math.sqrt(squareLength));
    }
    /**
     * Set random values between -0.5 and +0.5 to each coordinate.
     */
    random() {
        this[0] = Math.random() - 0.5;
        this[1] = Math.random() - 0.5;
        return this;
    }
    debug(caption = "vec2") {
        const { x, y } = this;
        const out = [x, y].map(n => n.toFixed(6));
        console.log(`${caption}:   `, out.join(" | "), "   length:", Math.hypot(x, y));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRoL3ZlYzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUkxQyxNQUFNLE9BQU8sT0FBUSxTQUFRLFlBQVk7SUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FDVixFQUErQixFQUMvQixFQUErQixFQUMvQixDQUFDLEdBQUcsR0FBRztRQUVQLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDZixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM3QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FDWCxJQUFpQyxFQUNqQyxFQUErQjtRQUUvQixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQU1ELFlBQ0ksSUFBK0MsQ0FBQyxFQUNoRCxJQUFZLENBQUM7UUFFYixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDUixJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2Is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

/***/ }),

/***/ 7489:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/filter/hue-rotation.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilterHueRotation: () => (/* binding */ TgdFilterHueRotation)
/* harmony export */ });
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter.js */ 3672);

class TgdFilterHueRotation extends _filter_js__WEBPACK_IMPORTED_MODULE_0__.TgdFilter {
    constructor({ hueShiftInDegrees = 0, } = {}) {
        super({
            fragmentShaderCode: [
                "vec4 color = texture(uniTexture, varUV);",
                "vec3 rgb = color.rgb;",
                "const vec3 k = vec3(0.5773502691896258);",
                "float cosAngle = cos(uniHueShift);",
                "FragColor = vec4(",
                [
                    "rgb * cosAngle ",
                    "+ cross(k, rgb) * sin(uniHueShift) ",
                    "+ k * dot(k, rgb) * (1.0 - cosAngle),",
                    "color.a",
                ],
                ");",
            ],
            uniforms: {
                uniHueShift: "float",
            },
        });
        this.hueShift = 0;
        this.setUniforms = ({ program, }) => {
            program.uniform1f("uniHueShift", this.hueShift);
        };
        this.hueShiftInDegrees = hueShiftInDegrees;
    }
    get hueShiftInRadians() {
        return this.hueShift;
    }
    set hueShiftInRadians(v) {
        this.hueShift = v;
    }
    get hueShiftInDegrees() {
        return (this.hueShift * 180) / Math.PI;
    }
    set hueShiftInDegrees(v) {
        this.hueShift = (v * Math.PI) / 180;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVlLXJvdGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpbHRlci9odWUtcm90YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBa0MsTUFBTSxVQUFVLENBQUE7QUFFcEUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFNBQVM7SUFHL0MsWUFBWSxFQUNSLGlCQUFpQixHQUFHLENBQUMsTUFDbUIsRUFBRTtRQUMxQyxLQUFLLENBQUM7WUFDRixrQkFBa0IsRUFBRTtnQkFDaEIsMENBQTBDO2dCQUMxQyx1QkFBdUI7Z0JBQ3ZCLDBDQUEwQztnQkFDMUMsb0NBQW9DO2dCQUNwQyxtQkFBbUI7Z0JBQ25CO29CQUNJLGlCQUFpQjtvQkFDakIscUNBQXFDO29CQUNyQyx1Q0FBdUM7b0JBQ3ZDLFNBQVM7aUJBQ1o7Z0JBQ0QsSUFBSTthQUNQO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLFdBQVcsRUFBRSxPQUFPO2FBQ3ZCO1NBQ0osQ0FBQyxDQUFBO1FBdkJFLGFBQVEsR0FBRyxDQUFDLENBQUE7UUF5Q0osZ0JBQVcsR0FBRyxDQUFDLEVBQzNCLE9BQU8sR0FDc0IsRUFBUSxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNuRCxDQUFDLENBQUE7UUFyQkcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFBO0lBQzlDLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDeEIsQ0FBQztJQUNELElBQUksaUJBQWlCLENBQUMsQ0FBUztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQTtJQUMxQyxDQUFDO0lBQ0QsSUFBSSxpQkFBaUIsQ0FBQyxDQUFTO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtJQUN2QyxDQUFDO0NBT0oifQ==

/***/ }),

/***/ 7536:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/geometry/plane.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdGeometryPlane: () => (/* binding */ TgdGeometryPlane)
/* harmony export */ });
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../dataset/index.js */ 5710);
/* harmony import */ var _geometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geometry.js */ 3440);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../math/index.js */ 6088);



class TgdGeometryPlane extends _geometry_js__WEBPACK_IMPORTED_MODULE_1__.TgdGeometry {
    constructor({ sizeX = 1, sizeY = 1, vecX = [1, 0, 0], vecY = [0, 0, 1], } = {}) {
        const vec = (x, y) => {
            const sx = x * sizeX;
            const sy = y * sizeY;
            return [
                sx * vecX[0] + sy * vecY[0],
                sx * vecX[1] + sy * vecY[1],
                sx * vecX[2] + sy * vecY[2],
            ];
        };
        const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset({
            POSITION: "vec3",
            NORMAL: "vec3",
            TEXCOORD_0: "vec2",
        });
        const H = 0.5;
        // prettier-ignore
        dataset.set("POSITION", new Float32Array([
            ...vec(+H, -H),
            ...vec(-H, -H),
            ...vec(+H, +H),
            ...vec(-H, +H),
        ]));
        // prettier-ignore
        dataset.set("TEXCOORD_0", new Float32Array([
            1, 1,
            0, 1,
            1, 0,
            0, 0,
        ]));
        const [nx, ny, nz] = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(vecX)
            .normalize()
            .cross(new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(vecY).normalize());
        // prettier-ignore
        dataset.set("NORMAL", new Float32Array([
            nx, ny, nz,
            nx, ny, nz,
            nx, ny, nz,
            nx, ny, nz,
        ]));
        super({
            dataset,
            drawMode: "TRIANGLE_STRIP",
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VvbWV0cnkvcGxhbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRXhDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFTbkMsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFdBQVc7SUFDN0MsWUFBWSxFQUNSLEtBQUssR0FBRyxDQUFDLEVBQ1QsS0FBSyxHQUFHLENBQUMsRUFDVCxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNoQixJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUNTLEVBQUU7UUFDM0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFnQixFQUFFO1lBQy9DLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUE7WUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtZQUNwQixPQUFPO2dCQUNILEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDOUIsQ0FBQTtRQUNMLENBQUMsQ0FBQTtRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDO1lBQzNCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQ2Isa0JBQWtCO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksWUFBWSxDQUFDO1lBQ3JDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pCLENBQUMsQ0FBQyxDQUFBO1FBQ0gsa0JBQWtCO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksWUFBWSxDQUFDO1lBQ3ZDLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUFDLENBQUE7UUFDSCxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUM7YUFDakMsU0FBUyxFQUFFO2FBQ1gsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7UUFFekMsa0JBQWtCO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksWUFBWSxDQUFDO1lBQ25DLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNWLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNWLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNWLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtTQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ0gsS0FBSyxDQUFDO1lBQ0YsT0FBTztZQUNQLFFBQVEsRUFBRSxnQkFBZ0I7U0FDN0IsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKIn0=

/***/ }),

/***/ 7548:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/parser/gltf/parser.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseGLB: () => (/* binding */ parseGLB)
/* harmony export */ });
/* harmony import */ var _types_gltf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/gltf.js */ 6022);

/**
 * @see https://www.khronos.org/files/gltf20-reference-guide.pdf
 */
function parseGLB(data) {
    const view = new DataView(data);
    const magicNumber = view.getUint32(0, true);
    if (magicNumber !== 0x46546c67) {
        throw new Error("Invalid magic number for GLB file!");
    }
    const version = view.getUint32(4, true);
    if (version !== 2) {
        throw new Error(`We support only version 2, but this file is in version ${version}!`);
    }
    const length = view.getUint32(8, true);
    let gltf = {};
    const chunks = [];
    const chunkTypes = [];
    let offset = 12;
    while (offset < length) {
        const chunkLength = view.getUint32(offset, true);
        offset += 4;
        const chunkType = view.getUint32(offset, true);
        offset += 4;
        const chunkData = data.slice(offset, offset + chunkLength);
        offset += chunkLength;
        if (chunkType === 0x4e4f534a) {
            // This is the JSON part.
            const json = new TextDecoder().decode(chunkData);
            try {
                const object = JSON.parse(json);
                (0,_types_gltf_js__WEBPACK_IMPORTED_MODULE_0__.assertTgdFormatGltf)(object);
                gltf = object;
                chunkTypes.push({ type: "JSON", size: chunkData.byteLength });
            }
            catch (error) {
                console.error("Unable to parse this JSON file:", json);
                console.error(error);
                throw new Error("Invalid JSON data in the chunk!");
            }
        }
        else if (chunkType === 0x004e4942) {
            chunks.push(chunkData);
            chunkTypes.push({ type: "BIN", size: chunkData.byteLength });
        }
        else {
            throw new Error(`We got an invalid chunk type: 0x${chunkType
                .toString(16)
                .padStart(8, "0")}!`);
        }
    }
    return { gltf, chunks, chunkTypes };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhcnNlci9nbHRmL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLG1CQUFtQixFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFckU7O0dBRUc7QUFFSCxNQUFNLFVBQVUsUUFBUSxDQUFDLElBQWlCO0lBS3RDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzNDLElBQUksV0FBVyxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdkMsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDWCwwREFBMEQsT0FBTyxHQUFHLENBQ3ZFLENBQUE7SUFDTCxDQUFDO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdEMsSUFBSSxJQUFJLEdBQUcsRUFBbUIsQ0FBQTtJQUM5QixNQUFNLE1BQU0sR0FBa0IsRUFBRSxDQUFBO0lBQ2hDLE1BQU0sVUFBVSxHQUFrRCxFQUFFLENBQUE7SUFDcEUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ2YsT0FBTyxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDaEQsTUFBTSxJQUFJLENBQUMsQ0FBQTtRQUNYLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzlDLE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUE7UUFDMUQsTUFBTSxJQUFJLFdBQVcsQ0FBQTtRQUNyQixJQUFJLFNBQVMsS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUMzQix5QkFBeUI7WUFDekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDaEQsSUFBSSxDQUFDO2dCQUNELE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3hDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUMzQixJQUFJLEdBQUcsTUFBTSxDQUFBO2dCQUNiLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtZQUNqRSxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDYixPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLElBQUksQ0FBQyxDQUFBO2dCQUN0RCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUE7WUFDdEQsQ0FBQztRQUNMLENBQUM7YUFBTSxJQUFJLFNBQVMsS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtRQUNoRSxDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU0sSUFBSSxLQUFLLENBQ1gsbUNBQW1DLFNBQVM7aUJBQ3ZDLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUMzQixDQUFBO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQTtBQUN2QyxDQUFDIn0=

/***/ }),

/***/ 7601:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/camera/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCamera: () => (/* reexport safe */ _camera_js__WEBPACK_IMPORTED_MODULE_0__.TgdCamera),
/* harmony export */   TgdCameraOrthographic: () => (/* reexport safe */ _camera_orthographic_js__WEBPACK_IMPORTED_MODULE_1__.TgdCameraOrthographic),
/* harmony export */   TgdCameraPerspective: () => (/* reexport safe */ _camera_perspective_js__WEBPACK_IMPORTED_MODULE_2__.TgdCameraPerspective)
/* harmony export */ });
/* harmony import */ var _camera_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera.js */ 666);
/* harmony import */ var _camera_orthographic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camera-orthographic.js */ 7381);
/* harmony import */ var _camera_perspective_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./camera-perspective.js */ 4153);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2FtZXJhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsVUFBVSxDQUFBO0FBQ3hCLGNBQWMsdUJBQXVCLENBQUE7QUFDckMsY0FBYyxzQkFBc0IsQ0FBQSJ9

/***/ }),

/***/ 7729:
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tolokoban_tgd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tolokoban/tgd */ 953);
/* harmony import */ var _help__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./help */ 1602);
/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.css */ 2083);
/* harmony import */ var _font_josefin_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./font/josefin.css */ 558);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




function start() {
    return __awaiter(this, void 0, void 0, function* () {
        const help = new _help__WEBPACK_IMPORTED_MODULE_3__.Help();
        yield help.load("main");
        get("index").addEventListener("click", (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            help.load("index");
        });
        const symbols = yield (0,_tolokoban_tgd__WEBPACK_IMPORTED_MODULE_0__.tgdLoadArrayBuffer)("assets/symbols.arr");
        globalThis.document.addEventListener("keydown", (evt) => {
            if (evt.key === "F1") {
                evt.preventDefault();
                evt.stopPropagation();
                globalThis.document.body.classList.toggle("show");
                return;
            }
            console.log("🚀 [index] evt.key =", evt.key);
        });
        removeSplashScreen();
    });
}
function removeSplashScreen() {
    const SPLASH_VANISHING_DELAY = 900;
    const splash = document.getElementById("splash");
    if (!splash)
        return;
    splash.classList.add("vanish");
    window.setTimeout(() => {
        const parent = splash.parentNode;
        if (!parent)
            return;
        parent.removeChild(splash);
    }, SPLASH_VANISHING_DELAY);
}
function get(id) {
    const element = document.getElementById(id);
    if (!element)
        throw new Error(`Found no element with id #${id}!`);
    return element;
}
void start();


/***/ }),

/***/ 7790:
/*!**************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background/background.vert ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nuniform float uniZoom;\nuniform vec2 uniScale;\nuniform vec2 uniScroll;\nuniform float uniZ;\nin vec2 attPoint;\nin vec2 attUV;\nout vec2 varUV;\n\nvoid main() {\n    varUV = (attUV + uniScroll) * uniZoom;\n    float x = uniScale.x * attPoint.x;\n    float y = uniScale.y * attPoint.y;\n    gl_Position = vec4(x, y, uniZ, 1.0);\n}";

/***/ }),

/***/ 7872:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/painter/node/node.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterNode: () => (/* binding */ TgdPainterNode)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../painter.js */ 2362);
/* harmony import */ var _math_transfo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/transfo.js */ 8537);



/**
 * A Node can hold others Nodes or any object providing the
 * TgdPainterNodeChild interface.
 *
 * Each Node is a local space for its children.
 *
 * All objects implementing `TgdInterfaceTransformable` have a `transfo` attribute
 * that controls its position/orientation/scale in the world coordinate system. If
 * you need an object's transformation to be defined in another object coordinate
 * system, you just have to wrap it in a `TgdPainterNode`.
 *
 * As long as a `Transformable` is hold by the `painter` attribute of a `TgdPainterNode`,
 * it will be controlled by the node.
 * That means, you should not use its `transfo` attribute because it will be
 * overwritten by the node.
 *
 * @example
 * ```
 * const body = new TgdPainterNode({
 *   target: new TgdPainterMesh(context)
 * })
 * const leftArm = new TgdPainterNode({
 *   transfo: { poition: [1, 0, 0] },
 *   target: new TgdPainterMesh(context)
 * })
 * const rightArm = new TgdPainterNode({
 *   transfo: { poition: [-1, 0, 0] },
 *   target: new TgdPainterMesh(context)
 * })
 * body.add( leftArm, rightArm )
 * ```
 */
class TgdPainterNode extends _painter_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainter {
    constructor(options = {}) {
        super();
        this.parentMatrix = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        /**
         * globalMatrix = parentMatrix * transfo
         */
        this.globalMatrix = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4();
        this.nodes = [];
        this.targets = [];
        const { children = [], transfo, logic, paintTheTargets = true, name = `TgdPainterNode/${this.name}`, } = options;
        this.paintTheTargets = paintTheTargets;
        for (const child of children)
            this.add(child);
        this.transfo = new _math_transfo_js__WEBPACK_IMPORTED_MODULE_2__.TgdTransfo(transfo);
        this.logic = logic === null || logic === void 0 ? void 0 : logic.bind(this);
        this.name = name;
    }
    delete() {
        var _a;
        for (const child of this.nodes) {
            child.delete();
        }
        for (const target of this.targets)
            (_a = target.delete) === null || _a === void 0 ? void 0 : _a.call(target);
    }
    add(...children) {
        for (const child of children) {
            if (child instanceof TgdPainterNode) {
                this.nodes.push(child);
            }
            else {
                this.targets.push(child);
            }
        }
        return this;
    }
    remove(...children) {
        for (const child of children) {
            if (child instanceof TgdPainterNode) {
                const nodePosition = this.nodes.indexOf(child);
                if (nodePosition !== -1)
                    this.nodes.splice(nodePosition, 1);
            }
            else {
                const index = this.targets.indexOf(child);
                if (index !== -1)
                    this.targets.splice(index, 1);
            }
        }
        return this;
    }
    getNodes() {
        return [...this.nodes];
    }
    getTargets() {
        return [...this.targets];
    }
    paint(time, delay) {
        var _a, _b, _c;
        (_a = this.logic) === null || _a === void 0 ? void 0 : _a.call(this, time, delay);
        this.parentMatrix.reset();
        const fringe = [this];
        while (fringe.length > 0) {
            const node = fringe.shift();
            node.globalMatrix
                .from(node.parentMatrix)
                .multiply(node.transfo.matrix);
            (_b = node.logic) === null || _b === void 0 ? void 0 : _b.call(node, time, delay);
            for (const target of node.targets) {
                target.transfo.matrix.from(node.globalMatrix);
                if (this.paintTheTargets)
                    (_c = target.paint) === null || _c === void 0 ? void 0 : _c.call(target, time, delay);
            }
            for (const child of node.nodes) {
                child.parentMatrix.from(node.globalMatrix);
                fringe.push(child);
            }
        }
    }
    debug(caption = "TgdPainterNode") {
        console.log(caption);
        actualDebug(this);
    }
}
function actualDebug(node, indent = "| ") {
    var _a, _b;
    console.log(`${indent}${node.name}  [${format(node.transfo.orientation)}] (${format(node.transfo.position)})`);
    const targets = node.getTargets();
    if (targets.length > 0) {
        if (targets.length === 1) {
            console.log(`${indent}  Target: ${(_a = targets[0].name) !== null && _a !== void 0 ? _a : "..."}`);
        }
        else {
            console.log(`${indent}  Targets (${targets.length})`);
            for (const target of targets) {
                console.log(`${indent}    ${(_b = target.name) !== null && _b !== void 0 ? _b : "..."}`);
            }
        }
    }
    const nodes = node.getNodes();
    if (nodes.length > 0) {
        console.log(`${indent}  Nodes (${nodes.length})`);
        for (const child of nodes) {
            actualDebug(child, `${indent}  | `);
        }
    }
}
function format(vec) {
    const list = [...vec].map(v => v.toFixed(3));
    return list.join(", ");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWludGVyL25vZGUvbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFvQixNQUFNLFdBQVcsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sb0JBQW9CLENBQUE7QUFtQmxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JHO0FBQ0gsTUFBTSxPQUFPLGNBQWUsU0FBUSxVQUFVO0lBYTFDLFlBQVksVUFBMEMsRUFBRTtRQUNwRCxLQUFLLEVBQUUsQ0FBQTtRQVhNLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUM3Qzs7V0FFRztRQUNjLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUM1QixVQUFLLEdBQXFCLEVBQUUsQ0FBQTtRQUM1QixZQUFPLEdBQXVDLEVBQUUsQ0FBQTtRQU03RCxNQUFNLEVBQ0YsUUFBUSxHQUFHLEVBQUUsRUFDYixPQUFPLEVBQ1AsS0FBSyxFQUNMLGVBQWUsR0FBRyxJQUFJLEVBQ3RCLElBQUksR0FBRyxrQkFBa0IsSUFBSSxDQUFDLElBQUksRUFBRSxHQUN2QyxHQUFHLE9BQU8sQ0FBQTtRQUNYLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFBO1FBQ3RDLEtBQUssTUFBTSxLQUFLLElBQUksUUFBUTtZQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FB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

/***/ }),

/***/ 7930:
/*!****************************************************!*\
  !*** ../../tgd2/lib/dist/utils/animation/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdAnimChain: () => (/* reexport safe */ _chain_js__WEBPACK_IMPORTED_MODULE_0__.tgdAnimChain),
/* harmony export */   tgdAnimChainTransfoInterpolations: () => (/* reexport safe */ _chain_transfo_interpolations_js__WEBPACK_IMPORTED_MODULE_1__.tgdAnimChainTransfoInterpolations)
/* harmony export */ });
/* harmony import */ var _chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chain.js */ 5647);
/* harmony import */ var _chain_transfo_interpolations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chain-transfo-interpolations.js */ 5723);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYW5pbWF0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsZ0NBQWdDLENBQUEifQ==

/***/ }),

/***/ 7937:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/types/guards.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertArray: () => (/* binding */ assertArray),
/* harmony export */   assertArrayBuffer: () => (/* binding */ assertArrayBuffer),
/* harmony export */   assertBoolean: () => (/* binding */ assertBoolean),
/* harmony export */   assertNumber: () => (/* binding */ assertNumber),
/* harmony export */   assertObject: () => (/* binding */ assertObject),
/* harmony export */   assertOptionalArrayBuffer: () => (/* binding */ assertOptionalArrayBuffer),
/* harmony export */   assertOptionalString: () => (/* binding */ assertOptionalString),
/* harmony export */   assertString: () => (/* binding */ assertString),
/* harmony export */   assertType: () => (/* binding */ assertType),
/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer),
/* harmony export */   isBoolean: () => (/* binding */ isBoolean),
/* harmony export */   isNumber: () => (/* binding */ isNumber),
/* harmony export */   isObject: () => (/* binding */ isObject),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   isStringArray: () => (/* binding */ isStringArray),
/* harmony export */   isType: () => (/* binding */ isType)
/* harmony export */ });
function isObject(data) {
    if (!data)
        return false;
    if (Array.isArray(data))
        return false;
    return typeof data === "object";
}
function isString(data) {
    return typeof data === "string";
}
function isNumber(data) {
    return typeof data === "number";
}
function isBoolean(data) {
    return typeof data === "boolean";
}
function isArrayBuffer(data) {
    if (!data)
        return false;
    return data instanceof ArrayBuffer;
}
function isStringArray(data) {
    if (!Array.isArray(data))
        return false;
    for (const item of data) {
        if (!isString(item))
            return false;
    }
    return true;
}
function assertNumber(data, name = "data") {
    if (!isNumber(data)) {
        throw new TypeError(`${name} was expected to be a number but we got ${typeof data}!`);
    }
}
function assertString(data, name = "data") {
    if (!isString(data)) {
        throw new TypeError(`${name} was expected to be a string but we got ${typeof data}!`);
    }
}
function assertOptionalString(data, name = "data") {
    if (data && !isString(data)) {
        throw new TypeError(`${name} was expected to be a string but we got ${typeof data}!`);
    }
}
function assertBoolean(data, name = "data") {
    if (!isBoolean(data)) {
        throw new TypeError(`${name} was expected to be a boolean but we got ${typeof data}!`);
    }
}
function assertObject(data, name = "data") {
    if (!isObject(data)) {
        throw new TypeError(`${name} was expected to be an object but we got ${typeof data}!`);
    }
}
function assertArray(data, name = "data") {
    if (!Array.isArray(data)) {
        throw new TypeError(`${name} was expected to be an Array but we got ${typeof data}!`);
    }
}
function assertArrayBuffer(data, name = "data") {
    if (!isArrayBuffer(data)) {
        throw new TypeError(`${name} was expected to be an ArrayBuffer but we got ${typeof data}!`);
    }
}
function assertOptionalArrayBuffer(data, name = "data") {
    if (data && !isArrayBuffer(data)) {
        throw new TypeError(`${name} was expected to be an ArrayBuffer but we got ${typeof data}!`);
    }
}
function isType(data, type) {
    try {
        assertType(data, type);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function assertType(data, type, prefix = "data") {
    if (type === "unknown")
        return;
    if (type === "null") {
        if (data !== null) {
            throw new TypeError(`Expected ${prefix} to be null and not a ${typeof data}!`);
        }
        return;
    }
    if (typeof type === "string") {
        if (typeof data !== type) {
            throw new TypeError(`Expected ${prefix} to be a ${type} and not a ${typeof data}!`);
        }
        return;
    }
    if (Array.isArray(type)) {
        const [kind] = type;
        switch (kind) {
            case "array":
                assertTypeArray(data, prefix, type);
                return;
            case "map":
                assertTypeMap(data, prefix, type);
                return;
            case "?":
                assertTypeOptional(data, prefix, type);
                return;
            case "|":
                assertTypeAlternative(data, prefix, type);
                return;
            case "tuple":
                assertTypeTuple(data, prefix, type);
                return;
            case "partial":
                assertTypePartial(data, prefix, type);
                return;
            case "literal":
                assertTypeLiteral(data, prefix, type);
                return;
            default:
                if (kind.startsWith("array(")) {
                    const size = Number.parseInt(kind.slice("array(".length, -1), 10);
                    assertTypeArrayWithDimension(data, prefix, type, size);
                    return;
                }
                throw new TypeError(`Don't know how to create a type guard for this kind of type: ${JSON.stringify(type)}`);
        }
    }
    if (typeof data !== "object")
        throw new TypeError(`Expected ${prefix} to be an object and not a ${typeof data}!`);
    const object = data;
    for (const name of Object.keys(type)) {
        if (typeof name !== "string")
            continue;
        assertType(object[name], type[name], `${prefix}.${name}`);
    }
}
function assertTypeTuple(data, prefix, [, ...types]) {
    assertArray(data);
    if (types.length !== data.length) {
        throw new TypeError(`Expected ${prefix} to have ${types.length} elements, not ${data.length}!`);
    }
    for (const [index, type_] of types.entries()) {
        const type = type_;
        assertType(data[index], type, `${prefix}[$i]`);
    }
}
function assertTypePartial(data, prefix, [, type]) {
    assertObject(data, prefix);
    for (const name of Object.keys(type)) {
        if (typeof name !== "string")
            continue;
        const attrib = data[name];
        if (attrib !== undefined) {
            assertType(attrib, type[name], `${prefix}.${name}`);
        }
    }
}
function assertTypeArray(data, prefix, type) {
    if (!Array.isArray(data))
        throw new TypeError(`Expected ${prefix} to be an array and not a ${typeof data}!`);
    const [, subType] = type;
    for (const [index, datum] of data.entries()) {
        assertType(datum, subType, `${prefix}[${index}]`);
    }
}
function assertTypeArrayWithDimension(data, prefix, type, size) {
    if (!Array.isArray(data))
        throw new TypeError(`Expected ${prefix} to be an array and not a ${typeof data}!`);
    if (data.length !== size)
        throw new TypeError(`${prefix} was expected to have a length of ${size}, but we got ${data.length}!`);
    const [, subType] = type;
    for (const [index, datum] of data.entries()) {
        assertType(datum, subType, `${prefix}[${index}]`);
    }
}
function assertTypeMap(data, prefix, type) {
    if (!isObject(data))
        throw new TypeError(`Expected ${prefix} to be an object and not a ${typeof data}!`);
    const [, subType] = type;
    for (const key of Object.keys(data)) {
        if (typeof key === "string") {
            assertType(data[key], subType, `${prefix}[${key}]`);
        }
    }
}
function assertTypeOptional(data, prefix, type) {
    if (data === undefined)
        return;
    const [, optionalType] = type;
    assertType(data, optionalType, prefix);
}
function assertTypeAlternative(data, prefix, type) {
    const [, ...altTypes] = type;
    let lastException = new Error(`No type has been defined for this alternative: ${JSON.stringify(type)}!`);
    for (const altType of altTypes) {
        try {
            assertType(data, altType, prefix);
            return;
        }
        catch (error) {
            if (error instanceof Error)
                lastException = error;
        }
    }
    throw lastException;
}
function assertTypeLiteral(data, prefix, type) {
    const [, ...literals] = type;
    for (const literal of literals) {
        if (data === literal)
            return;
    }
    throw new TypeError(`Expected ${prefix} to be a literal (${literals
        .map(item => `"${item}"`)
        .join(" | ")})!`);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 7964:
/*!********************************************************!*\
  !*** ../../tgd2/lib/dist/painter/segments/segments.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterSegments: () => (/* binding */ TgdPainterSegments),
/* harmony export */   TgdPainterSegmentsData: () => (/* binding */ TgdPainterSegmentsData)
/* harmony export */ });
/* harmony import */ var _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../dataset/index.js */ 5710);
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../painter.js */ 2362);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../vao/index.js */ 9856);
/* harmony import */ var _segments_frag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./segments.frag */ 9331);
/* harmony import */ var _segments_vert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./segments.vert */ 770);
/* harmony import */ var _texture_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../texture/index.js */ 4765);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../program/index.js */ 9974);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../../utils/index.js */ 3291);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* eslint-disable unicorn/no-useless-spread */









/**
 * @example
 * ```
 * const factory = new TgdPainterSegmentsData()
 * factory.add(
 *   [0, 0, 0, .2],
 *   [1, 0, 0, .1],
 * )
 * factory.add(
 *   [0, 0, 0, .2],
 *   [0, 1, 0, .1],
 * )
 * factory.add(
 *   [0, 0, 0, .2],
 *   [0, 0, 1, .1],
 * )
 * const segments = new TgdPainterSegments(
 *   segment, factory
 * )
 * ```
 */
class TgdPainterSegments extends _painter_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainter {
    constructor(context, options) {
        super();
        this.context = context;
        this.minRadius = 0;
        this.radiusMultiplier = 1;
        this.radiusConstant = 1;
        this.radiusSwitch = 0;
        this.light = 1;
        this.shiftZ = 0;
        this.contrast = 0.3;
        this.specularIntensity = 0.4;
        this.specularExponent = 30;
        const { roundness = 3, minRadius = 0, makeDataset } = options;
        this.minRadius = minRadius;
        if (roundness > 127) {
            throw new Error("[TgdPainterSegments] Max roundness is 127!");
        }
        if (roundness < 0) {
            throw new Error("[TgdPainterSegments] Min roundness is 0!");
        }
        this.colorTexture = new _texture_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdTexture2D(context)
            .setParams({
            magFilter: "NEAREST",
            minFilter: "NEAREST",
            wrapR: "CLAMP_TO_EDGE",
            wrapS: "CLAMP_TO_EDGE",
            wrapT: "CLAMP_TO_EDGE",
        })
            .loadBitmap((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.tgdCanvasCreatePalette)(["#f44", "#4f4", "#44f"]));
        const prg = new _program_index_js__WEBPACK_IMPORTED_MODULE_6__.TgdProgram(context.gl, {
            vert: _segments_vert__WEBPACK_IMPORTED_MODULE_4__,
            frag: _segments_frag__WEBPACK_IMPORTED_MODULE_3__,
        });
        this.prg = prg;
        const { capsule, elements } = makeCapsule(roundness);
        const instance = makeDataset();
        instance.debug();
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVertexArray(context.gl, prg, [capsule, instance], elements);
        this.vertexCount = elements.length;
        this.instanceCount = instance.count;
    }
    delete() {
        this.vao.delete();
    }
    paint(_time, _delay) {
        const { context, prg, vao, colorTexture, vertexCount, instanceCount, light, radiusMultiplier, radiusConstant, radiusSwitch, shiftZ, contrast, specularIntensity, specularExponent, } = this;
        const { gl, camera } = context;
        gl.disable(gl.DITHER);
        prg.use();
        const minRadius = (this.minRadius * camera.spaceHeightAtTarget) /
            (camera.zoom * camera.screenHeight);
        prg.uniform1f("uniMinRadius", minRadius);
        prg.uniform1f("uniLight", light);
        prg.uniform1f("uniShiftZ", shiftZ);
        prg.uniform1f("uniRadiusMultiplier", radiusMultiplier);
        prg.uniform1f("uniRadiusConstant", radiusConstant);
        prg.uniform1f("uniRadiusSwitch", radiusSwitch);
        prg.uniform1f("uniContrast", contrast);
        prg.uniform1f("uniSpecularIntensity", specularIntensity);
        prg.uniform1f("uniSpecularExponent", specularExponent);
        colorTexture.activate(0, prg, "uniTexture");
        prg.uniformMatrix4fv("uniModelViewMatrix", camera.matrixModelView);
        prg.uniformMatrix4fv("uniProjectionMatrix", camera.matrixProjection);
        vao.bind();
        gl.drawElementsInstanced(gl.TRIANGLES, vertexCount, gl.UNSIGNED_BYTE, 0, instanceCount);
    }
}
class TgdPainterSegmentsData {
    constructor() {
        this._count = 0;
        this.attAxyzr = [];
        this.attAuv = [];
        this.attAinfluence = [];
        this.attBxyzr = [];
        this.attBuv = [];
        this.attBinfluence = [];
        this.makeDataset = () => {
            const dataset = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset({
                attAxyzr: "vec4",
                attAuv: "vec2",
                attAinfluence: "float",
                attBxyzr: "vec4",
                attBuv: "vec2",
                attBinfluence: "float",
            }, {
                divisor: 1,
            });
            dataset.set("attAxyzr", new Float32Array(this.attAxyzr));
            dataset.set("attAuv", new Float32Array(this.attAuv));
            dataset.set("attAinfluence", new Float32Array(this.attAinfluence));
            dataset.set("attBxyzr", new Float32Array(this.attBxyzr));
            dataset.set("attBuv", new Float32Array(this.attBuv));
            dataset.set("attBinfluence", new Float32Array(this.attBinfluence));
            return dataset;
        };
    }
    get count() {
        return this._count;
    }
    /**
     * @param Axyzr (x,y,z) and radius of point A.
     * @param Bxyzr (x,y,z) and radius of point B.
     * @param Auv Texture coordinates for point A.
     * @param Buv Texture coordinates for point B.
     * @param radiusMultiplierInfluenceA If you put 0, the radius won't change regardless to the currently applied radius multiplicator.
     * @param radiusMultiplierInfluenceB
     */
    add(Axyzr, Bxyzr, Auv = [0, 0], Buv = [0, 0], radiusMultiplierInfluenceA = 1, radiusMultiplierInfluenceB = 1) {
        this.attAxyzr.push(...Axyzr);
        this.attAuv.push(...Auv);
        this.attAinfluence.push(radiusMultiplierInfluenceA);
        this.attBxyzr.push(...Bxyzr);
        this.attBuv.push(...Buv);
        this.attBinfluence.push(radiusMultiplierInfluenceB);
        this._count++;
    }
}
/**
 * The capsule is a 2D shape (x,y) that will be used
 * as a pattern for the segment.
 * The segment will expand this template along Y axis.
 * The tip pointing toward +Y is called A.
 * The tip pointing toward -Y is called B.
 * The z coodinates indicates to which tip the point
 * is attached: 0 for A and 1 for B.
 */
function makeCapsule(roundness) {
    // prettier-ignore
    const offset = [
        ...[0, 0, 0], // 0
        ...[1, 0, 0], // 1
        ...[-1, 0, 0], // 2
        ...[0, 0, 1], // 3
        ...[1, 0, 1], // 4
        ...[-1, 0, 1], // 5
    ];
    // prettier-ignore
    const normal = [
        ...[0, 0, 1], // 0
        ...[1, 0, 0], // 1
        ...[-1, 0, 0], // 2
        ...[0, 0, 1], // 3
        ...[1, 0, 0], // 4
        ...[-1, 0, 0], // 5
    ];
    // prettier-ignore
    const elements = [
        0, 3, 1,
        3, 4, 1,
        0, 2, 5,
        3, 0, 5,
    ];
    if (roundness > 0) {
        let oldIndexA = 1;
        let oldIndexB = 4;
        let elementIndex = 6;
        // Temporary variable to prevent multiple new() calls.
        const n = new _math_index_js__WEBPACK_IMPORTED_MODULE_8__.TgdVec3();
        for (let roundnessStep = 0; roundnessStep < roundness; roundnessStep++) {
            const ang = (Math.PI * (roundnessStep + 1)) / (roundness + 1);
            const x = Math.cos(ang);
            const y = Math.sin(ang);
            // We set z to 0 because it's related to tip A.
            offset.push(x, y, 0);
            n.from([x, 0, 1 - Math.abs(x)]); //.normalize()
            normal.push(n.x, n.y, n.z);
            elements.push(0, oldIndexA, elementIndex);
            oldIndexA = elementIndex;
            elementIndex++;
            // We set z to 1 because it's related to tip B.
            offset.push(x, -y, 1);
            n.from([x, 0, 1 - Math.abs(x)]).normalize();
            normal.push(n.x, n.y, n.z);
            elements.push(3, elementIndex, oldIndexB);
            oldIndexB = elementIndex;
            elementIndex++;
        }
        elements.push(0, oldIndexA, 2);
        elements.push(3, 5, oldIndexB);
    }
    const capsule = new _dataset_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdDataset({
        attOffset: "vec3",
        attNormal: "vec3",
    });
    capsule.set("attOffset", new Float32Array(offset));
    capsule.set("attNormal", new Float32Array(normal));
    return {
        capsule,
        elements: new Uint8Array(elements),
    };
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 8163:
/*!*********************************************!*\
  !*** ../../tgd2/lib/dist/material/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterial: () => (/* reexport safe */ _material_js__WEBPACK_IMPORTED_MODULE_4__.TgdMaterial),
/* harmony export */   TgdMaterialDiffuse: () => (/* reexport safe */ _diffuse_js__WEBPACK_IMPORTED_MODULE_0__.TgdMaterialDiffuse),
/* harmony export */   TgdMaterialFlat: () => (/* reexport safe */ _flat_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterialFlat),
/* harmony export */   TgdMaterialGhost: () => (/* reexport safe */ _ghost_js__WEBPACK_IMPORTED_MODULE_2__.TgdMaterialGhost),
/* harmony export */   TgdMaterialHull: () => (/* reexport safe */ _hull_js__WEBPACK_IMPORTED_MODULE_3__.TgdMaterialHull),
/* harmony export */   TgdMaterialNormals: () => (/* reexport safe */ _normals_js__WEBPACK_IMPORTED_MODULE_5__.TgdMaterialNormals),
/* harmony export */   TgdMaterialSolid: () => (/* reexport safe */ _solid_js__WEBPACK_IMPORTED_MODULE_6__.TgdMaterialSolid)
/* harmony export */ });
/* harmony import */ var _diffuse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diffuse.js */ 1033);
/* harmony import */ var _flat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flat.js */ 9748);
/* harmony import */ var _ghost_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ghost.js */ 4252);
/* harmony import */ var _hull_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hull.js */ 8492);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./material.js */ 6018);
/* harmony import */ var _normals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./normals.js */ 2711);
/* harmony import */ var _solid_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./solid.js */ 6900);







//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0ZXJpYWwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxZQUFZLENBQUE7QUFDMUIsY0FBYyxXQUFXLENBQUE7QUFDekIsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 8208:
/*!*****************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/mesh/mesh.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMesh: () => (/* binding */ TgdPainterMesh)
/* harmony export */ });
/* harmony import */ var _geometry_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../geometry/index.js */ 7250);
/* harmony import */ var _material_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../material/index.js */ 8163);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../math/index.js */ 6088);
/* harmony import */ var _program_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../program/index.js */ 9974);
/* harmony import */ var _vao_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../vao/index.js */ 9856);
/* harmony import */ var _shader_fragment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../shader/fragment.js */ 3627);
/* harmony import */ var _shader_vertex_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../../shader/vertex.js */ 8725);
/* harmony import */ var _painter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../painter.js */ 2362);








/**
 */
class TgdPainterMesh extends _painter_js__WEBPACK_IMPORTED_MODULE_7__.TgdPainter {
    constructor(context, options = {}) {
        var _a, _b;
        super();
        this.context = context;
        this.transfo = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdTransfo();
        this.drawMode = 0;
        this.bboxMin = null;
        this.bboxMax = null;
        this.paint = (time, delay) => {
            const { context, prg, geometry, material, drawMode, count, transfo } = this;
            const { gl, camera } = context;
            prg.use();
            material.setUniforms(prg, time, delay);
            prg.uniformMatrix4fv("uniTransfoMatrix", transfo.matrix);
            prg.uniformMatrix4fv("uniModelViewMatrix", camera.matrixModelView);
            prg.uniformMatrix4fv("uniProjectionMatrix", camera.matrixProjection);
            this.vao.bind();
            if (geometry.elements) {
                gl.drawElements(drawMode, count, this.elementsType, 0);
            }
            else {
                gl.drawArrays(drawMode, 0, count);
            }
            this.vao.unbind();
        };
        const { transfo, material = new _material_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterialNormals(), geometry = new _geometry_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdGeometryBox(), } = options;
        this.transfo = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdTransfo(transfo);
        this.material = material;
        this.geometry = geometry;
        this.drawMode =
            typeof geometry.drawMode === "number"
                ? geometry.drawMode
                : context.gl[geometry.drawMode];
        const vert = new _shader_vertex_js__WEBPACK_IMPORTED_MODULE_6__.TgdShaderVertex({
            uniforms: Object.assign({ uniTransfoMatrix: "mat4", uniModelViewMatrix: "mat4", uniProjectionMatrix: "mat4" }, material.uniforms),
            attributes: {
                [geometry.attPosition]: "vec4",
                [geometry.attNormal]: "vec3",
                [geometry.attUV]: "vec2",
            },
            varying: material.varyings,
            functions: {
                applyMaterial: [
                    "void applyMaterial() {",
                    [material.vertexShaderCode],
                    "}",
                ],
                getPosition: [
                    "vec4 getPosition(vec4 pos) {",
                    [(_a = material.vertexShaderCodeForGetPosition) !== null && _a !== void 0 ? _a : "return pos;"],
                    "}",
                ],
            },
            mainCode: [
                "gl_Position = uniProjectionMatrix * uniModelViewMatrix * uniTransfoMatrix * getPosition(POSITION);",
                "applyMaterial();",
            ],
        }).code;
        const frag = new _shader_fragment_js__WEBPACK_IMPORTED_MODULE_5__.TgdShaderFragment({
            uniforms: material.uniforms,
            outputs: { FragColor: "vec4" },
            varying: material.varyings,
            functions: {
                applyMaterial: [
                    "vec4 applyMaterial() {",
                    [material.fragmentShaderCode],
                    "}",
                ],
            },
            mainCode: [`FragColor = applyMaterial();`],
        }).code;
        const prg = new _program_index_js__WEBPACK_IMPORTED_MODULE_3__.TgdProgram(context.gl, {
            vert,
            frag,
        });
        this.prg = prg;
        this.vao = new _vao_index_js__WEBPACK_IMPORTED_MODULE_4__.TgdVertexArray(context.gl, prg, [geometry.dataset], geometry.elements);
        this.elementsType = geometry.elementsType;
        this.count = geometry.count;
        this.name = (_b = options.name) !== null && _b !== void 0 ? _b : `Mesh/${this.name}`;
    }
    debug(caption) {
        this.prg.debug(caption !== null && caption !== void 0 ? caption : this.name);
    }
    computeBoundingBox() {
        if (this.bboxMin && this.bboxMax) {
            return {
                min: this.bboxMin,
                max: this.bboxMax,
            };
        }
        const { dataset } = this.geometry;
        const { get } = dataset.getAttribAccessor("POSITION");
        const min = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(get(0, 0), get(0, 1), get(0, 2));
        const max = new _math_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(min);
        for (let index = 1; index < dataset.count; index++) {
            const x = get(index, 0);
            const y = get(index, 1);
            const z = get(index, 2);
            min.x = Math.min(min.x, x);
            max.x = Math.max(max.x, x);
            min.y = Math.min(min.y, y);
            max.y = Math.max(max.y, y);
            min.z = Math.min(min.z, z);
            max.z = Math.max(max.z, z);
        }
        this.bboxMin = min;
        this.bboxMax = max;
        return { min, max };
    }
    delete() {
        this.vao.delete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYWludGVyL21lc2gvbWVzaC9tZXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDM0QsT0FBTyxFQUFlLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQXFCLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXBELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFVMUM7R0FDRztBQUNILE1BQU0sT0FBTyxjQUFlLFNBQVEsVUFBVTtJQWExQyxZQUN1QixPQUlsQixFQUNELFVBQWlDLEVBQUU7O1FBRW5DLEtBQUssRUFBRSxDQUFBO1FBUFksWUFBTyxHQUFQLE9BQU8sQ0FJekI7UUFqQlcsWUFBTyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUE7UUFRekIsYUFBUSxHQUFXLENBQUMsQ0FBQTtRQUM3QixZQUFPLEdBQW1CLElBQUksQ0FBQTtRQUM5QixZQUFPLEdBQW1CLElBQUksQ0FBQTtRQXFIdEIsVUFBSyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQ3BELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FDaEUsSUFBSSxDQUFBO1lBQ1IsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxP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

/***/ }),

/***/ 8228:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/painter/skybox/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterSkybox: () => (/* reexport safe */ _skybox_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterSkybox)
/* harmony export */ });
/* harmony import */ var _skybox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./skybox.js */ 6556);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9za3lib3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxVQUFVLENBQUEifQ==

/***/ }),

/***/ 8243:
/*!*****************************************!*\
  !*** ../../tgd2/lib/dist/code/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdCodeConstants: () => (/* reexport safe */ _consts_js__WEBPACK_IMPORTED_MODULE_1__.tgdCodeConstants),
/* harmony export */   tgdCodeFunction_luminance: () => (/* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeFunction_luminance),
/* harmony export */   tgdCodeFunction_polar2uv: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_polar2uv),
/* harmony export */   tgdCodeFunction_polar2xy: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_polar2xy),
/* harmony export */   tgdCodeFunction_random: () => (/* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_3__.tgdCodeFunction_random),
/* harmony export */   tgdCodeFunction_rotate2D: () => (/* reexport safe */ _transfo_js__WEBPACK_IMPORTED_MODULE_4__.tgdCodeFunction_rotate2D),
/* harmony export */   tgdCodeFunction_shiftHue: () => (/* reexport safe */ _color_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeFunction_shiftHue),
/* harmony export */   tgdCodeFunction_uv2polar: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_uv2polar),
/* harmony export */   tgdCodeFunction_uv2xy: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_uv2xy),
/* harmony export */   tgdCodeFunction_xy2polar: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_xy2polar),
/* harmony export */   tgdCodeFunction_xy2uv: () => (/* reexport safe */ _coords_js__WEBPACK_IMPORTED_MODULE_2__.tgdCodeFunction_xy2uv)
/* harmony export */ });
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ 5332);
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consts.js */ 5079);
/* harmony import */ var _coords_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coords.js */ 4713);
/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ 2692);
/* harmony import */ var _transfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transfo.js */ 4978);





//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFNBQVMsQ0FBQTtBQUN2QixjQUFjLFVBQVUsQ0FBQTtBQUN4QixjQUFjLFVBQVUsQ0FBQTtBQUN4QixjQUFjLFVBQVUsQ0FBQTtBQUN4QixjQUFjLFdBQVcsQ0FBQSJ9

/***/ }),

/***/ 8255:
/*!*************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterMesh: () => (/* reexport safe */ _mesh_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdPainterMesh),
/* harmony export */   TgdPainterMeshGltf: () => (/* reexport safe */ _gltf_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterMeshGltf),
/* harmony export */   TgdPainterMeshNormals: () => (/* reexport safe */ _normals_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdPainterMeshNormals)
/* harmony export */ });
/* harmony import */ var _gltf_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gltf/index.js */ 693);
/* harmony import */ var _mesh_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mesh/index.js */ 110);
/* harmony import */ var _normals_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normals/index.js */ 3892);



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9tZXNoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsUUFBUSxDQUFBO0FBQ3RCLGNBQWMsV0FBVyxDQUFBIn0=

/***/ }),

/***/ 8312:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/mesh/normals/shader.frag ***!
  \************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nin vec3 varNormal;\nout vec4 FragColor;\n\nconst vec3 SHIFT = vec3(1.0, 1.0, 1.0);\n\nvoid main() {\n    vec3 normal = normalize(varNormal);\n    vec3 color = (normal + SHIFT) * 0.5;\n    FragColor = vec4(color, 1.0);\n}\n";

/***/ }),

/***/ 8398:
/*!*************************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/background-with-depth/background.frag ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\nuniform sampler2D uniDepth;\nin vec2 varUV;\nout vec4 FragColor;\n\nvoid main() {\n    vec3 color = texture(uniTexture, varUV).rgb;\n    float depth = texture(uniDepth, varUV).r;\n    FragColor = vec4(color, 1.0);\n    gl_FragDepth = depth;\n    gl_FragDepth = dot(cos(varUV * 30.0), cos(varUV * 30.0));\n    FragColor = vec4(vec3(gl_FragDepth) * color, 1.0);\n}";

/***/ }),

/***/ 8415:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/types/program.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3JhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9wcm9ncmFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==

/***/ }),

/***/ 8434:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/color/color.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdColor: () => (/* binding */ TgdColor)
/* harmony export */ });
class TgdColor {
    constructor(r = 0, g = 0, b = 0, a = 1) {
        /** Red [0..1] */
        this.R = 1;
        /** Green [0..1] */
        this.G = 1;
        /** Blue [0..1] */
        this.B = 1;
        /** Alpha [0..1] */
        this.A = 1;
        /** Hue [0..1] */
        this.H = 1;
        /** Saturation [0..1] */
        this.S = 1;
        /** Lumimance [0..1] */
        this.L = 1;
        if (typeof r === "string") {
            this.parse(r);
        }
        else {
            this.R = r;
            this.G = g;
            this.B = b;
            this.A = a;
        }
    }
    parse(color) {
        const context = getContext();
        context.clearRect(0, 0, 1, 1);
        context.fillStyle = color;
        context.fillRect(0, 0, 1, 1);
        const bitmap = context.getImageData(0, 0, 1, 1);
        const [R, G, B, A] = bitmap.data;
        const w = 1 / 255;
        this.R = R * w;
        this.G = G * w;
        this.B = B * w;
        this.A = A * w;
    }
    toString() {
        const { R, G, B, A } = this;
        return `#${hex(R)}${hex(G)}${hex(B)}${hex(A)}`;
    }
    rgb2hsl() {
        const R = this.R;
        const G = this.G;
        const B = this.B;
        const min = Math.min(R, G, B);
        const max = Math.max(R, G, B);
        const delta = max - min;
        this.L = HALF * (max + min);
        if (delta < EPSILON) {
            this.H = 0;
            this.S = 0;
        }
        else {
            this.S = delta / (1 - Math.abs(this.L + this.L - 1));
            if (max === R) {
                this.H =
                    G >= B
                        ? INV_6 * ((G - B) / delta)
                        : INV_6 * ((B - G) / delta);
            }
            else if (max === G) {
                this.H = INV_6 * (VAL_2 + (B - R) / delta);
            }
            else {
                this.H = INV_6 * (VAL_4 + (R - G) / delta);
            }
        }
        return this;
    }
    hsl2rgb() {
        const H = VAL_6 * this.H;
        const S = this.S;
        const L = this.L;
        const chroma = (1 - Math.abs(L + L - 1)) * S;
        const { R, G, B } = convertToRGB(H, chroma);
        const shift = L - chroma * HALF;
        this.R = R + shift;
        this.G = G + shift;
        this.B = B + shift;
        return this;
    }
}
const EPSILON = 1e-6;
const HALF = 0.5;
const VAL_1 = 1;
const VAL_2 = 2;
const VAL_3 = 3;
const VAL_4 = 4;
const VAL_5 = 5;
const VAL_6 = 6;
const INV_6 = 1 / VAL_6;
/**
 * This is an helper function for the method `hsl2rgb()`.
 * @param H Hue [0..6]
 * @param chroma Chrominance
 * @param x
 */
function convertToRGB(H, chroma) {
    let R = 0;
    let G = 0;
    let B = 0;
    const x = chroma * (1 - Math.abs((H % VAL_2) - 1));
    if (H < VAL_3) {
        if (H < VAL_1) {
            R = chroma;
            G = x;
            B = 0;
        }
        else if (H < VAL_2) {
            R = x;
            G = chroma;
            B = 0;
        }
        else {
            // H == 2.
            R = 0;
            G = chroma;
            B = x;
        }
    }
    else if (H < VAL_4) {
        R = 0;
        G = x;
        B = chroma;
    }
    else if (H < VAL_5) {
        R = x;
        G = 0;
        B = chroma;
    }
    else {
        R = chroma;
        G = 0;
        B = x;
    }
    return { R, G, B };
}
function hex(value) {
    return Math.floor(value * 255)
        .toString(16)
        .padStart(2, "0");
}
let globalContext = null;
function getContext() {
    if (!globalContext) {
        const canvas = document.createElement("canvas");
        canvas.width = 1;
        canvas.height = 1;
        const context = canvas.getContext("2d", {
            alpha: true,
            willReadFrequently: true,
        });
        if (!context)
            throw new Error("Unable to create a 2D context!");
        globalContext = context;
    }
    return globalContext;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29sb3IvY29sb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFFBQVE7SUFzQmpCLFlBQVksSUFBcUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQXJCdkQsaUJBQWlCO1FBQ1YsTUFBQyxHQUFXLENBQUMsQ0FBQTtRQUVwQixtQkFBbUI7UUFDWixNQUFDLEdBQVcsQ0FBQyxDQUFBO1FBRXBCLGtCQUFrQjtRQUNYLE1BQUMsR0FBVyxDQUFDLENBQUE7UUFFcEIsbUJBQW1CO1FBQ1osTUFBQyxHQUFXLENBQUMsQ0FBQTtRQUVwQixpQkFBaUI7UUFDVixNQUFDLEdBQVcsQ0FBQyxDQUFBO1FBRXBCLHdCQUF3QjtRQUNqQixNQUFDLEdBQVcsQ0FBQyxDQUFBO1FBRXBCLHVCQUF1QjtRQUNoQixNQUFDLEdBQVcsQ0FBQyxDQUFBO1FBR2hCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqQixDQUFDO2FBQU0sQ0FBQztZQUNKLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDVixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBYTtRQUNmLE1BQU0sT0FBTyxHQUFHLFVBQVUsRUFBRSxDQUFBO1FBQzVCLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDN0IsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFDekIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM1QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDakIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xCLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQTtRQUMzQixPQUFPLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDbEQsQ0FBQztJQUVNLE9BQU87UUFDVixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ2hCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDaEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUVoQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzdCLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFFdkIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUE7UUFFM0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDVixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNkLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNwRCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDWixJQUFJLENBQUMsQ0FBQztvQkFDRixDQUFDLElBQUksQ0FBQzt3QkFDRixDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO3dCQUMzQixDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7WUFDdkMsQ0FBQztpQkFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUE7WUFDOUMsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFBO1lBQzlDLENBQUM7UUFDTCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU0sT0FBTztRQUNWLE1BQU0sQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3hCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDaEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNoQixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDNUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUMzQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQTtRQUMvQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUNsQixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQTtBQUNwQixNQUFNLElBQUksR0FBRyxHQUFHLENBQUE7QUFDaEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtBQUV2Qjs7Ozs7R0FLRztBQUNILFNBQVMsWUFBWSxDQUFDLENBQVMsRUFBRSxNQUFjO0lBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNULElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNULElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNULE1BQU0sQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbEQsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDWixJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztZQUNaLENBQUMsR0FBRyxNQUFNLENBQUE7WUFDVixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNULENBQUM7YUFBTSxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztZQUNuQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ0wsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtZQUNWLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVCxDQUFDO2FBQU0sQ0FBQztZQUNKLFVBQVU7WUFDVixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ0wsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtZQUNWLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDVCxDQUFDO0lBQ0wsQ0FBQztTQUFNLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO1FBQ25CLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDTCxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxHQUFHLE1BQU0sQ0FBQTtJQUNkLENBQUM7U0FBTSxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztRQUNuQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNMLENBQUMsR0FBRyxNQUFNLENBQUE7SUFDZCxDQUFDO1NBQU0sQ0FBQztRQUNKLENBQUMsR0FBRyxNQUFNLENBQUE7UUFDVixDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNULENBQUM7SUFDRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQUN0QixDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUMsS0FBYTtJQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUN6QixRQUFRLENBQUMsRUFBRSxDQUFDO1NBQ1osUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsSUFBSSxhQUFhLEdBQW9DLElBQUksQ0FBQTtBQUV6RCxTQUFTLFVBQVU7SUFDZixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDakIsTUFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEUsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDaEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7UUFDakIsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDcEMsS0FBSyxFQUFFLElBQUk7WUFDWCxrQkFBa0IsRUFBRSxJQUFJO1NBQzNCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO1FBRS9ELGFBQWEsR0FBRyxPQUFPLENBQUE7SUFDM0IsQ0FBQztJQUNELE9BQU8sYUFBYSxDQUFBO0FBQ3hCLENBQUMifQ==

/***/ }),

/***/ 8466:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/canvas/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdCanvasGizmo: () => (/* reexport safe */ _gizmo_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdCanvasGizmo),
/* harmony export */   TgdCanvasLandscape: () => (/* reexport safe */ _landscape_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdCanvasLandscape)
/* harmony export */ });
/* harmony import */ var _gizmo_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gizmo/index.js */ 4999);
/* harmony import */ var _landscape_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./landscape/index.js */ 1808);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2FudmFzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsU0FBUyxDQUFBO0FBQ3ZCLGNBQWMsYUFBYSxDQUFBIn0=

/***/ }),

/***/ 8484:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/buffer/buffer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdBuffer: () => (/* binding */ TgdBuffer)
/* harmony export */ });
class TgdBuffer {
    constructor(gl, options = {}) {
        var _a, _b;
        this.gl = gl;
        const buffer = gl.createBuffer();
        if (!buffer)
            throw new Error("Unable to create WebGLBuffer!");
        this._target = (_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : "ARRAY_BUFFER";
        this._usage = (_b = options === null || options === void 0 ? void 0 : options.usage) !== null && _b !== void 0 ? _b : "STATIC_DRAW";
        this.buffer = buffer;
        const { data } = options;
        if (data) {
            this.bufferData(Object.assign(Object.assign({}, options), { data }));
        }
    }
    get target() {
        return this._target;
    }
    bind(target) {
        const { gl, buffer } = this;
        this._target = target !== null && target !== void 0 ? target : this._target;
        gl.bindBuffer(gl[this._target], buffer);
    }
    bufferData(options) {
        var _a, _b;
        const { gl } = this;
        this._usage = (_a = options.usage) !== null && _a !== void 0 ? _a : this._usage;
        this._target = (_b = options.target) !== null && _b !== void 0 ? _b : this._target;
        this.bind(options.target);
        gl.bufferData(gl[this._target], options.data, gl[this._usage]);
    }
    delete() {
        const { gl, buffer } = this;
        gl.deleteBuffer(buffer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2J1ZmZlci9idWZmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkJBLE1BQU0sT0FBTyxTQUFTO0lBTWxCLFlBQ29CLEVBQTBCLEVBQzFDLFVBQXFDLEVBQUU7O1FBRHZCLE9BQUUsR0FBRixFQUFFLENBQXdCO1FBRzFDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQTtRQUU3RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLE1BQU0sbUNBQUksY0FBYyxDQUFBO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsS0FBSyxtQ0FBSSxhQUFhLENBQUE7UUFDN0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQTtRQUN4QixJQUFJLElBQUksRUFBRSxDQUFDO1lBQ1AsSUFBSSxDQUFDLFVBQVUsaUNBQU0sT0FBTyxLQUFFLElBQUksSUFBRyxDQUFBO1FBQ3pDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBOEI7UUFDL0IsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLGFBQU4sTUFBTSxjQUFOLE1BQU0sR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3JDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQTJEOztRQUNsRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBQSxPQUFPLENBQUMsS0FBSyxtQ0FBSSxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBQSxPQUFPLENBQUMsTUFBTSxtQ0FBSSxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQzNCLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDM0IsQ0FBQztDQUNKIn0=

/***/ }),

/***/ 8492:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/material/hull.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialHull: () => (/* binding */ TgdMaterialHull)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material.js */ 6018);


const DEFAULT_COLOR = [0.111, 0.333, 0.999, 1];
class TgdMaterialHull extends _material_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterial {
    constructor(options = {}) {
        var _a, _b, _c;
        super();
        this.expansion = 0.02;
        this.uniforms = {
            uniColor: "vec4",
            uniExpansion: "float",
        };
        this.color = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4((_a = options.color) !== null && _a !== void 0 ? _a : DEFAULT_COLOR);
        this.expansion = (_b = options.expansion) !== null && _b !== void 0 ? _b : 0.02;
        this.fragmentShaderCode = [`return uniColor;`];
        this.vertexShaderCode = [];
        this.varyings = {};
        this.vertexShaderCodeForGetPosition = [
            `return pos + uniExpansion * vec4(${(_c = options.attNormal) !== null && _c !== void 0 ? _c : "NORMAL"}, 0.0);`,
        ];
    }
    setUniforms(program) {
        program.uniform4fv("uniColor", this.color);
        program.uniform1f("uniExpansion", this.expansion);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRlcmlhbC9odWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQVV4QyxNQUFNLGFBQWEsR0FBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUU1RCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxXQUFXO0lBWTVDLFlBQVksVUFBa0MsRUFBRTs7UUFDNUMsS0FBSyxFQUFFLENBQUE7UUFYSixjQUFTLEdBQUcsSUFBSSxDQUFBO1FBR1AsYUFBUSxHQUF5QztZQUM3RCxRQUFRLEVBQUUsTUFBTTtZQUNoQixZQUFZLEVBQUUsT0FBTztTQUN4QixDQUFBO1FBTUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFBLE9BQU8sQ0FBQyxLQUFLLG1DQUFJLGFBQWEsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBQSxPQUFPLENBQUMsU0FBUyxtQ0FBSSxJQUFJLENBQUE7UUFDMUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLElBQUksQ0FBQyw4QkFBOEIsR0FBRztZQUNsQyxvQ0FDSSxNQUFBLE9BQU8sQ0FBQyxTQUFTLG1DQUFJLFFBQ3pCLFNBQVM7U0FDWixDQUFBO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFtQjtRQUMzQixPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDMUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JELENBQUM7Q0FDSiJ9

/***/ }),

/***/ 8537:
/*!*******************************************!*\
  !*** ../../tgd2/lib/dist/math/transfo.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTransfo: () => (/* binding */ TgdTransfo)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ 2157);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ 6580);
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat4.js */ 5008);
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ 721);
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ 7389);




class TgdTransfo {
    constructor(source) {
        var _a, _b, _c, _d;
        // prettier-ignore
        this._matrix = new _mat4_js__WEBPACK_IMPORTED_MODULE_0__.TgdMat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        this._position = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(0, 0, 0);
        this._orientation = new _quat_js__WEBPACK_IMPORTED_MODULE_1__.TgdQuat(0, 0, 0, 1);
        this._scale = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3(1, 1, 1);
        this._distance = 0;
        this.tmpVec3 = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3();
        this._axisX = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3();
        this._axisY = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3();
        this._axisZ = new _vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3();
        this.dirty = false;
        if (!source)
            return;
        if (source instanceof TgdTransfo)
            this.from(source);
        else {
            this.distance = (_a = source.distance) !== null && _a !== void 0 ? _a : this.distance;
            this.position = (_b = source.position) !== null && _b !== void 0 ? _b : this.position;
            this.orientation = (_c = source.orientation) !== null && _c !== void 0 ? _c : this.orientation;
            this.scale = (_d = source.scale) !== null && _d !== void 0 ? _d : this.scale;
        }
        this.updateMatrix();
    }
    clone() {
        return new TgdTransfo(this);
    }
    from(transfo) {
        var _a, _b, _c, _d;
        this.position = (_a = transfo.position) !== null && _a !== void 0 ? _a : this.position;
        this.orientation = (_b = transfo.orientation) !== null && _b !== void 0 ? _b : this.orientation;
        this.scale = (_c = transfo.scale) !== null && _c !== void 0 ? _c : this.scale;
        this.distance = (_d = transfo.distance) !== null && _d !== void 0 ? _d : this.distance;
        this.updateMatrix();
        return this;
    }
    fromMatrix(mat) {
        this.matrix.from(mat);
        this.dirty = false;
        return this;
    }
    get matrix() {
        this.updateIfNeeded();
        return this._matrix;
    }
    set matrix(value) {
        this._matrix.from(value);
        this.dirty = false;
    }
    get axisX() {
        this.updateIfNeeded();
        return this._axisX;
    }
    get axisY() {
        this.updateIfNeeded();
        return this._axisY;
    }
    get axisZ() {
        this.updateIfNeeded();
        return this._axisZ;
    }
    // fromZupToYup(): this {
    //     this.dirty = true
    //     this._orientation.multiply(TgdQuat.fromFace("+X+Z-Y"))
    //     return this
    // }
    updateIfNeeded() {
        if (!this.dirty)
            return;
        const m = this._matrix;
        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.fromRotationTranslationScale(m, this._orientation, this._position, this._scale);
        m.toAxisX(this._axisX);
        m.toAxisY(this._axisY);
        m.toAxisZ(this._axisZ);
        const d = this._distance;
        if (d !== 0) {
            this.tmpVec3.reset(0, 0, d).applyQuaternion(this._orientation);
            m.m03 += this.tmpVec3.x;
            m.m13 += this.tmpVec3.y;
            m.m23 += this.tmpVec3.z;
        }
        this.dirty = false;
    }
    reset() {
        this.orientation.reset();
        this.position.reset();
        this.scale.reset();
        this.dirty = true;
        return this;
    }
    get distance() {
        return this._distance;
    }
    set distance(value) {
        this._distance = value;
        this.updateMatrix();
    }
    setDistance(value) {
        this.distance = value;
        return this;
    }
    get position() {
        this.updateMatrix();
        return this._position;
    }
    set position(value) {
        this.updateMatrix();
        this._position.from(value);
    }
    setPosition(x, y, z) {
        this.updateMatrix();
        if (typeof x === "number") {
            this._position.reset(x, y, z);
        }
        else {
            this._position.reset(x[0], x[1], x[2]);
        }
        return this;
    }
    /**
     * When `this.distance` is not null, we are orbitiong around the `position`.
     * Then, the `actualPosition` is different.
     */
    get actualPosition() {
        const d = this.distance;
        if (d === 0)
            return this.position;
        return this.tmpVec3.from(this.position).addWithScale(this.axisZ, d);
    }
    get scale() {
        return this._scale;
    }
    set scale(value) {
        this.updateMatrix();
        this._scale.from(value);
    }
    setScale(x, y, z) {
        var _a;
        this.updateMatrix();
        if (typeof x === "number") {
            this._scale.reset(x, y !== null && y !== void 0 ? y : x, (_a = z !== null && z !== void 0 ? z : y) !== null && _a !== void 0 ? _a : x);
        }
        else {
            this._scale.reset(x[0], x[1], x[2]);
        }
        return this;
    }
    get orientation() {
        this.updateMatrix();
        return this._orientation;
    }
    set orientation(quat) {
        this._orientation.from(quat);
        this.updateMatrix();
    }
    setOrientation(x, y, z, w) {
        if (typeof x === "number") {
            this._orientation.reset(x, y, z, w);
        }
        else {
            this._orientation.reset(x[0], x[1], x[2], x[3]);
        }
        this.updateMatrix();
        return this;
    }
    /**
     * Reset the orientation by applying an Euler rotation
     * based on angles expressed in __degrees__.
     */
    setEulerRotation(degreesAroundX, degreesAroundY, degreesAroundZ) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.fromEuler(this._orientation, degreesAroundX, degreesAroundY, degreesAroundZ);
        this.updateMatrix();
        return this;
    }
    orbitAroundX(angleInRadians) {
        this._orientation.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3.X, angleInRadians);
        this.updateMatrix();
        return this;
    }
    orbitAroundY(angleInRadians) {
        this._orientation.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3.Y, angleInRadians);
        this.updateMatrix();
        return this;
    }
    orbitAroundZ(angleInRadians) {
        this._orientation.rotateAround(_vec3_js__WEBPACK_IMPORTED_MODULE_2__.TgdVec3.Z, angleInRadians);
        this.updateMatrix();
        return this;
    }
    moveAlongAxes(dx, dy, dz) {
        this.position
            .addWithScale(this.axisX, dx)
            .addWithScale(this.axisY, dy)
            .addWithScale(this.axisZ, dz);
        this.updateMatrix();
        return this;
    }
    debug(caption = "Transfo") {
        console.log(caption);
        console.log("Distance:", this.distance);
        this.orientation.debug("Orientation");
        this.scale.debug("Scale");
        this.position.debug("Position");
        this.matrix.debug("Matrix");
    }
    updateMatrix() {
        this.dirty = true;
    }
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 8658:
/*!**********************************************!*\
  !*** ../../tgd2/lib/dist/context/context.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdContext: () => (/* binding */ TgdContext)
/* harmony export */ });
/* harmony import */ var _camera_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../camera/index.js */ 7601);
/* harmony import */ var _input_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../input/index.js */ 1986);
/* harmony import */ var _painter_group_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../painter/group.js */ 814);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ 3291);
/* harmony import */ var _animation_animation_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./animation/animation-manager.js */ 6120);
/* harmony import */ var _event_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../event/index.js */ 5018);






/**
 * This class gives you a [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) for a given canvas,
 * through its public readonly attribute `gl`.
 *
 * It also acts as a resource manager for most of the WebGL2 reources you need.
 *
 * @example
 * ```
 * import { TgdContext, TgdPainterClear } from "@tgd"
 *
 * export function paint(canvas: HTMLCanvasElement) {
 *     const ctx = new TgdContext(canvas)
 *     const clear = new TgdPainterClear(ctx, { color: [1, 0.667, 0, 1] })
 *     ctx.add(clear)
 *     ctx.paint()
 * }
 * ```
 */
class TgdContext {
    /**
     * @param canvas The canvas to which attach a WebGL2 context.
     * @see {@link TgdContextOptions}
     */
    constructor(canvas, options = {}) {
        var _a;
        this.canvas = canvas;
        this.options = options;
        this.eventPaint = new _event_index_js__WEBPACK_IMPORTED_MODULE_5__.TgdEvent();
        this._camera = new _camera_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdCameraPerspective({
            transfo: { distance: 15 },
            far: 100,
            near: 0.1,
            fovy: Math.PI / 8,
            zoom: 1,
        });
        this._fps = 0;
        this._aspectRatio = 1;
        this._aspectRatioInverse = 1;
        this.paintingIsOngoing = false;
        // We need to start another paiting after the current one is finished
        this.paintingIsQueued = false;
        this.isPlaying = false;
        this.requestAnimationFrame = -1;
        // Last time the context has been painted.
        this.lastTime = -1;
        // Difference between `Data.now()` and the time in `requestAnimationFrame()`.
        this.timeShift = 0;
        this.animationManager = new _animation_animation_manager_js__WEBPACK_IMPORTED_MODULE_4__.TgdManagerAnimation();
        /**
         * Trigger the painters to render the scene.
         */
        this.paint = () => {
            if (this.paintingIsOngoing) {
                this.paintingIsQueued = true;
            }
            else {
                this.paintingIsQueued = false;
                this.paintingIsOngoing = true;
                globalThis.cancelAnimationFrame(this.requestAnimationFrame);
                this.requestAnimationFrame = globalThis.requestAnimationFrame(this.actualPaint);
            }
        };
        this.actualPaint = (time) => {
            try {
                this.timeShift = time - Date.now();
                const { lastTime, gl } = this;
                if (lastTime < 0) {
                    this.lastTime = time;
                    // First frame, let's skip it to get better timing.
                    this.paint();
                    return;
                }
                const delay = time - this.lastTime;
                this._fps = Math.round(1 / delay);
                this.lastTime = time;
                this._camera.screenWidth = gl.drawingBufferWidth;
                this._camera.screenHeight = gl.drawingBufferHeight;
                this._aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;
                this._aspectRatioInverse = 1 / this._aspectRatio;
                const timeInSec = time * 1e-3;
                const delayInSec = delay * 1e-3;
                this.painters.paint(timeInSec, delayInSec);
                this.eventPaint.dispatch(this);
                if (this.paintingIsQueued ||
                    this.animationManager.paint(timeInSec) ||
                    this.isPlaying) {
                    this.paintingIsOngoing = false;
                    this.paint();
                }
            }
            catch (error) {
                console.error(error);
            }
            finally {
                this.paintingIsOngoing = false;
            }
        };
        const gl = canvas.getContext("webgl2", options);
        if (!gl)
            throw new Error("Unable to create a WebGL2 context!");
        if (options.enableTextureFloatStorage) {
            gl.getExtension("EXT_color_buffer_float");
        }
        this.implementationColorReadFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
        this.implementationColorReadType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
        this.gl = gl;
        this.observer = new ResizeObserver(() => {
            var _a;
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;
            canvas.width = width;
            canvas.height = height;
            gl.viewport(0, 0, width, height);
            this.paint();
            (_a = options.onResize) === null || _a === void 0 ? void 0 : _a.call(options, this, canvas.clientWidth, canvas.clientHeight);
        });
        this.observer.observe(canvas);
        this.inputs = new _input_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdInputs(canvas);
        if (options.camera)
            this._camera = options.camera;
        this.painters = new _painter_group_js__WEBPACK_IMPORTED_MODULE_2__.TgdPainterGroup();
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `Context#${TgdContext.incrementalId++}`;
        this.painters.name = this.name;
        // Prevent system gestures.
        canvas.style.touchAction = "none";
        this.stateReset();
    }
    get fps() {
        return this._fps;
    }
    get time() {
        return Date.now() + this.timeShift;
    }
    debugHierarchy() {
        return this.painters.debugHierarchy();
    }
    get camera() {
        return this._camera;
    }
    set camera(camera) {
        if (camera === this._camera)
            return;
        this._camera = camera;
        this.paint();
    }
    animSchedule(...animations) {
        var _a, _b;
        const result = [];
        let delay = 0;
        for (const animation of animations) {
            const duration = animation.duration + ((_a = animation.delay) !== null && _a !== void 0 ? _a : 0);
            animation.delay = delay + ((_b = animation.delay) !== null && _b !== void 0 ? _b : 0);
            delay += duration;
            result.push(this.animationManager.schedule(animation));
        }
        this.paint();
        return result;
    }
    animCancel(animation) {
        this.animationManager.cancel(animation);
    }
    get onEnter() {
        return this.painters.onEnter;
    }
    set onEnter(v) {
        this.painters.onEnter = v;
    }
    get onExit() {
        return this.painters.onExit;
    }
    set onExit(v) {
        this.painters.onExit = v;
    }
    get width() {
        return this.gl.drawingBufferWidth;
    }
    get height() {
        return this.gl.drawingBufferHeight;
    }
    get aspectRatio() {
        return this._aspectRatio;
    }
    get aspectRatioInverse() {
        return this._aspectRatioInverse;
    }
    /**
     * Is the animation playing?
     */
    get playing() {
        return this.isPlaying;
    }
    /**
     * If `playing` is true, the method `paint()` will be called
     * for every animation frame.
     * @see paint()
     */
    set playing(value) {
        if (value === this.isPlaying)
            return;
        if (value)
            this.paint();
        else {
            this.paintingIsOngoing = false;
            this.paintingIsQueued = false;
            globalThis.cancelAnimationFrame(this.requestAnimationFrame);
        }
        this.isPlaying = value;
    }
    /**
     * Start the animation.
     * You can achieve the same result with `context.playing = true`.
     *
     * @see playing
     */
    play() {
        this.playing = true;
    }
    /**
     * Pause the animation.
     * You can achieve the same result with `context.playing = false`.
     *
     * @see playing
     */
    pause() {
        this.playing = false;
    }
    /**
     * Check if `painter` already exist in the current list of painters.
     */
    has(painter) {
        return this.painters.has(painter);
    }
    /**
     * Add one or more painters.
     */
    add(...painters) {
        this.painters.add(...painters);
    }
    /**
     * Add one or more painters at the beginning of the list.
     */
    addFirst(...painters) {
        this.painters.addFirst(...painters);
    }
    /**
     * Remove one or more painters.
     * */
    remove(...painters) {
        this.painters.remove(...painters);
    }
    removeAll() {
        this.painters.removeAll();
    }
    takeSnapshot(target) {
        const context_ = target.getContext("2d");
        if (!context_)
            throw new Error("[TgdContext.takeSnapshot] We cannot get a 2D context for the target canvas! Maybe it already has another type of context.");
        const { width, height } = target;
        const canvas = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.tgdCanvasCreate)(width, height);
        const context = new TgdContext(canvas, this.options);
        this.painters.forEachChild(painter => context.add(painter));
        context.actualPaint(this.lastTime);
        context.gl.finish();
        context_.drawImage(canvas, 0, 0);
    }
    lookupWebglConstant(value) {
        const { gl } = this;
        for (const key in gl) {
            if (gl[key] === value)
                return key;
        }
        return `Unknown gl[${value}]`;
    }
    destroy() {
        this.pause();
        this.painters.delete();
        this.observer.unobserve(this.canvas);
    }
    stateReset() {
        const { gl } = this;
        const numberAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        const temporary = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, temporary);
        for (let ii = 0; ii < numberAttribs; ++ii) {
            gl.disableVertexAttribArray(ii);
            gl.vertexAttribPointer(ii, 4, gl.FLOAT, false, 0, 0);
            gl.vertexAttrib1f(ii, 0);
        }
        gl.deleteBuffer(temporary);
        const numberTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        for (let ii = 0; ii < numberTextureUnits; ++ii) {
            gl.activeTexture(gl.TEXTURE0 + ii);
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
        gl.activeTexture(gl.TEXTURE0);
        gl.useProgram(null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        gl.disable(gl.BLEND);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.DITHER);
        gl.disable(gl.SCISSOR_TEST);
        gl.blendColor(0, 0, 0, 0);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.clearColor(0, 0, 0, 0);
        gl.clearDepth(1);
        gl.clearStencil(-1);
        gl.colorMask(true, true, true, true);
        gl.cullFace(gl.BACK);
        gl.depthFunc(gl.LESS);
        gl.depthMask(true);
        gl.depthRange(0, 1);
        gl.frontFace(gl.CCW);
        gl.hint(gl.GENERATE_MIPMAP_HINT, gl.DONT_CARE);
        gl.lineWidth(1);
        gl.pixelStorei(gl.PACK_ALIGNMENT, 4);
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        gl.polygonOffset(0, 0);
        gl.sampleCoverage(1, false);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);
        gl.stencilMask(0xffffffff);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        return gl;
    }
}
TgdContext.incrementalId = 1;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 8725:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/shader/vertex.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdShaderVertex: () => (/* binding */ TgdShaderVertex)
/* harmony export */ });
/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code.js */ 3298);

/**
 * Helper to create a Vertex Shader.
 *
 * Sometime you need to add some code to a shader depending on
 * what you want to display. This can be the case when you use
 * different materials. All the 3D transformations are common,
 * but you may need more or less varyings and uniforms.
 * @see https://registry.khronos.org/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf
 */
class TgdShaderVertex {
    constructor({ precision = "highp", uniforms = {}, attributes = {}, varying = {}, functions = {}, mainCode = [], } = {}) {
        this.precision = precision;
        this.uniforms = uniforms;
        this.attributes = attributes;
        this.varying = varying;
        this.functions = functions;
        this.mainCode = mainCode;
    }
    get code() {
        return (0,_code_js__WEBPACK_IMPORTED_MODULE_0__.tgdCodeStringify)([
            `#version 300 es`,
            `precision ${this.precision} float;`,
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.uniforms, "uniform"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.attributes, "in"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandVariables)(this.varying, "out"),
            ...(0,_code_js__WEBPACK_IMPORTED_MODULE_0__.expandFunctions)(this.functions),
            "",
            `void main() {`,
            this.mainCode,
            "}",
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVydGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoYWRlci92ZXJ0ZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUlILGVBQWUsRUFDZixnQkFBZ0IsSUFBSSxlQUFlLEVBQ25DLGVBQWUsR0FDbEIsTUFBTSxRQUFRLENBQUE7QUFFZjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBUXhCLFlBQVksRUFDUixTQUFTLEdBQUcsT0FBTyxFQUNuQixRQUFRLEdBQUcsRUFBRSxFQUNiLFVBQVUsR0FBRyxFQUFFLEVBQ2YsT0FBTyxHQUFHLEVBQUUsRUFDWixTQUFTLEdBQUcsRUFBRSxFQUNkLFFBQVEsR0FBRyxFQUFFLE1BUVosRUFBRTtRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO0lBQzVCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLGVBQWUsQ0FBQztZQUNuQixpQkFBaUI7WUFDakIsYUFBYSxJQUFJLENBQUMsU0FBUyxTQUFTO1lBQ3BDLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO1lBQzVDLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO1lBQ3pDLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO1lBQ3ZDLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDbEMsRUFBRTtZQUNGLGVBQWU7WUFDZixJQUFJLENBQUMsUUFBUTtZQUNiLEdBQUc7U0FDTixDQUFDLENBQUE7SUFDTixDQUFDO0NBQ0oifQ==

/***/ }),

/***/ 8781:
/*!************************************************************!*\
  !*** ../../tgd2/lib/dist/canvas/gizmo/painter/shader.frag ***!
  \************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\n\nin vec2 varUV;\nout vec4 FragColor;\n\n\nvoid main() {\n    vec2 uv = varUV + gl_PointCoord * vec2(0.333333333, 0.5);\n    FragColor = texture(uniTexture, uv);\n    if (FragColor.w < 1.0) {\n        discard;\n    }\n}\n";

/***/ }),

/***/ 8806:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/table/table.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdTable: () => (/* binding */ TgdTable),
/* harmony export */   TgdTableFloat32: () => (/* binding */ TgdTableFloat32),
/* harmony export */   TgdTableUint8: () => (/* binding */ TgdTableUint8)
/* harmony export */ });
class TgdTable {
    static computeByteLength(cols, rows, dimensions, bytesPerElement) {
        let bytesPerRow = cols * dimensions * bytesPerElement;
        while ((bytesPerRow & 3) !== 0) {
            bytesPerRow++;
        }
        return rows * bytesPerRow;
    }
    constructor(buffer, cols, rows, dimensions, bytesPerElement) {
        this.buffer = buffer;
        this.cols = cols;
        this.rows = rows;
        this.dimensions = dimensions;
        this.bytesPerElement = bytesPerElement;
        const expectedByteLength = TgdTable.computeByteLength(cols, rows, dimensions, bytesPerElement);
        if (buffer.byteLength < expectedByteLength) {
            throw new Error(`Your data is ${buffer.byteLength} bytes long.
But for a ${cols}x${rows} table we need at least ${expectedByteLength} bytes!
Please use TgdTable.computeByteLength() to get the correct length (with all needed paddings).`);
        }
        const bytesPerVector = dimensions * bytesPerElement;
        this.bytesPerVector = bytesPerVector;
        let bytesPerRow = cols * bytesPerVector;
        let bytePadding = 0;
        while ((bytesPerRow & 3) !== 0) {
            bytePadding++;
            bytesPerRow++;
        }
        this.bytePadding = bytePadding;
        this.bytesPerRow = bytesPerRow;
        this.bytesPerElement = bytesPerElement;
        this.view = new DataView(buffer);
    }
    offset(col, row, dimension = 0) {
        const byteOffset = row * this.bytesPerRow +
            col * this.bytesPerVector +
            this.bytesPerElement * dimension;
        return byteOffset;
    }
    setFloat32(value, col, row, dimension) {
        const byteOffset = this.offset(col, row, dimension);
        this.view.setFloat32(byteOffset, value);
    }
    getFloat32(col, row, dimension) {
        const byteOffset = this.offset(col, row, dimension);
        return this.view.getFloat32(byteOffset);
    }
    setUint8(value, col, row, dimension) {
        const byteOffset = this.offset(col, row, dimension);
        this.view.setUint8(byteOffset, value);
    }
    getUint8(col, row, dimension) {
        const byteOffset = this.offset(col, row, dimension);
        return this.view.getUint8(byteOffset);
    }
}
class TgdTableUint8 {
    constructor(cols, rows, dimensions) {
        this.cols = cols;
        this.rows = rows;
        this.dimensions = dimensions;
        const byteLength = TgdTable.computeByteLength(cols, rows, dimensions, Uint8Array.BYTES_PER_ELEMENT);
        const buffer = new ArrayBuffer(byteLength);
        this.table = new TgdTable(buffer, cols, rows, dimensions, Uint8Array.BYTES_PER_ELEMENT);
    }
    get buffer() {
        return this.table.buffer;
    }
    set(value, col, row, dimension) {
        this.table.setUint8(value, col, row, dimension);
    }
    setVec(values, col, row) {
        for (const [dimension, value] of values.entries()) {
            this.table.setUint8(value, col, row, dimension);
        }
    }
    get(col, row, dimension) {
        return this.table.getUint8(col, row, dimension);
    }
}
class TgdTableFloat32 {
    constructor(cols, rows, dimensions) {
        this.cols = cols;
        this.rows = rows;
        this.dimensions = dimensions;
        const byteLength = TgdTable.computeByteLength(cols, rows, dimensions, Float32Array.BYTES_PER_ELEMENT);
        const buffer = new ArrayBuffer(byteLength);
        this.table = new TgdTable(buffer, cols, rows, dimensions, Float32Array.BYTES_PER_ELEMENT);
    }
    get buffer() {
        return this.table.buffer;
    }
    set(value, col, row, dimension) {
        this.table.setFloat32(value, col, row, dimension);
    }
    setVec(values, col, row) {
        for (const [dimension, value] of values.entries())
            this.table.setFloat32(value, col, row, dimension);
    }
    get(col, row, dimension) {
        return this.table.getFloat32(col, row, dimension);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFibGUvdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFFBQVE7SUFDVixNQUFNLENBQUMsaUJBQWlCLENBQzNCLElBQVksRUFDWixJQUFZLEVBQ1osVUFBa0IsRUFDbEIsZUFBdUI7UUFFdkIsSUFBSSxXQUFXLEdBQUcsSUFBSSxHQUFHLFVBQVUsR0FBRyxlQUFlLENBQUE7UUFDckQsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUM3QixXQUFXLEVBQUUsQ0FBQTtRQUNqQixDQUFDO1FBQ0QsT0FBTyxJQUFJLEdBQUcsV0FBVyxDQUFBO0lBQzdCLENBQUM7SUFRRCxZQUNvQixNQUFtQixFQUNuQixJQUFZLEVBQ1osSUFBWSxFQUNaLFVBQWtCLEVBQ2xCLGVBQXVCO1FBSnZCLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLG9CQUFlLEdBQWYsZUFBZSxDQUFRO1FBRXZDLE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUNqRCxJQUFJLEVBQ0osSUFBSSxFQUNKLFVBQVUsRUFDVixlQUFlLENBQ2xCLENBQUE7UUFFRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQztZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixNQUFNLENBQUMsVUFBVTtZQUNqRCxJQUFJLElBQUksSUFBSSwyQkFBMkIsa0JBQWtCOzhGQUN5QixDQUFDLENBQUE7UUFDdkYsQ0FBQztRQUNELE1BQU0sY0FBYyxHQUFHLFVBQVUsR0FBRyxlQUFlLENBQUE7UUFDbkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUE7UUFDcEMsSUFB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

/***/ }),

/***/ 8835:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/utils/action/vector.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdActionCreateVec2Interpolation: () => (/* binding */ tgdActionCreateVec2Interpolation),
/* harmony export */   tgdActionCreateVec3Interpolation: () => (/* binding */ tgdActionCreateVec3Interpolation),
/* harmony export */   tgdActionCreateVec4Interpolation: () => (/* binding */ tgdActionCreateVec4Interpolation)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ 1793);

/**
 * Create an action that will interpolate from one vector to another.
 */
function tgdActionCreateVec2Interpolation({ from, to, action, }) {
    const [fromX, fromY] = from;
    const [toX, toY] = to;
    const vec = [0, 0];
    return (alpha) => {
        vec[0] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromX, toX, alpha);
        vec[1] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromY, toY, alpha);
        action(vec);
    };
}
/**
 * Create an action that will interpolate from one vector to another.
 */
function tgdActionCreateVec3Interpolation({ from, to, action, }) {
    const [fromX, fromY, fromZ] = from;
    const [toX, toY, toZ] = to;
    const vec = [0, 0, 0];
    return (alpha) => {
        vec[0] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromX, toX, alpha);
        vec[1] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromY, toY, alpha);
        vec[2] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromZ, toZ, alpha);
        action(vec);
    };
}
/**
 * Create an action that will interpolate from one vector to another.
 */
function tgdActionCreateVec4Interpolation({ from, to, action, }) {
    const [fromX, fromY, fromZ, fromW] = from;
    const [toX, toY, toZ, toW] = to;
    const vec = [0, 0, 0, 0];
    return (alpha) => {
        vec[0] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromX, toX, alpha);
        vec[1] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromY, toY, alpha);
        vec[2] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromZ, toZ, alpha);
        vec[3] = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(fromW, toW, alpha);
        action(vec);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2FjdGlvbi92ZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUVwQzs7R0FFRztBQUNILE1BQU0sVUFBVSxnQ0FBZ0MsQ0FBQyxFQUM3QyxJQUFJLEVBQ0osRUFBRSxFQUNGLE1BQU0sR0FLVDtJQUNHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFBO0lBQzNCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLE1BQU0sR0FBRyxHQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNoQyxPQUFPLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZixDQUFDLENBQUE7QUFDTCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0NBQWdDLENBQUMsRUFDN0MsSUFBSSxFQUNKLEVBQUUsRUFDRixNQUFNLEdBS1Q7SUFDRyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUE7SUFDbEMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzFCLE1BQU0sR0FBRyxHQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbkMsT0FBTyxDQUFDLEtBQWEsRUFBRSxFQUFFO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN0QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDdEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUMsQ0FBQTtBQUNMLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxnQ0FBZ0MsQ0FBQyxFQUM3QyxJQUFJLEVBQ0osRUFBRSxFQUNGLE1BQU0sR0FLVDtJQUNHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUE7SUFDekMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUMvQixNQUFNLEdBQUcsR0FBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN0QyxPQUFPLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN0QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDdEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNmLENBQUMsQ0FBQTtBQUNMLENBQUMifQ==

/***/ }),

/***/ 8861:
/*!************************************************!*\
  !*** ../../tgd2/lib/dist/utils/state/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglBlendExec: () => (/* reexport safe */ _blend_js__WEBPACK_IMPORTED_MODULE_0__.webglBlendExec),
/* harmony export */   webglBlendGet: () => (/* reexport safe */ _blend_js__WEBPACK_IMPORTED_MODULE_0__.webglBlendGet),
/* harmony export */   webglBlendSet: () => (/* reexport safe */ _blend_js__WEBPACK_IMPORTED_MODULE_0__.webglBlendSet),
/* harmony export */   webglCullExec: () => (/* reexport safe */ _cull_js__WEBPACK_IMPORTED_MODULE_1__.webglCullExec),
/* harmony export */   webglCullGet: () => (/* reexport safe */ _cull_js__WEBPACK_IMPORTED_MODULE_1__.webglCullGet),
/* harmony export */   webglCullSet: () => (/* reexport safe */ _cull_js__WEBPACK_IMPORTED_MODULE_1__.webglCullSet),
/* harmony export */   webglDebugBlend: () => (/* reexport safe */ _blend_js__WEBPACK_IMPORTED_MODULE_0__.webglDebugBlend),
/* harmony export */   webglDebugCull: () => (/* reexport safe */ _cull_js__WEBPACK_IMPORTED_MODULE_1__.webglDebugCull),
/* harmony export */   webglDebugDepth: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_2__.webglDebugDepth),
/* harmony export */   webglDebugStencil: () => (/* reexport safe */ _stencil_js__WEBPACK_IMPORTED_MODULE_3__.webglDebugStencil),
/* harmony export */   webglDepthExec: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_2__.webglDepthExec),
/* harmony export */   webglDepthGet: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_2__.webglDepthGet),
/* harmony export */   webglDepthSet: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_2__.webglDepthSet),
/* harmony export */   webglPresetBlend: () => (/* reexport safe */ _blend_js__WEBPACK_IMPORTED_MODULE_0__.webglPresetBlend),
/* harmony export */   webglPresetCull: () => (/* reexport safe */ _cull_js__WEBPACK_IMPORTED_MODULE_1__.webglPresetCull),
/* harmony export */   webglPresetDepth: () => (/* reexport safe */ _depth_js__WEBPACK_IMPORTED_MODULE_2__.webglPresetDepth),
/* harmony export */   webglPresetStencil: () => (/* reexport safe */ _stencil_js__WEBPACK_IMPORTED_MODULE_3__.webglPresetStencil),
/* harmony export */   webglStencilExec: () => (/* reexport safe */ _stencil_js__WEBPACK_IMPORTED_MODULE_3__.webglStencilExec),
/* harmony export */   webglStencilGet: () => (/* reexport safe */ _stencil_js__WEBPACK_IMPORTED_MODULE_3__.webglStencilGet),
/* harmony export */   webglStencilSet: () => (/* reexport safe */ _stencil_js__WEBPACK_IMPORTED_MODULE_3__.webglStencilSet)
/* harmony export */ });
/* harmony import */ var _blend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blend.js */ 5950);
/* harmony import */ var _cull_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cull.js */ 817);
/* harmony import */ var _depth_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./depth.js */ 2188);
/* harmony import */ var _stencil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stencil.js */ 4389);




//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxRQUFRLENBQUE7QUFDdEIsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxXQUFXLENBQUEifQ==

/***/ }),

/***/ 8918:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/painter/state/state.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdPainterState: () => (/* binding */ TgdPainterState)
/* harmony export */ });
/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../group.js */ 814);
/* harmony import */ var _utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../utils/state/index.js */ 8861);
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../utils/index.js */ 3291);



class TgdPainterState extends _group_js__WEBPACK_IMPORTED_MODULE_0__.TgdPainterGroup {
    static do(options, action) {
        const self = {
            color: {
                red: true,
                green: true,
                blue: true,
                alpha: true,
            },
        };
        const { onEnterActions, onExitActions } = prepareActions(self, options.gl, options);
        for (const action of onEnterActions)
            action();
        action();
        for (const action of onExitActions)
            action();
    }
    static debug(gl) {
        const depth = (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglDepthGet)(gl);
        console.log("Depth:", {
            enabled: depth.enabled,
            func: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.webglLookup)(depth.func),
            mask: depth.mask,
            range: [depth.rangeMin, depth.rangeMax],
        });
        console.log("Cull:", (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglCullGet)(gl));
        console.log("Blend:", (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglBlendGet)(gl));
    }
    constructor(context, options = {}) {
        var _a;
        super(options.children);
        this.color = {
            red: true,
            green: true,
            blue: true,
            alpha: true,
        };
        const { gl } = context;
        const { onEnterActions, onExitActions } = prepareActions(this, gl, options);
        this.onEnter = (time, delay) => {
            var _a;
            (_a = options.onEnter) === null || _a === void 0 ? void 0 : _a.call(options, time, delay);
            for (const f of onEnterActions)
                f();
        };
        this.onExit = (time, delay) => {
            var _a;
            for (const f of onExitActions)
                f();
            (_a = options.onExit) === null || _a === void 0 ? void 0 : _a.call(options, time, delay);
        };
        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : `State/${this.name}`;
    }
}
function figureOutColorMask(color) {
    if (color === true)
        return [true, true, true, true];
    if (color === false)
        return [false, false, false, false];
    return color;
}
function prepareActions(self, gl, options) {
    const { color, blend, depth, cull, stencil } = options;
    const onEnterActions = [];
    const onExitActions = [];
    const colorMask = figureOutColorMask(color);
    const [red, green, blue, alpha] = colorMask !== null && colorMask !== void 0 ? colorMask : [true, true, true, true];
    self.color.red = red;
    self.color.green = green;
    self.color.blue = blue;
    self.color.alpha = alpha;
    if (Array.isArray(colorMask)) {
        let savedColorMask;
        onEnterActions.push(() => {
            savedColorMask = gl.getParameter(gl.COLOR_WRITEMASK);
            gl.colorMask(self.color.red, self.color.green, self.color.blue, self.color.alpha);
        });
        onExitActions.push(() => {
            gl.colorMask(...(savedColorMask !== null && savedColorMask !== void 0 ? savedColorMask : [true, true, true, true]));
        });
    }
    if (blend) {
        let savedBlend;
        onEnterActions.push(() => {
            savedBlend = (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglBlendGet)(gl);
            (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglBlendSet)(gl, blend);
        });
        onExitActions.push(() => {
            if (savedBlend)
                (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglBlendSet)(gl, savedBlend);
        });
    }
    if (depth) {
        let savedDepth;
        onEnterActions.push(() => {
            savedDepth = (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglDepthGet)(gl);
            (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglDepthSet)(gl, depth);
        });
        onExitActions.push(() => {
            if (savedDepth)
                (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglDepthSet)(gl, savedDepth);
        });
    }
    if (cull) {
        let savedCull;
        onEnterActions.push(() => {
            savedCull = (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglCullGet)(gl);
            (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglCullSet)(gl, cull);
        });
        onExitActions.push(() => {
            if (savedCull)
                (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglCullSet)(gl, savedCull);
        });
    }
    if (stencil) {
        let savedStencil;
        onEnterActions.push(() => {
            savedStencil = (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglStencilGet)(gl);
            (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglStencilSet)(gl, stencil);
        });
        onExitActions.push(() => {
            if (savedStencil)
                (0,_utils_state_index_js__WEBPACK_IMPORTED_MODULE_1__.webglStencilSet)(gl, savedStencil);
        });
    }
    return { onEnterActions, onExitActions };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFpbnRlci9zdGF0ZS9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRTFDLE9BQU8sRUFDSCxhQUFhLEVBRWIsYUFBYSxFQUNiLGFBQWEsRUFFYixhQUFhLEVBQ2IsWUFBWSxFQUVaLFlBQVksRUFFWixlQUFlLEVBQ2YsZUFBZSxHQUNsQixNQUFNLGtCQUFrQixDQUFBO0FBRXpCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFvQnhDLE1BQU0sT0FBTyxlQUFnQixTQUFRLGVBQWU7SUFDekMsTUFBTSxDQUFDLEVBQUUsQ0FDWixPQUtDLEVBQ0QsTUFBa0I7UUFFbEIsTUFBTSxJQUFJLEdBQUc7WUFDVCxLQUFLLEVBQUU7Z0JBQ0gsR0FBRyxFQUFFLElBQUk7Z0JBQ1QsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsS0FBSyxFQUFFLElBQUk7YUFDZDtTQUNKLENBQUE7UUFDRCxNQUFNLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxHQUFHLGNBQWMsQ0FDcEQsSUFBSSxFQUNKLE9BQU8sQ0FBQyxFQUFFLEVBQ1YsT0FBTyxDQUNWLENBQUE7UUFDRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGNBQWM7WUFBRSxNQUFNLEVBQUUsQ0FBQTtRQUM3QyxNQUFNLEVBQUUsQ0FBQTtRQUNSLEtBQUssTUFBTSxNQUFNLElBQUksYUFBYTtZQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ2hELENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQTBCO1FBQzFDLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFD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

/***/ }),

/***/ 8942:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/utils/webgl.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglElementTypeFromTypedArray: () => (/* binding */ webglElementTypeFromTypedArray),
/* harmony export */   webglLookup: () => (/* binding */ webglLookup),
/* harmony export */   webglTypedArrayFromBufferSource: () => (/* binding */ webglTypedArrayFromBufferSource)
/* harmony export */ });
/**
 * drawElements() can be used with 8, 16 or 32 unsinged ints arrays.
 * But the function does not know what type was passed as argument.
 * You need to specify the type: UNSIGNED_BYTE, UNSIGNED_SHORT or
 * UNSIGNED_INT.
 *
 * This helper function gives you the type of the array passed as argument.
 */
function webglElementTypeFromTypedArray(typedArray) {
    if (typedArray instanceof Uint8Array)
        return WebGL2RenderingContext.UNSIGNED_BYTE;
    if (typedArray instanceof Uint16Array)
        return WebGL2RenderingContext.UNSIGNED_SHORT;
    if (typedArray instanceof Uint32Array)
        return WebGL2RenderingContext.UNSIGNED_INT;
    throw new Error("[webglElementTypeFromDataView] drawElements() and drawElementsInstanced() can only be fed with Uint8Array, Uint16Array or Uint32Array!");
}
function webglTypedArrayFromBufferSource(bufferSource, type) {
    const buffer = bufferSource instanceof ArrayBuffer ? bufferSource : bufferSource.buffer;
    switch (type) {
        case 5120: // BYTE
            return new Int8Array(buffer);
        case 5121: // UNSIGNED_BYTE
            return new Uint8Array(buffer);
        case 5122: // SHORT
            return new Int16Array(buffer);
        case 5123: // UNSIGNED_SHORT
            return new Uint16Array(buffer);
        case 5125: // UNSIGNED_INT
            return new Uint32Array(buffer);
        case 5126: // FLOAT
            return new Float32Array(buffer);
        default:
            throw new Error(`Don't know how to create a TypedArray for type "${webglLookup(type)}"!`);
    }
}
function webglLookup(type) {
    if (gl) {
        for (const key in gl) {
            const value = gl[key];
            if (value === type)
                return key;
        }
    }
    return `${type}`;
}
const canvas = document.createElement("canvas");
const gl = canvas.getContext("webgl2");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvd2ViZ2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSw4QkFBOEIsQ0FDMUMsVUFBbUM7SUFFbkMsSUFBSSxVQUFVLFlBQVksVUFBVTtRQUNoQyxPQUFPLHNCQUFzQixDQUFDLGFBQWEsQ0FBQTtJQUMvQyxJQUFJLFVBQVUsWUFBWSxXQUFXO1FBQ2pDLE9BQU8sc0JBQXNCLENBQUMsY0FBYyxDQUFBO0lBQ2hELElBQUksVUFBVSxZQUFZLFdBQVc7UUFDakMsT0FBTyxzQkFBc0IsQ0FBQyxZQUFZLENBQUE7SUFFOUMsTUFBTSxJQUFJLEtBQUssQ0FDWCx3SUFBd0ksQ0FDM0ksQ0FBQTtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsK0JBQStCLENBQzNDLFlBQTBCLEVBQzFCLElBQVk7SUFFWixNQUFNLE1BQU0sR0FDUixZQUFZLFlBQVksV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUE7SUFDNUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNYLEtBQUssSUFBSSxFQUFFLE9BQU87WUFDZCxPQUFPLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2hDLEtBQUssSUFBSSxFQUFFLGdCQUFnQjtZQUN2QixPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLEtBQUssSUFBSSxFQUFFLFFBQVE7WUFDZixPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLEtBQUssSUFBSSxFQUFFLGlCQUFpQjtZQUN4QixPQUFPLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLEtBQUssSUFBSSxFQUFFLGVBQWU7WUFDdEIsT0FBTyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNsQyxLQUFLLElBQUksRUFBRSxRQUFRO1lBQ2YsT0FBTyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNuQztZQUNJLE1BQU0sSUFBSSxLQUFLLENBQ1gsbURBQW1ELFdBQVcsQ0FDMUQsSUFBSSxDQUNQLElBQUksQ0FDUixDQUFBO0lBQ1QsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQVk7SUFDcEMsSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUNMLEtBQUssTUFBTSxHQUFHLElBQUksRUFBRSxFQUFFLENBQUM7WUFDbkIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQW1DLENBQUMsQ0FBQTtZQUNyRCxJQUFJLEtBQUssS0FBSyxJQUFJO2dCQUFFLE9BQU8sR0FBbUMsQ0FBQTtRQUNsRSxDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU8sR0FBRyxJQUFJLEVBQWtDLENBQUE7QUFDcEQsQ0FBQztBQUVELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDL0MsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQSJ9

/***/ }),

/***/ 9013:
/*!**************************************************************!*\
  !*** ../../tgd2/lib/dist/painter/debug/stencil/stencil.frag ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform vec4 uniColor;\nout vec4 FragColor;\n\nvoid main() {\n    FragColor = uniColor;\n}";

/***/ }),

/***/ 9051:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/types/input-pointer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbnB1dC1wb2ludGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==

/***/ }),

/***/ 9115:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/filter/blur.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilterBlur: () => (/* binding */ TgdFilterBlur)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/index.js */ 3291);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/index.js */ 6088);
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter.js */ 3672);



const DEFAULT_DIRECTION = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec2(1, 0);
class TgdFilterBlur extends _filter_js__WEBPACK_IMPORTED_MODULE_2__.TgdFilter {
    constructor(options = {}) {
        const { size = 4, strength = 1 } = options;
        const direction = figureOutDirection(options.direction);
        const length = direction.size;
        const invLength = length > 0 ? 1 / length : 1;
        const sx = direction.x * invLength;
        const sy = direction.y * invLength;
        const lines = ["vec2 s;", "float f;"];
        let total = 0;
        for (let s = 0; s < size - 1; s += 2) {
            const weight = size - s;
            total += weight;
            lines.push(`s = ${s + 1.4} * dir;`, `f = ${weight.toFixed(1)};`, `color += f * texture(uniTexture, varUV + s);`, `color += f * texture(uniTexture, varUV - s);`);
        }
        if (size & 1) {
            // Size is odd (not even).
            lines.push(`s = ${size} * dir;`, `color += texture(uniTexture, varUV + s);`, `color += texture(uniTexture, varUV - s);`);
            total++;
        }
        total = total + total + size + 1;
        super({
            fragmentShaderCode: [
                "vec2 dir = uniStrength * vec2(",
                [
                    `uniInverseWidth * ${sx.toFixed(9)},`,
                    `uniInverseHeight * ${sy.toFixed(9)}`,
                ],
                ");",
                `vec4 color = ${(size + 1).toFixed(1)} * texture(uniTexture, varUV);`,
                ...lines,
                `FragColor = color * ${(1 / total).toFixed(9)};`,
            ],
            uniforms: {
                uniStrength: "float",
                uniInverseWidth: "float",
                uniInverseHeight: "float",
            },
            setUniforms: ({ program }) => {
                program.uniform1f("uniInverseWidth", 1 / program.gl.drawingBufferWidth);
                program.uniform1f("uniInverseHeight", 1 / program.gl.drawingBufferHeight);
                program.uniform1f("uniStrength", this.strength);
            },
        });
        this.strength = strength;
    }
}
function figureOutDirection(direction) {
    if (direction === undefined)
        return DEFAULT_DIRECTION;
    if (typeof direction === "number") {
        const ang = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcDegToRad)(direction);
        return new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec2(Math.cos(ang), Math.sin(ang));
    }
    return direction;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWx0ZXIvYmx1ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDakMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQWFwQyxNQUFNLGlCQUFpQixHQUFzQixJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFOUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxTQUFTO0lBR3hDLFlBQVksVUFBeUMsRUFBRTtRQUNuRCxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFBO1FBQzFDLE1BQU0sU0FBUyxHQUFZLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNoRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFBO1FBQzdCLE1BQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3QyxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQTtRQUNsQyxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQTtRQUNsQyxNQUFNLEtBQUssR0FBYSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUMvQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtZQUN2QixLQUFLLElBQUksTUFBTSxDQUFBO1lBQ2YsS0FBSyxDQUFDLElBQUksQ0FDTixPQUFPLENBQUMsR0FBRyxHQUFHLFNBQVMsRUFDdkIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQzNCLDhDQUE4QyxFQUM5Qyw4Q0FBOEMsQ0FDakQsQ0FBQTtRQUNMLENBQUM7UUFDRCxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNYLDBCQUEwQjtZQUMxQixLQUFLLENBQUMsSUFBSSxDQUNOLE9BQU8sSUFBSSxTQUFTLEVBQ3BCLDBDQUEwQyxFQUMxQywwQ0FBMEMsQ0FDN0MsQ0FBQTtZQUNELEtBQUssRUFBRSxDQUFBO1FBQ1gsQ0FBQztRQUNELEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUE7UUFDaEMsS0FBSyxDQUFDO1lBQ0Ysa0JBQWtCLEVBQUU7Z0JBQ2hCLGdDQUFnQztnQkFDaEM7b0JBQ0kscUJBQXFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUc7b0JBQ3JDLHNCQUFzQixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2lCQUN4QztnQkFDRCxJQUFJO2dCQUNKLGdCQUFnQixDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQzlCLENBQUMsQ0FDSixnQ0FBZ0M7Z0JBQ2pDLEdBQUcsS0FBSztnQkFDUix1QkFBdUIsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHO2FBQ25EO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLFdBQVcsRUFBRSxPQUFPO2dCQUNwQixlQUFlLEVBQUUsT0FBTztnQkFDeEIsZ0JBQWdCLEVBQUUsT0FBTzthQUM1QjtZQUNELFdBQVcsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtnQkFDekIsT0FBTyxDQUFDLFNBQVMsQ0FDYixpQkFBaUIsRUFDakIsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQ3BDLENBQUE7Z0JBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FDYixrQkFBa0IsRUFDbEIsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQ3JDLENBQUE7Z0JBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ25ELENBQUM7U0FDSixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtJQUM1QixDQUFDO0NBQ0o7QUFFRCxTQUFTLGtCQUFrQixDQUN2QixTQUFpRDtJQUVqRCxJQUFJLFNBQVMsS0FBSyxTQUFTO1FBQUUsT0FBTyxpQkFBaUIsQ0FBQTtJQUVyRCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN0QyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQTtBQUNwQixDQUFDIn0=

/***/ }),

/***/ 9138:
/*!******************************************************!*\
  !*** ../../tgd2/lib/dist/webgl/texture/texture2d.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webglTextureCreate: () => (/* binding */ webglTextureCreate),
/* harmony export */   webglTextureCreate2DFromArray: () => (/* binding */ webglTextureCreate2DFromArray),
/* harmony export */   webglTextureParametersSet: () => (/* binding */ webglTextureParametersSet)
/* harmony export */ });
function webglTextureCreate(gl) {
    const tex = gl.createTexture();
    if (!tex)
        throw new Error("Unable to create a WebGL Texture!");
    return tex;
}
/**
 * This is applied to the last binded texture.
 */
function webglTextureParametersSet(gl, { wrapS, wrapT, wrapR, minFilter, magFilter }) {
    if (wrapS)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);
    if (wrapT)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);
    if (wrapR)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_R, gl[wrapR]);
    if (minFilter)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[minFilter]);
    if (magFilter)
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[magFilter]);
}
function webglTextureCreate2DFromArray(gl, data, options) {
    var _a;
    const texture = webglTextureCreate(gl);
    gl.activeTexture(gl.TEXTURE0 + ((_a = options.unit) !== null && _a !== void 0 ? _a : 0));
    gl.bindTexture(gl.TEXTURE_2D, texture);
    if (options.flipY)
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);
    webglTextureParametersSet(gl, options);
    const { level = 0, internalFormat = "RGBA8", width, height, format = "RGBA", type = "UNSIGNED_BYTE", offset = 0, } = options;
    gl.texImage2D(gl.TEXTURE_2D, level, gl[internalFormat], width, height, 0, gl[format], gl[type], data, offset);
    return texture;
}
// @TODO: webglTextureCreateFromImage and webglTextureCreateFomBuffer
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZTJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3dlYmdsL3RleHR1cmUvdGV4dHVyZTJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVDQSxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBMEI7SUFDekQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQzlCLElBQUksQ0FBQyxHQUFHO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO0lBRTlELE9BQU8sR0FBRyxDQUFBO0FBQ2QsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUNyQyxFQUEwQixFQUMxQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQTBCO0lBRXJFLElBQUksS0FBSztRQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLElBQUksS0FBSztRQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLElBQUksS0FBSztRQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLElBQUksU0FBUztRQUNULEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDekUsSUFBSSxTQUFTO1FBQ1QsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtBQUM3RSxDQUFDO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUN6QyxFQUEwQixFQUMxQixJQVFrQixFQUNsQixPQUE2Qzs7SUFFN0MsTUFBTSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDdEMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsTUFBQSxPQUFPLENBQUMsSUFBSSxtQ0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ25ELEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN0QyxJQUFJLE9BQU8sQ0FBQyxLQUFLO1FBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hFLHlCQUF5QixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN0QyxNQUFNLEVBQ0YsS0FBSyxHQUFHLENBQUMsRUFDVCxjQUFjLEdBQUcsT0FBTyxFQUN4QixLQUFLLEVBQ0wsTUFBTSxFQUNOLE1BQU0sR0FBRyxNQUFNLEVBQ2YsSUFBSSxHQUFHLGVBQWUsRUFDdEIsTUFBTSxHQUFHLENBQUMsR0FDYixHQUFHLE9BQU8sQ0FBQTtJQUNYLEVBQUUsQ0FBQyxVQUFVLENBQ1QsRUFBRSxDQUFDLFVBQVUsRUFDYixLQUFLLEVBQ0wsRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUNsQixLQUFLLEVBQ0wsTUFBTSxFQUNOLENBQUMsRUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNSLElBQUksRUFDSixNQUFNLENBQ1QsQ0FBQTtJQUNELE9BQU8sT0FBTyxDQUFBO0FBQ2xCLENBQUM7QUFFRCxxRUFBcUUifQ==

/***/ }),

/***/ 9165:
/*!*****************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/index.css ***!
  \*****************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ 1354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ 6314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  width: 100%;
  height: 100%;
  background: #007;
  font-size: 1.2vmax;
  overflow: hidden;
  font-family: "Josefin Sans", josefin-sans, sans-serif;
}

body > * {
  vertical-align: top;
}

body * {
  box-sizing: border-box;
}

canvas {
  display: inline-block;
}

#CANVAS {
  background: transparent;
  position: absolute;
  left: 50%;
  top: 50%;
  width: 132vh;
  height: 99vh;
  margin: -49.5vh -66vh;
}
@media (orientation: portrait) {
  #CANVAS {
    width: 128vw;
    height: 96vw;
    transform-origin: center;
    transform: rotate(90deg);
    margin: -48vw -64vw;
  }
}

#HEADER {
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  width: 100%;
  height: 2rem;
  line-height: 2rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.3);
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0;
}

#HEADER > * {
  text-align: center;
}

#HEADER > div {
  cursor: pointer;
  padding: 0 1rem;
}

#HEADER > div:hover {
  background: rgba(255, 128, 0, 0.3);
}

#HELP {
  position: absolute;
  left: 0;
  top: 2rem;
  right: 0;
  bottom: 0;
  width: 100%;
  overflow: auto;
  padding: 0 0.5rem;
}

#HELP pre {
  font-family: monospace;
  padding: 0.5rem;
  background: #eee;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
}

#HELP code {
  font-family: monospace;
}

#HELP blockquote {
    margin: .5em;
    box-shadow: -.25em 0 #f90;
    background: linear-gradient(to right,#f906, #f900);
    padding: 1em;
    font-variant: small-caps;
}

#HELP blockquote > p {
    margin: 0;
}

#MANUAL,
#EDITOR {
  box-sizing: border-box;
  margin: 0;
  padding: 1rem;
  position: absolute;
  top: 0;
  bottom: 0;
  width: 50vw;
  height: 100%;
  background-color: #fffe;
  transition: transform 0.2s;
}

#MANUAL {
  left: 0;
  transform: translateX(-100%);
}

#EDITOR {
  right: 0;
  transform: translateX(100%);
  box-shadow: -12px 0 24px rgba(0, 0, 0, 0.3);
}

body.show #MANUAL,
body.show #EDITOR {
  transition: transform 0.2s;
  transform: translateX(0);
}

#CODE {
  position: absolute;
  left: 1vw;
  top: 1vh;
  right: 1vw;
  bottom: 1vh;
  width: 48vw;
  height: 98vh;
  font-size: 1vmax;
  font-family: monospace;
  background: transparent;
  border: none;
}

div.tfw-message {
  position: fixed;
  left: 0;
  top: 0;
  width: 50vw;
  margin: 0;
}
`, "",{"version":3,"sources":["webpack://./src/index.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;EAChB,qDAAqD;AACvD;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,YAAY;EACZ,YAAY;EACZ,qBAAqB;AACvB;AACA;EACE;IACE,YAAY;IACZ,YAAY;IACZ,wBAAwB;IACxB,wBAAwB;IACxB,mBAAmB;EACrB;AACF;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,QAAQ;EACR,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,2CAA2C;EAC3C,aAAa;EACb,kCAAkC;EAClC,MAAM;AACR;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,SAAS;EACT,QAAQ;EACR,SAAS;EACT,WAAW;EACX,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,gBAAgB;EAChB,0CAA0C;AAC5C;;AAEA;EACE,sBAAsB;AACxB;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,kDAAkD;IAClD,YAAY;IACZ,wBAAwB;AAC5B;;AAEA;IACI,SAAS;AACb;;AAEA;;EAEE,sBAAsB;EACtB,SAAS;EACT,aAAa;EACb,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,OAAO;EACP,4BAA4B;AAC9B;;AAEA;EACE,QAAQ;EACR,2BAA2B;EAC3B,2CAA2C;AAC7C;;AAEA;;EAEE,0BAA0B;EAC1B,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,UAAU;EACV,WAAW;EACX,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,sBAAsB;EACtB,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,OAAO;EACP,MAAM;EACN,WAAW;EACX,SAAS;AACX","sourcesContent":["body {\n  width: 100%;\n  height: 100%;\n  background: #007;\n  font-size: 1.2vmax;\n  overflow: hidden;\n  font-family: \"Josefin Sans\", josefin-sans, sans-serif;\n}\n\nbody > * {\n  vertical-align: top;\n}\n\nbody * {\n  box-sizing: border-box;\n}\n\ncanvas {\n  display: inline-block;\n}\n\n#CANVAS {\n  background: transparent;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 132vh;\n  height: 99vh;\n  margin: -49.5vh -66vh;\n}\n@media (orientation: portrait) {\n  #CANVAS {\n    width: 128vw;\n    height: 96vw;\n    transform-origin: center;\n    transform: rotate(90deg);\n    margin: -48vw -64vw;\n  }\n}\n\n#HEADER {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  width: 100%;\n  height: 2rem;\n  line-height: 2rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.3);\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 0;\n}\n\n#HEADER > * {\n  text-align: center;\n}\n\n#HEADER > div {\n  cursor: pointer;\n  padding: 0 1rem;\n}\n\n#HEADER > div:hover {\n  background: rgba(255, 128, 0, 0.3);\n}\n\n#HELP {\n  position: absolute;\n  left: 0;\n  top: 2rem;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  overflow: auto;\n  padding: 0 0.5rem;\n}\n\n#HELP pre {\n  font-family: monospace;\n  padding: 0.5rem;\n  background: #eee;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);\n}\n\n#HELP code {\n  font-family: monospace;\n}\n\n#HELP blockquote {\n    margin: .5em;\n    box-shadow: -.25em 0 #f90;\n    background: linear-gradient(to right,#f906, #f900);\n    padding: 1em;\n    font-variant: small-caps;\n}\n\n#HELP blockquote > p {\n    margin: 0;\n}\n\n#MANUAL,\n#EDITOR {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 1rem;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 50vw;\n  height: 100%;\n  background-color: #fffe;\n  transition: transform 0.2s;\n}\n\n#MANUAL {\n  left: 0;\n  transform: translateX(-100%);\n}\n\n#EDITOR {\n  right: 0;\n  transform: translateX(100%);\n  box-shadow: -12px 0 24px rgba(0, 0, 0, 0.3);\n}\n\nbody.show #MANUAL,\nbody.show #EDITOR {\n  transition: transform 0.2s;\n  transform: translateX(0);\n}\n\n#CODE {\n  position: absolute;\n  left: 1vw;\n  top: 1vh;\n  right: 1vw;\n  bottom: 1vh;\n  width: 48vw;\n  height: 98vh;\n  font-size: 1vmax;\n  font-family: monospace;\n  background: transparent;\n  border: none;\n}\n\ndiv.tfw-message {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 50vw;\n  margin: 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 9179:
/*!****************************************************!*\
  !*** ../../tgd2/lib/dist/parser/mesh/wavefront.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdParserMeshWavefront: () => (/* binding */ TgdParserMeshWavefront)
/* harmony export */ });
/* harmony import */ var _for_each_line_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../for-each-line.js */ 9);
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _geometry_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../geometry/index.js */ 7250);



/**
 * This [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file)
 * parser only finds the object name,
 * the vertices coords, the normals and the UVs.
 *
 * - There can be only one object per file.
 * - Normals and UVs are optional.
 * - All faces **must** be triangles.
 *
 * To export an obj file from blender, please use the following options:
 *
 * - Forward axis: **Y**
 * - Up axis: **Z**
 * - Object / Apply Modifiers: **True**
 * - Geometry / UV Coordinates: **True**
 * - Geometry / Normals: **True**
 * - Geometry / Triangulated Mesh: **True**
 */
class TgdParserMeshWavefront {
    constructor(content) {
        this.name = "Mesh";
        this.attPosition = [];
        this.attNormal = [];
        this.attUV = [];
        /**
         * Three consecutive elements define a triangle.
         * An element is a index on the attributes array.
         */
        this.elements = [];
        this.elementIndex = 0;
        /**
         * The key is `${pointIndex}/${normalIndex}/${uvIndex}`.
         * The value is the index of the vertex (used in `elements`).
         */
        this.mapVertices = new Map();
        /**
         * A point ins not a vertex, but just a position in space
         * that can be used by several different vertices.
         * That's the case for faces sharing a vertex but having different
         * normals. A vertex is made of a position, a normal and an uv.
         */
        this.points = [];
        /**
         * A item of this array can be shared by different vertices.
         */
        this.normals = [];
        /**
         * List of vertices per face.
         * The vertices are represented by the index of the attribute.
         */
        this.verticesPerTriangle = [];
        /**
         * Here "normal" is an index on `this.normals` array.
         */
        this.normalPerTriangle = [];
        /**
         * The vertices are indexed per attribute.
         * The triangles are represented by indexes from `this.normalPerTriangle`.
         */
        this.trianglesPerVertex = [];
        /**
         * A item of this array can be shared by different vertices.
         */
        this.uvs = [];
        this.onObject = (name) => {
            this.name = name;
        };
        this.onVertex = (x, y, z) => {
            this.points.push([x, y, z]);
        };
        this.onNormal = (x, y, z) => {
            this.normals.push([x, y, z]);
        };
        this.onTexture = (u, v) => {
            this.uvs.push([u, v]);
        };
        this.onFace = (vertices) => {
            var _a;
            var _b;
            if (vertices.length !== 3)
                throw new Error("We can only deal with triangles!");
            const triangle = vertices.map(vertex => this.getElem(vertex));
            this.elements.push(...triangle);
            this.normalPerTriangle.push(new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(0, 0, 0));
            this.verticesPerTriangle.push(triangle);
            const triangleIndex = this.normalPerTriangle.length - 1;
            for (const vertexIndex of triangle) {
                (_a = (_b = this.trianglesPerVertex)[vertexIndex]) !== null && _a !== void 0 ? _a : (_b[vertexIndex] = []);
                this.trianglesPerVertex[vertexIndex].push(triangleIndex);
            }
        };
        /**
         * Return the index of the vertex for the triplet
         * point/normal/uv.
         */
        this.getElem = (triangleSummit) => {
            var _a;
            const k = this.key(triangleSummit);
            const index = (_a = this.mapVertices.get(k)) !== null && _a !== void 0 ? _a : -1;
            if (index > -1)
                return index;
            const [vx, vy, vz] = this.points[triangleSummit.vertex];
            this.attPosition.push(vx, vy, vz);
            if (typeof triangleSummit.normal === "number") {
                const [nx, ny, nz] = this.normals[triangleSummit.normal];
                this.attNormal.push(nx, ny, nz);
            }
            if (typeof triangleSummit.uv === "number") {
                const [tx, ty] = this.uvs[triangleSummit.uv];
                this.attUV.push(tx, ty);
            }
            this.mapVertices.set(k, this.elementIndex);
            return this.elementIndex++;
        };
        this.reset();
        const { onVertex, onNormal, onTexture, onFace, onObject } = this;
        parse(content, { onVertex, onNormal, onTexture, onFace, onObject });
    }
    makeGeometry({ computeNormals, } = {}) {
        const options = {
            attPosition: {
                name: "POSITION",
                data: new Float32Array(this.attPosition),
            },
            computeNormalsIfMissing: computeNormals,
        };
        if (this.attNormal.length > 0) {
            options.attNormal = {
                name: "NORMAL",
                data: new Float32Array(this.attNormal),
            };
        }
        if (this.attUV.length > 0) {
            options.attUV = {
                name: "TEXTCOORDS_0",
                data: new Float32Array(this.attUV),
            };
        }
        const { elements, elementIndex } = this;
        if (elementIndex <= 256) {
            options.elements = new Uint8Array(elements);
        }
        else if (elementIndex <= 0x10000) {
            options.elements = new Uint16Array(elements);
        }
        else {
            options.elements = new Uint32Array(elements);
        }
        return _geometry_index_js__WEBPACK_IMPORTED_MODULE_2__.TgdGeometry.make(options);
    }
    computeNormals() {
        const A = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        const B = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        const C = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3();
        for (const [triangleIndex, normal,] of this.normalPerTriangle.entries()) {
            const [v0, v1, v2] = this.verticesPerTriangle[triangleIndex];
            this.readVertexInto(v0, A);
            this.readVertexInto(v1, B).subtract(A);
            this.readVertexInto(v2, C).subtract(A);
            normal.from(B.cross(C).normalize());
        }
        this.attNormal = [];
        for (let elementIndex = 0; elementIndex < this.elementIndex; elementIndex++) {
            const normal = new _math_index_js__WEBPACK_IMPORTED_MODULE_1__.TgdVec3(0, 0, 0);
            for (const triIndex of this.trianglesPerVertex[elementIndex])
                normal.add(this.normalPerTriangle[triIndex]);
            const [nx, ny, nz] = normal.normalize();
            this.attNormal.push(nx, ny, nz);
        }
    }
    reset() {
        this.name = "Mesh";
        this.attPosition = [];
        this.attNormal = [];
        this.attUV = [];
        this.elements = [];
        this.elementIndex = 0;
        this.points = [];
        this.normals = [];
        this.verticesPerTriangle = [];
        this.trianglesPerVertex = [];
        this.normalPerTriangle = [];
        this.uvs = [];
        this.mapVertices.clear();
        this.mapVertices.clear();
    }
    key(v) {
        return `${v.vertex}/${v.normal}`;
    }
    readVertexInto(index, target) {
        const P = this.attPosition;
        const k = index * 3;
        target.reset(P[k + 0], P[k + 1], P[k + 2]);
        return target;
    }
}
function parse(content, options = {}) {
    const { onVertex, onNormal, onTexture, onFace, onObject } = options;
    for (const fullLine of (0,_for_each_line_js__WEBPACK_IMPORTED_MODULE_0__.forEachLine)(content)) {
        const line = fullLine.trimStart();
        if (onVertex && line.startsWith("v ")) {
            const vertex = line.slice("v ".length).split(" ").map(Number);
            if (isVector3(vertex))
                onVertex(...vertex);
        }
        else if (onFace && line.startsWith("f ")) {
            onFace(line
                .slice("f ".length)
                .split(" ")
                // Warning! We need to remove 1 to the index.
                .map(face => {
                const [v, t, n] = face.split("/");
                return {
                    vertex: Number(v) - 1,
                    normal: n ? Number(n) - 1 : undefined,
                    uv: t ? Number(t) - 1 : undefined,
                };
            }));
        }
        else if (onNormal && line.startsWith("vn ")) {
            const normal = line.slice("vn ".length).split(" ").map(Number);
            if (isVector3(normal))
                onNormal(...normal);
        }
        else if (onTexture && line.startsWith("vt ")) {
            const [u, v, w] = line.slice("vt ".length).split(" ").map(Number);
            onTexture(u, v, w);
        }
        else if (onObject && line.startsWith("o ")) {
            const name = line.slice("o ".length);
            onObject(name);
        }
    }
}
function isVector3(data) {
    return data.length === 3;
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ 9205:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/debug/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debug: () => (/* reexport safe */ _debug_js__WEBPACK_IMPORTED_MODULE_0__.debug),
/* harmony export */   highlightEnum: () => (/* reexport safe */ _debug_js__WEBPACK_IMPORTED_MODULE_0__.highlightEnum),
/* harmony export */   padColOfNumbers: () => (/* reexport safe */ _tools_js__WEBPACK_IMPORTED_MODULE_1__.padColOfNumbers)
/* harmony export */ });
/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug.js */ 3722);
/* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tools.js */ 7042);


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVidWcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxTQUFTLENBQUE7QUFDdkIsY0FBYyxTQUFTLENBQUEifQ==

/***/ }),

/***/ 9248:
/*!**********************************************************!*\
  !*** ../../tgd2/lib/dist/utils/easing-function/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdEasingFunctionInBack: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInBack),
/* harmony export */   tgdEasingFunctionInBounce: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInBounce),
/* harmony export */   tgdEasingFunctionInCirc: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInCirc),
/* harmony export */   tgdEasingFunctionInCubic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInCubic),
/* harmony export */   tgdEasingFunctionInElastic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInElastic),
/* harmony export */   tgdEasingFunctionInExpo: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInExpo),
/* harmony export */   tgdEasingFunctionInOutBack: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutBack),
/* harmony export */   tgdEasingFunctionInOutBounce: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutBounce),
/* harmony export */   tgdEasingFunctionInOutCirc: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutCirc),
/* harmony export */   tgdEasingFunctionInOutCubic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutCubic),
/* harmony export */   tgdEasingFunctionInOutElastic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutElastic),
/* harmony export */   tgdEasingFunctionInOutExpo: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutExpo),
/* harmony export */   tgdEasingFunctionInOutQuad: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutQuad),
/* harmony export */   tgdEasingFunctionInOutQuart: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutQuart),
/* harmony export */   tgdEasingFunctionInOutQuint: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutQuint),
/* harmony export */   tgdEasingFunctionInOutSine: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInOutSine),
/* harmony export */   tgdEasingFunctionInQuad: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInQuad),
/* harmony export */   tgdEasingFunctionInQuart: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInQuart),
/* harmony export */   tgdEasingFunctionInQuint: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInQuint),
/* harmony export */   tgdEasingFunctionInSine: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionInSine),
/* harmony export */   tgdEasingFunctionLinear: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionLinear),
/* harmony export */   tgdEasingFunctionOutBack: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutBack),
/* harmony export */   tgdEasingFunctionOutBounce: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutBounce),
/* harmony export */   tgdEasingFunctionOutCirc: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutCirc),
/* harmony export */   tgdEasingFunctionOutCubic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutCubic),
/* harmony export */   tgdEasingFunctionOutElastic: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutElastic),
/* harmony export */   tgdEasingFunctionOutExpo: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutExpo),
/* harmony export */   tgdEasingFunctionOutQuad: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutQuad),
/* harmony export */   tgdEasingFunctionOutQuart: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutQuart),
/* harmony export */   tgdEasingFunctionOutQuint: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutQuint),
/* harmony export */   tgdEasingFunctionOutSine: () => (/* reexport safe */ _easing_function_js__WEBPACK_IMPORTED_MODULE_0__.tgdEasingFunctionOutSine)
/* harmony export */ });
/* harmony import */ var _easing_function_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./easing-function.js */ 692);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvZWFzaW5nLWZ1bmN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQW1CLENBQUEifQ==

/***/ }),

/***/ 9271:
/*!***************************************************!*\
  !*** ../../tgd2/lib/dist/utils/action/transfo.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdActionCreateTransfoInterpolation: () => (/* binding */ tgdActionCreateTransfoInterpolation)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ 1793);

function tgdActionCreateTransfoInterpolation(transfo, transfoAtT0, transfoAtT1) {
    const beginTransfo = transfo.clone().from(transfoAtT0);
    const distanceAt0 = beginTransfo.distance;
    const positionAt0 = beginTransfo.position.clone();
    const scaleAt0 = beginTransfo.scale.clone();
    const orientationAt0 = beginTransfo.orientation.clone();
    const endTransfo = transfo.clone().from(transfoAtT1);
    const orientationAt1 = endTransfo.orientation.clone();
    const positionAt1 = endTransfo.position.clone();
    const scaleAt1 = endTransfo.scale.clone();
    const distanceAt1 = endTransfo.distance;
    return (t) => {
        transfo.distance = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.tgdCalcMix)(distanceAt0, distanceAt1, t);
        transfo.position.fromMix(positionAt0, positionAt1, t);
        transfo.scale.fromMix(scaleAt0, scaleAt1, t);
        transfo.orientation.fromSlerp(orientationAt0, orientationAt1, t);
        transfo.updateMatrix();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9hY3Rpb24vdHJhbnNmby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBRXBDLE1BQU0sVUFBVSxtQ0FBbUMsQ0FDL0MsT0FBbUIsRUFDbkIsV0FBd0UsRUFDeEUsV0FBd0U7SUFFeEUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN0RCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFBO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDakQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMzQyxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBRXZELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDcEQsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNyRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQy9DLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDekMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQTtJQUV2QyxPQUFPLENBQUMsQ0FBUyxFQUFFLEVBQUU7UUFDakIsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMxRCxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3JELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDNUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNoRSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUE7SUFDMUIsQ0FBQyxDQUFBO0FBQ0wsQ0FBQyJ9

/***/ }),

/***/ 9331:
/*!**********************************************************!*\
  !*** ../../tgd2/lib/dist/painter/segments/segments.frag ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = "#version 300 es\n\nprecision highp float;\n\nuniform float uniContrast;\nuniform float uniSpecularIntensity;\nuniform float uniSpecularExponent;\n\nin vec4 varColor;\nin vec3 varNormal;\n\nout vec4 FragColor;\n\n\nvoid main() {\n    if (varColor.a < 1.0) discard;\n\n    float z = normalize(varNormal).z;\n    float light = z * uniContrast + (1.0 - uniContrast);\n    float spec = pow(z, uniSpecularExponent) * uniSpecularIntensity;\n    FragColor =vec4(varColor.rgb * light + vec3(spec), varColor.w); // varColor;\n}\n";

/***/ }),

/***/ 9748:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/material/flat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdMaterialFlat: () => (/* binding */ TgdMaterialFlat)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../math/index.js */ 6088);
/* harmony import */ var _material_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./material.js */ 6018);


const DEFAULT_COLOR = [0, 0, 0, 1];
class TgdMaterialFlat extends _material_js__WEBPACK_IMPORTED_MODULE_1__.TgdMaterial {
    constructor(options = {}) {
        var _a;
        super();
        this.uniforms = {
            uniColor: "vec4",
        };
        const color = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec4((_a = options.color) !== null && _a !== void 0 ? _a : DEFAULT_COLOR);
        this.fragmentShaderCode = [`return vec4(${color.join(", ")});`];
        this.vertexShaderCode = [];
        this.varyings = {};
    }
    setUniforms() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXRlcmlhbC9mbGF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQVF4QyxNQUFNLGFBQWEsR0FBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVoRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxXQUFXO0lBUTVDLFlBQVksVUFBa0MsRUFBRTs7UUFDNUMsS0FBSyxFQUFFLENBQUE7UUFQSyxhQUFRLEdBQXlDO1lBQzdELFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUE7UUFNRyxNQUFNLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFBLE9BQU8sQ0FBQyxLQUFLLG1DQUFJLGFBQWEsQ0FBQyxDQUFBO1FBQ3pELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLGVBQWUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQTtJQUN0QixDQUFDO0lBRUQsV0FBVyxLQUFVLENBQUM7Q0FDekIifQ==

/***/ }),

/***/ 9769:
/*!******************************************!*\
  !*** ../../tgd2/lib/dist/filter/zoom.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdFilterZoom: () => (/* binding */ TgdFilterZoom)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/index.js */ 6088);
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter.js */ 3672);


class TgdFilterZoom extends _filter_js__WEBPACK_IMPORTED_MODULE_1__.TgdFilter {
    constructor({ zoom = 1 } = {}) {
        super({
            fragmentShaderCode: [
                "vec2 uv = (varUV - vec2(0.5) - uniTranslation) * uniZoom + vec2(0.5);",
                "vec4 color = texture(uniTexture, uv);",
                "FragColor = color;",
            ],
            uniforms: {
                uniZoom: "float",
                uniTranslation: "vec2",
            },
        });
        this.zoom = 1;
        this.setUniforms = ({ program, }) => {
            program.uniform1f("uniZoom", 1 / this.zoom);
            program.uniform2f("uniTranslation", this.translation.x, this.translation.y);
        };
        this.zoom = zoom;
        this.translation = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdVec2();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9vbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWx0ZXIvem9vbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ2pDLE9BQU8sRUFDSCxTQUFTLEdBRVosTUFBTSxVQUFVLENBQUE7QUFFakIsTUFBTSxPQUFPLGFBQWMsU0FBUSxTQUFTO0lBSXhDLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFnQyxFQUFFO1FBQ3BELEtBQUssQ0FBQztZQUNGLGtCQUFrQixFQUFFO2dCQUNoQix1RUFBdUU7Z0JBQ3ZFLHVDQUF1QztnQkFDdkMsb0JBQW9CO2FBQ3ZCO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixjQUFjLEVBQUUsTUFBTTthQUN6QjtTQUNKLENBQUMsQ0FBQTtRQWRDLFNBQUksR0FBRyxDQUFDLENBQUE7UUFtQkMsZ0JBQVcsR0FBRyxDQUFDLEVBQzNCLE9BQU8sR0FDc0IsRUFBUSxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLFNBQVMsQ0FDYixnQkFBZ0IsRUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUNyQixDQUFBO1FBQ0wsQ0FBQyxDQUFBO1FBYkcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLENBQUM7Q0FZSiJ9

/***/ }),

/***/ 9798:
/*!***********************************************!*\
  !*** ../../tgd2/lib/dist/controller/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdControllerCameraOrbit: () => (/* reexport safe */ _camera_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdControllerCameraOrbit)
/* harmony export */ });
/* harmony import */ var _camera_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera/index.js */ 7368);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJvbGxlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFVBQVUsQ0FBQSJ9

/***/ }),

/***/ 9856:
/*!****************************************!*\
  !*** ../../tgd2/lib/dist/vao/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdVertexArray: () => (/* reexport safe */ _vao_js__WEBPACK_IMPORTED_MODULE_0__.TgdVertexArray)
/* harmony export */ });
/* harmony import */ var _vao_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vao.js */ 2638);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsT0FBTyxDQUFBIn0=

/***/ }),

/***/ 9974:
/*!********************************************!*\
  !*** ../../tgd2/lib/dist/program/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TgdProgram: () => (/* reexport safe */ _program_js__WEBPACK_IMPORTED_MODULE_0__.TgdProgram)
/* harmony export */ });
/* harmony import */ var _program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./program.js */ 1930);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvZ3JhbS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFdBQVcsQ0FBQSJ9

/***/ }),

/***/ 9999:
/*!**************************************************!*\
  !*** ../../tgd2/lib/dist/utils/action/camera.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tgdActionCreateCameraInterpolation: () => (/* binding */ tgdActionCreateCameraInterpolation)
/* harmony export */ });
/* harmony import */ var _math_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../math/index.js */ 6088);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math.js */ 1793);
/* harmony import */ var _transfo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transfo.js */ 9271);



function tgdActionCreateCameraInterpolation(camera, destination) {
    var _a, _b;
    const transfoDestination = new _math_index_js__WEBPACK_IMPORTED_MODULE_0__.TgdTransfo(camera.transfo).from(destination);
    transfoDestination.debug();
    if (typeof destination.distance === "number")
        transfoDestination.distance = destination.distance;
    const beginZoom = camera.zoom;
    const endZoom = (_a = destination.zoom) !== null && _a !== void 0 ? _a : beginZoom;
    const action = (0,_transfo_js__WEBPACK_IMPORTED_MODULE_2__.tgdActionCreateTransfoInterpolation)(camera.transfo, {}, transfoDestination);
    const beginSpaceHeightAtTarget = camera.spaceHeightAtTarget;
    const endSpaceHeightAtTarget = (_b = destination.spaceHeightAtTarget) !== null && _b !== void 0 ? _b : camera.spaceHeightAtTarget;
    return (t) => {
        action(t);
        if (typeof destination.spaceHeightAtTarget === "number") {
            camera.spaceHeightAtTarget = (0,_math_js__WEBPACK_IMPORTED_MODULE_1__.tgdCalcMix)(beginSpaceHeightAtTarget, endSpaceHeightAtTarget, t);
        }
        camera.zoom = (0,_math_js__WEBPACK_IMPORTED_MODULE_1__.tgdCalcMix)(beginZoom, endZoom, t);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2FjdGlvbi9jYW1lcmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUUvRCxNQUFNLFVBQVUsa0NBQWtDLENBQzlDLE1BQWlCLEVBQ2pCLFdBQW9DOztJQUVwQyxNQUFNLGtCQUFrQixHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDM0Usa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDMUIsSUFBSSxPQUFPLFdBQVcsQ0FBQyxRQUFRLEtBQUssUUFBUTtRQUN4QyxrQkFBa0IsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQTtJQUN0RCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQUEsV0FBVyxDQUFDLElBQUksbUNBQUksU0FBUyxDQUFBO0lBQzdDLE1BQU0sTUFBTSxHQUFHLG1DQUFtQyxDQUM5QyxNQUFNLENBQUMsT0FBTyxFQUNkLEVBQUUsRUFDRixrQkFBa0IsQ0FDckIsQ0FBQTtJQUNELE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFBO0lBQzNELE1BQU0sc0JBQXNCLEdBQ3hCLE1BQUEsV0FBVyxDQUFDLG1CQUFtQixtQ0FBSSxNQUFNLENBQUMsbUJBQW1CLENBQUE7SUFFakUsT0FBTyxDQUFDLENBQVMsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNULElBQUksT0FBTyxXQUFXLENBQUMsbUJBQW1CLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDdEQsTUFBTSxDQUFDLG1CQUFtQixHQUFHLFVBQVUsQ0FDbkMsd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixDQUFDLENBQ0osQ0FBQTtRQUNMLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ25ELENBQUMsQ0FBQTtBQUNMLENBQUMifQ==

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 		__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 		module = execOptions.module;
/******/ 		execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("app." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("edc80c947867dff52f71")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "vintage-machine:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId, fetchPriority) {
/******/ 				return trackBlockingPromise(require.e(chunkId, fetchPriority));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				// inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results).then(function () {});
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							}, [])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								}
/******/ 								return setStatus("ready").then(function () {
/******/ 									return updatedModules;
/******/ 								});
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdatevintage_machine"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result = newModuleFactory
/******/ 						? getAffectedModuleEffects(moduleId)
/******/ 						: {
/******/ 								type: "disposed",
/******/ 								moduleId: moduleId
/******/ 							};
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err1) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err1,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err1);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkvintage_machine"] = self["webpackChunkvintage_machine"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__.O(undefined, ["defaultVendors-node_modules_css-loader_dist_runtime_api_js-node_modules_css-loader_dist_runti-ef8174"], () => (__webpack_require__(8056)))
/******/ 	__webpack_require__.O(undefined, ["defaultVendors-node_modules_css-loader_dist_runtime_api_js-node_modules_css-loader_dist_runti-ef8174"], () => (__webpack_require__(3943)))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["defaultVendors-node_modules_css-loader_dist_runtime_api_js-node_modules_css-loader_dist_runti-ef8174"], () => (__webpack_require__(7729)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,