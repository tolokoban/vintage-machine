import { BasikValue } from "@/types";
import { TgdPainter } from "@tolokoban/tgd";
import { Symbols } from "./painters/symbols/symbols";
import { PainterLayer } from "./painters/layer";
import { BasikPalette } from "./palette/main";
import { KernelInterface } from "./types";
import { PainterDisk } from "./painters/disk";
import { PainterRect } from "./painters/rect";
export declare class Kernel extends TgdPainter implements KernelInterface {
    private readonly canvas;
    private static ID;
    readonly id: string;
    readonly LAYERS_COUNT = 1;
    readonly WIDTH = 640;
    readonly HEIGHT = 480;
    readonly CHAR_SIZE = 16;
    readonly TEXT_COLS: number;
    readonly TEXT_ROWS: number;
    readonly TEXT_ORIGIN_X: number;
    readonly TEXT_ORIGIN_Y: number;
    readonly palette: BasikPalette;
    readonly painterSymbols: Symbols;
    readonly painterDisk: PainterDisk;
    readonly painterRect: PainterRect;
    x: number;
    y: number;
    colorIndex: number;
    private readonly instructions;
    private readonly functions;
    private readonly context;
    private readonly variablesStack;
    private readonly layers;
    private readonly textureSymbols;
    private readonly texturePalette;
    private readonly colorizer;
    private _currentLayerindex;
    constructor(canvas: HTMLCanvasElement, symbols: HTMLImageElement);
    get instructionsNames(): string[];
    reset(): Promise<void>;
    fullscreenRequest(): void;
    fullscreenExit(): void;
    get gl(): WebGL2RenderingContext;
    screenSpaceX(xInPixels: number): number;
    screenSpaceY(yInPixels: number): number;
    executeInstruction(name: string, args: BasikValue[]): Promise<boolean>;
    executeFunction(name: string, args: BasikValue[]): BasikValue | Promise<BasikValue>;
    get currentLayerIndex(): number;
    set currentLayerIndex(value: number);
    get layer(): PainterLayer;
    delete(): void;
    paint(): void;
    paintFB(action?: () => void): void;
    print(text: string, scale?: number): void;
    printChar(sym: number, scale?: number): void;
    getVar(name: string): BasikValue;
    setVar(name: string, value: BasikValue): void;
    debugVariables(): void;
    subroutineEnter(varNames: string[], varValues: BasikValue[]): void;
    subroutineExit(): void;
    test(): void;
    private get variables();
}
//# sourceMappingURL=kernel.d.ts.map