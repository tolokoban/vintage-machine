(()=>{"use strict";var t,e={165:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(354),s=n.n(i),r=n(314),o=n.n(r)()(s());o.push([t.id,'body {\n  width: 100%;\n  height: 100%;\n  font-size: 1.2vmax;\n  overflow: hidden;\n  font-family: "Josefin Sans", josefin-sans, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #eee;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody > * {\n  vertical-align: top;\n}\n\nbody * {\n  box-sizing: border-box;\n}\n\ncanvas {\n  display: inline-block;\n}\n\n/**\n * The screen is split in three parts.\n * On the right, you have the EDITOR,\n * The left is split into MONITOR at the top\n * and MANUAL at the bottom.\n */\n\ndiv#app {\n  background-color: #000;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  padding: 0;\n  margin: 0;\n}\n\n#app > div.left {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 50%;\n  height: 100%;\n}\n\n#app > div.left > #MONITOR {\n  position: absolute;\n  top: 0;\n  top: 0;\n  width: 100%;\n  height: calc(50% - 1px);\n}\n\n#app > div.left > #MANUAL {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 50%;\n}\n\n#app > #EDITOR {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: calc(50% - 1px);\n  height: 100%;\n}\n\n#EDITOR {\n  background-color: #ddd;\n  display: grid;\n  grid-template-rows: auto 1fr;\n  min-height: 0;\n}\n\n#EDITOR > #CODE {\n  min-height: 0;\n  overflow: auto;\n}\n\n#EDITOR > #HEADER {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 0;\n  background-color: #007;\n  color: #aa0;\n}\n\n#EDITOR > #HEADER > div {\n  line-height: 2;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n#EDITOR > #HEADER > div:hover {\n  background-color: #00f;\n  color: #ff0;\n}\n\n#MONITOR {\n  position: relative;\n  background-color: #007;\n  display: grid;\n  place-items: center;\n}\n\ncanvas#CANVAS {\n  background-color: transparent;\n  height: 100%;\n}\n\n#MANUAL {\n  background-color: #fff;\n}\n\ndiv#app > div.left {\n  min-height: 0;\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  gap: 1px;\n  padding: 0;\n  margin: 0;\n}\n\n#HELP {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: #fff;\n  padding: 1em;\n}\n\n#HELP pre {\n  font-family: monospace;\n  padding: 0.5rem;\n  margin: 0.5rem;\n  background: #333;\n  color: #fffe;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);\n}\n\n#HELP code {\n  font-family: monospace;\n}\n\n#HELP blockquote {\n  margin: 0.5em;\n  box-shadow: -0.25em 0 #f90;\n  background: linear-gradient(to right, #f906, #f900);\n  padding: 1em;\n  font-variant: small-caps;\n}\n\n#HELP blockquote > p {\n  margin: 0;\n}\n\n#CODE {\n  font-family: monospace;\n  border: none;\n  background-color: #ddd;\n}\n\n#ERROR {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: none;\n}\n\n#ERROR[open] {\n  display: grid;\n  place-items: center;\n  background-color: #fff0;\n}\n\n#ERROR > div {\n  border-radius: 1em;\n  border: none;\n  box-shadow: 0 1em 2em #000;\n  padding: 1em;\n  max-width: 640px;\n  background-color: #fffe;\n}\n\n#ERROR > div pre {\n  white-space: pre-wrap;\n  max-height: 66vh;\n  overflow: auto;\n  font-weight: bold;\n  color: #900;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,qDAAqD;EACrD,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB;EACtB,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,aAAa;EACb,UAAU;EACV,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,UAAU;EACV,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,MAAM;EACN,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,SAAS;EACT,WAAW;EACX,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,MAAM;EACN,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,4BAA4B;EAC5B,aAAa;AACf;;AAEA;EACE,aAAa;EACb,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,MAAM;EACN,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,sBAAsB;EACtB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,2BAA2B;EAC3B,QAAQ;EACR,UAAU;EACV,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,YAAY;EACZ,0CAA0C;AAC5C;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,mDAAmD;EACnD,YAAY;EACZ,wBAAwB;AAC1B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,0BAA0B;EAC1B,YAAY;EACZ,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,WAAW;AACb",sourcesContent:['body {\n  width: 100%;\n  height: 100%;\n  font-size: 1.2vmax;\n  overflow: hidden;\n  font-family: "Josefin Sans", josefin-sans, sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #eee;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody > * {\n  vertical-align: top;\n}\n\nbody * {\n  box-sizing: border-box;\n}\n\ncanvas {\n  display: inline-block;\n}\n\n/**\n * The screen is split in three parts.\n * On the right, you have the EDITOR,\n * The left is split into MONITOR at the top\n * and MANUAL at the bottom.\n */\n\ndiv#app {\n  background-color: #000;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  padding: 0;\n  margin: 0;\n}\n\n#app > div.left {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 50%;\n  height: 100%;\n}\n\n#app > div.left > #MONITOR {\n  position: absolute;\n  top: 0;\n  top: 0;\n  width: 100%;\n  height: calc(50% - 1px);\n}\n\n#app > div.left > #MANUAL {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 50%;\n}\n\n#app > #EDITOR {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: calc(50% - 1px);\n  height: 100%;\n}\n\n#EDITOR {\n  background-color: #ddd;\n  display: grid;\n  grid-template-rows: auto 1fr;\n  min-height: 0;\n}\n\n#EDITOR > #CODE {\n  min-height: 0;\n  overflow: auto;\n}\n\n#EDITOR > #HEADER {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 0;\n  background-color: #007;\n  color: #aa0;\n}\n\n#EDITOR > #HEADER > div {\n  line-height: 2;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n#EDITOR > #HEADER > div:hover {\n  background-color: #00f;\n  color: #ff0;\n}\n\n#MONITOR {\n  position: relative;\n  background-color: #007;\n  display: grid;\n  place-items: center;\n}\n\ncanvas#CANVAS {\n  background-color: transparent;\n  height: 100%;\n}\n\n#MANUAL {\n  background-color: #fff;\n}\n\ndiv#app > div.left {\n  min-height: 0;\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  gap: 1px;\n  padding: 0;\n  margin: 0;\n}\n\n#HELP {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: #fff;\n  padding: 1em;\n}\n\n#HELP pre {\n  font-family: monospace;\n  padding: 0.5rem;\n  margin: 0.5rem;\n  background: #333;\n  color: #fffe;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);\n}\n\n#HELP code {\n  font-family: monospace;\n}\n\n#HELP blockquote {\n  margin: 0.5em;\n  box-shadow: -0.25em 0 #f90;\n  background: linear-gradient(to right, #f906, #f900);\n  padding: 1em;\n  font-variant: small-caps;\n}\n\n#HELP blockquote > p {\n  margin: 0;\n}\n\n#CODE {\n  font-family: monospace;\n  border: none;\n  background-color: #ddd;\n}\n\n#ERROR {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: none;\n}\n\n#ERROR[open] {\n  display: grid;\n  place-items: center;\n  background-color: #fff0;\n}\n\n#ERROR > div {\n  border-radius: 1em;\n  border: none;\n  box-shadow: 0 1em 2em #000;\n  padding: 1em;\n  max-width: 640px;\n  background-color: #fffe;\n}\n\n#ERROR > div pre {\n  white-space: pre-wrap;\n  max-height: 66vh;\n  overflow: auto;\n  font-weight: bold;\n  color: #900;\n}\n'],sourceRoot:""}]);const a=o},299:(t,e,n)=>{function i(t){if(s)for(const e in s)if(s[e]===t)return e;return`${t}`}const s=document.createElement("canvas").getContext("webgl2");function r(t,e=6){const n=Math.pow(10,e),i=[];let s=0;for(const r of t){const t=(Math.round(r*n)/n).toFixed(e);s=Math.max(s,t.length),i.push(t)}return i.map((t=>t.padStart(s," ")))}var o=n(848);function a(t,e,n){return t<e?e:t>n?n:t}function h(t,e,n){return(1-n)*t+n*e}function c(t,e,n){const i=n-e;return 0===i?e:t<e?t+Math.ceil((e-t)/i)*i:t>n?t-Math.ceil((t-n)/i)*i:t}Math.PI,Math.PI;class l extends Float32Array{static newFrom([t,e,n]){return new l(t,e,n)}static newFromMix([t,e,n],[i,s,r],o=.5){const a=1-o;return new l(a*t+o*i,a*e+o*s,a*n+o*r)}static distance(t,e){const n=e.x-t.x,i=e.y-t.y,s=e.z-t.z;return Math.hypot(n,i,s)}constructor(t=0,e=0,n=0){if(super(3),"number"!=typeof t)return this.x=t[0],this.y=t[1],void(this.z=t[2]);this.x=t,this.y=e,this.z=n}clone(){return new l(this)}mix(t,e=.5){const n=1-e;return this.x=n*this.x+e*t.x,this.y=n*this.y+e*t.y,this.z=n*this.z+e*t.z,this}isEqual(t){const[e,n,i]=t;return e===this.x&&n===this.y&&i===this.z}isClose(t,e=1e-6){const[n,i,s]=t;return!(Math.abs(n-this.x)>e||Math.abs(i-this.y)>e||Math.abs(s-this.z)>e)}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),[s,r,o]=this,[a,h,c]=t,l=h*o-c*r,u=c*s-a*o,d=a*r-h*s,f=(s*a+r*h+o*c)*(1-n);return this.x=s*n+l*i+a*f,this.y=r*n+u*i+h*f,this.z=o*n+d*i+c*f,this}applyMatrix(t){const{x:e,y:n,z:i}=this;return this.x=e*t.m00+n*t.m10+i*t.m20,this.y=e*t.m01+n*t.m11+i*t.m21,this.z=e*t.m02+n*t.m12+i*t.m22,this}applyQuaternion(t){return o.gL(this,this,t),this}from(t){const[e,n,i]=t;return this.x=e,this.y=n,this.z=i,this}fromOpposite(t){const[e,n,i]=t;return this.x=-e,this.y=-n,this.z=-i,this}fromMix(t,e,n){const[i,s,r]=t,[o,a,c]=e;return this.reset(h(i,o,n),h(s,a,n),h(r,c,n))}reset(t=0,e=0,n=0){return this[0]=t,this[1]=e,this[2]=n,this}distanceToLineSquared(t,e){const[n,i,s]=this,[r,o,a]=t,[h,c,l]=e,u=h*(n-r)+c*(i-o)+l*(s-a),d=n-(r+u*h),f=i-(o+u*c),g=s-(a+u*l);return d*d+f*f+g*g}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}add(...t){for(const e of t){const[t,n,i]=e;this[0]+=t,this[1]+=n,this[2]+=i}return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this[2]+=t.z*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]}get size(){return Math.hypot(this[0],this[1],this[2])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2];return 0===t?this:this.scale(1/Math.sqrt(t))}cross(t){const[e,n,i]=this,[s,r,o]=t;return this[0]=n*o-r*i,this[1]=i*s-o*e,this[2]=e*r-s*n,this}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this[2]=Math.random()-.5,this}debug(t="vec3"){const{x:e,y:n,z:i}=this,s=[e,n,i].map((t=>t.toFixed(6)));console.log(`${t}:   `,s.join(" | "),"   length:",Math.hypot(e,n,i))}}l.X=new l(1,0,0),l.Y=new l(0,1,0),l.Z=new l(0,0,1);class u extends Float32Array{static fromSlerp([t,e,n,i=0],[s,r,o,a=0],h=.5){const c=1-h;return new u(c*t+h*s,c*e+h*r,c*n+h*o,c*i+h*a)}constructor(t=0,e=0,n=0,i=1){if(super(4),t instanceof u)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=t.w);if(t instanceof l)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=i);if(Array.isArray(t)){if("number"==typeof e){const[n,i,s]=t;return this.x=null!=n?n:0,this.y=null!=i?i:0,this.z=null!=s?s:0,void(this.w=e)}{const[e,n,i,s]=t;return this.x=null!=e?e:0,this.y=null!=n?n:0,this.z=null!=i?i:0,void(this.w=null!=s?s:1)}}this.x=t,this.y=e,this.z=n,this.w=i}reset(t=0,e=0,n=0,i=1){return this.x=t,this.y=e,this.z=n,this.w=i,this}from(t){const[e,n,i,s]=t;return this.x=e,this.y=n,this.z=i,this.w=s,this}fromVec3(t){const[e,n,i]=t;return this.x=e,this.y=n,this.z=i,this}clone(){return new u(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this.z=(1-e)*this.z+e*t.z,this.w=(1-e)*this.w+e*t.w,this}isEqual(t){const[e,n,i,s]=t;return e===this.x&&n===this.y&&i===this.z&&s===this.w}isClose({x:t,y:e,z:n,w:i},s=1e-6){return!(Math.abs(t-this.x)>s||Math.abs(e-this.y)>s||Math.abs(n-this.z)>s||Math.abs(i-this.w)>s)}applyMatrix(t){const{x:e,y:n,z:i,w:s}=this;return this.x=e*t.m00+n*t.m01+i*t.m02+s*t.m03,this.y=e*t.m10+n*t.m11+i*t.m12+s*t.m13,this.z=e*t.m20+n*t.m21+i*t.m22+s*t.m23,this.w=e*t.m30+n*t.m31+i*t.m32+s*t.m33,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}get w(){return this[3]}set w(t){this[3]=t}add(...t){for(const e of t)this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],e.length>3&&(this[3]+=e[3]);return this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],t.length>3&&(this[3]-=t[3]),this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]+this[3]*t[3]}get size(){return Math.hypot(this[0],this[1],this[2],this[3])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2]+this[3]*this[3];return 0===t?this:this.scale(1/Math.sqrt(t))}debug(t="vec4"){const{x:e,y:n,z:i,w:s}=this,r=[e,n,i,s].map((t=>t.toFixed(6)));console.log(`${t}:   `,r.join(" | "),`  (length = ${this.size})`)}}u.X=new u(1,0,0,0),u.Y=new u(0,1,0,0),u.Z=new u(0,0,1,0),u.W=new u(0,0,0,1);var d=n(157);class f extends Float32Array{constructor(t=1,e=0,n=0,i=0,s=0,r=1,o=0,a=0,h=0,c=0,l=1,u=0,d=0,f=0,g=0,A=1){super("number"==typeof t?[t,e,n,i,s,r,o,a,h,c,l,u,d,f,g,A]:t)}reset(t=u.X,e=u.Y,n=u.Z,i=u.W){const[s,r,o,a]=t,[h,c,l,d]=e,[f,g,A,m]=n,[p,E,b,x]=i;return this.m00=s,this.m01=r,this.m02=o,this.m03=a,this.m10=h,this.m11=c,this.m12=l,this.m13=d,this.m20=f,this.m21=g,this.m22=A,this.m23=m,this.m30=p,this.m31=E,this.m32=b,this.m33=x,this}multiply(t){return d.lw(this,this,t),this}invert(t){return d.B8(this,null!=t?t:this),this}get translation(){const{m03:t,m13:e,m23:n}=this;return new l(t,e,n)}set translation(t){const[e,n,i]=t;this.m03=e,this.m13=n,this.m23=i}toTanslation(t){return t.x=this.m03,t.y=this.m13,t.z=this.m23,this}translate(t){const[e,n,i]=t;return this.m03+=e,this.m13+=n,this.m23+=i,this}from(t){var e;for(let n=0;n<this.length;n++)this[n]=null!==(e=t[n])&&void 0!==e?e:0;return this}fromMat3(t){return this.m00=t.m00,this.m01=t.m01,this.m02=t.m02,this.m10=t.m10,this.m11=t.m11,this.m12=t.m12,this.m20=t.m20,this.m21=t.m21,this.m22=t.m22,this}toAxes(t,e,n){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(n)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}fromQuat({x:t,y:e,z:n,w:i}){return d.I0(this,[t,e,n,i]),this}get m00(){return this[g]}set m00(t){this[g]=t}get m10(){return this[A]}set m10(t){this[A]=t}get m20(){return this[m]}set m20(t){this[m]=t}get m30(){return this[p]}set m30(t){this[p]=t}get m01(){return this[E]}set m01(t){this[E]=t}get m11(){return this[b]}set m11(t){this[b]=t}get m21(){return this[x]}set m21(t){this[x]=t}get m31(){return this[y]}set m31(t){this[y]=t}get m02(){return this[v]}set m02(t){this[v]=t}get m12(){return this[C]}set m12(t){this[C]=t}get m22(){return this[R]}set m22(t){this[R]=t}get m32(){return this[_]}set m32(t){this[_]=t}get m03(){return this[w]}set m03(t){this[w]=t}get m13(){return this[T]}set m13(t){this[T]=t}get m23(){return this[S]}set m23(t){this[S]=t}get m33(){return this[L]}set m33(t){this[L]=t}debug(t="Mat4"){const e=r([this.m00,this.m01,this.m02,this.m03]),n=r([this.m10,this.m11,this.m12,this.m13]),i=r([this.m20,this.m21,this.m22,this.m23]),s=r([this.m30,this.m31,this.m32,this.m33]);console.log(t),console.log("   ",e.join(" | ")),console.log("   ",n.join(" | ")),console.log("   ",i.join(" | ")),console.log("   ",s.join(" | "))}}const g=0,A=1,m=2,p=3,E=4,b=5,x=6,y=7,v=8,C=9,R=10,_=11,w=12,T=13,S=14,L=15;var O=n(304);class B extends Float32Array{constructor(t=1,e=0,n=0,i=0,s=1,r=0,o=0,a=0,h=1){if("number"==typeof t&&"number"==typeof e&&"number"==typeof n)super([t,e,n,i,s,r,o,a,h]);else if((t instanceof l||t instanceof u)&&(e instanceof l||e instanceof u)&&(n instanceof l||n instanceof u)){const i=t,s=e,r=n;super([i.x,i.y,i.z,s.x,s.y,s.z,r.x,r.y,r.z])}else if(t instanceof B){const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}else{if(!(t instanceof f))throw console.error("[TgdMat3]",arguments),new Error("Invalid TgdMat3 initialization!");{const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}}}multiply(t){return O.lw(this,this,t),this}transpose(){let t=this.m10;return this.m10=this.m01,this.m01=t,t=this.m20,this.m20=this.m02,this.m02=t,t=this.m21,this.m21=this.m12,this.m12=t,this}fromQuat({x:t,y:e,z:n,w:i}){return O.I0(this,[t,e,n,i]),this}toAxes(t,e,n){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(n)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this[4]*=t,this[5]*=t,this[6]*=t,this[7]*=t,this[8]*=t,this}get m00(){return this[M]}set m00(t){this[M]=t}get m10(){return this[P]}set m10(t){this[P]=t}get m20(){return this[F]}set m20(t){this[F]=t}get m01(){return this[N]}set m01(t){this[N]=t}get m11(){return this[U]}set m11(t){this[U]=t}get m21(){return this[I]}set m21(t){this[I]=t}get m02(){return this[D]}set m02(t){this[D]=t}get m12(){return this[k]}set m12(t){this[k]=t}get m22(){return this[$]}set m22(t){this[$]=t}debug(t="Mat3"){const e=r([this.m00,this.m01,this.m02]),n=r([this.m10,this.m11,this.m12]),i=r([this.m20,this.m21,this.m22]);console.log(t,this.slice()),console.log("   ",e.join(" | ")),console.log("   ",n.join(" | ")),console.log("   ",i.join(" | "))}}const M=0,P=1,F=2,N=3,U=4,I=5,D=6,k=7,$=8;var H=n(156);const W=new l,G=new l,X=new l,z=new B;class j extends u{static fromMatrix(t){const e=new j;return e.fromMatrix(t),e}static fromFace(t){return(new j).face(t)}static fromSlerp(t,e,n){return(new j).fromSlerp(t,e,n)}constructor(t=0,e=0,n=0,i=1){if(Array.isArray(t)){const[e,n,i,s]=t;super(e,n,i,s)}else"number"==typeof t?super(t,e,n,i):super(t)}clone(){return new j(this)}multiply(t){return H.lw(this,this,t),this}fromSlerp(t,e,n){const[i,s,r,o]=t;let a,h,[c,l,u,d]=e,f=i*c+s*l+r*u+o*d;if(f<0&&(f=-f,c=-c,l=-l,u=-u,d=-d),1-f>1e-6){const t=Math.acos(f),e=1/Math.sin(t);a=Math.sin((1-n)*t)*e,h=Math.sin(n*t)*e}else a=1-n,h=n;return this.x=a*i+h*c,this.y=a*s+h*l,this.z=a*r+h*u,this.w=a*o+h*d,this}fromAxesTransposed([t,e,n],[i,s,r],[o,a,h]){return this.fromAxes([t,i,o],[e,s,a],[n,r,h])}fromAxes(t,e,n){const[i,s,r]=n;return H.ml(this,[-i,-s,-r],t,e),this}fromMatrix(t){return H.Gn(this,t),this}rotateAround(t,e){return z.fromQuat(this).toAxes(W,G,X),W.rotateAround(t,e),G.rotateAround(t,e),X.rotateAround(t,e),this.fromAxes(W,G,X)}static rotateAroundX(t){return(new j).rotateAroundX(t)}rotateAroundX(t){return this.rotateAround(l.X,t)}static rotateAroundY(t){return(new j).rotateAroundY(t)}rotateAroundY(t){return this.rotateAround(l.Y,t)}static rotateAroundZ(t){return(new j).rotateAroundZ(t)}rotateAroundZ(t){return this.rotateAround(l.Z,t)}toAxisX(t){const[e,n,i,s]=this,r=e+e,o=n+n,a=i+i,h=n*r,c=n*o,l=i*r,u=i*a,d=s*o,f=s*a;return t.x=1-c-u,t.y=h-f,t.z=l+d,t}toAxisY(t){const[e,n,i,s]=this,r=e+e,o=i+i,a=e*r,h=n*r,c=i*(n+n),l=i*o,u=s*r,d=s*o;return t.x=h+d,t.y=1-a-l,t.z=c-u,t}toAxisZ(t){const{x:e,y:n,z:i,w:s}=this,r=e+e,o=n+n,a=e*r,h=n*o,c=i*r,l=i*o,u=s*r,d=s*o;return t.x=c-d,t.y=l+u,t.z=1-a-h,t}toMatrix(t){const e=new l,n=new l,i=new l;return this.toAxisX(e),this.toAxisY(n),this.toAxisZ(i),t.m00=e.x,t.m01=e.y,t.m02=e.z,t.m10=n.x,t.m11=n.y,t.m12=n.z,t.m20=i.x,t.m21=i.y,t.m22=i.z,t}invert(){return H.B8(this,this),this}face(t="+X+Y+Z"){const[e,n,i,s]=Z[t];return this.x=e,this.y=n,this.z=i,this.w=s,this}}const V=Math.sqrt(2)/2,Y=.5,Z={"-X-Y+Z":[0,0,1,0],"-X-Z-Y":[0,-V,+V,0],"-X+Y-Z":[0,1,0,0],"-X+Z+Y":[0,+V,+V,0],"-Y-X-Z":[+V,-V,0,0],"-Y-Z+X":[+Y,-Y,+Y,-Y],"-Y+X+Z":[0,0,-V,+V],"-Y+Z-X":[+Y,-Y,-Y,+Y],"-Z-X+Y":[+Y,-Y,-Y,-Y],"-Z-Y-X":[-V,0,+V,0],"-Z+X-Y":[+Y,+Y,-Y,+Y],"-Z+Y+X":[0,+V,0,+V],"+X-Y-Z":[1,0,0,0],"+X-Z+Y":[-V,0,0,+V],"+X+Y+Z":[0,0,0,1],"+X+Z-Y":[+V,0,0,+V],"+Y-X+Z":[0,0,+V,+V],"+Y-Z-X":[-Y,-Y,+Y,+Y],"+Y+X-Z":[+V,+V,0,0],"+Y+Z+X":[+Y,+Y,+Y,+Y],"+Z-X-Y":[+Y,-Y,+Y,+Y],"+Z-Y+X":[+V,0,+V,0],"+Z+X+Y":[+Y,+Y,+Y,-Y],"+Z+Y-X":[0,-V,0,+V]};class K{constructor(t){var e,n,i,s;this._matrix=new f(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this._position=new l(0,0,0),this._orientation=new j(0,0,0,1),this._scale=new l(1,1,1),this._distance=0,this.tmpVec3=new l,this._axisX=new l,this._axisY=new l,this._axisZ=new l,this.dirty=!1,t&&(t instanceof K?this.from(t):(this.distance=null!==(e=t.distance)&&void 0!==e?e:this.distance,this.position=null!==(n=t.position)&&void 0!==n?n:this.position,this.orientation=null!==(i=t.orientation)&&void 0!==i?i:this.orientation,this.scale=null!==(s=t.scale)&&void 0!==s?s:this.scale),this.updateMatrix())}clone(){return new K(this)}from(t){var e,n,i,s;return this.position=null!==(e=t.position)&&void 0!==e?e:this.position,this.orientation=null!==(n=t.orientation)&&void 0!==n?n:this.orientation,this.scale=null!==(i=t.scale)&&void 0!==i?i:this.scale,this.distance=null!==(s=t.distance)&&void 0!==s?s:this.distance,this.updateMatrix(),this}fromMatrix(t){return this.matrix.from(t),this.dirty=!1,this}get matrix(){return this.updateIfNeeded(),this._matrix}set matrix(t){this._matrix.from(t),this.dirty=!1}get axisX(){return this.updateIfNeeded(),this._axisX}get axisY(){return this.updateIfNeeded(),this._axisY}get axisZ(){return this.updateIfNeeded(),this._axisZ}updateIfNeeded(){if(!this.dirty)return;const t=this._matrix;d.o1(t,this._orientation,this._position,this._scale),t.toAxisX(this._axisX),t.toAxisY(this._axisY),t.toAxisZ(this._axisZ);const e=this._distance;0!==e&&(this.tmpVec3.reset(0,0,e).applyQuaternion(this._orientation),t.m03+=this.tmpVec3.x,t.m13+=this.tmpVec3.y,t.m23+=this.tmpVec3.z),this.dirty=!1}reset(){return this.orientation.reset(),this.position.reset(),this.scale.reset(),this.dirty=!0,this}get distance(){return this._distance}set distance(t){this._distance=t,this.updateMatrix()}setDistance(t){return this.distance=t,this}get position(){return this.updateMatrix(),this._position}set position(t){this.updateMatrix(),this._position.from(t)}setPosition(t,e,n){return this.updateMatrix(),"number"==typeof t?this._position.reset(t,e,n):this._position.reset(t[0],t[1],t[2]),this}get actualPosition(){const t=this.distance;return 0===t?this.position:this.tmpVec3.from(this.position).addWithScale(this.axisZ,t)}get scale(){return this._scale}set scale(t){this.updateMatrix(),this._scale.from(t)}setScale(t,e,n){var i;return this.updateMatrix(),"number"==typeof t?this._scale.reset(t,null!=e?e:t,null!==(i=null!=n?n:e)&&void 0!==i?i:t):this._scale.reset(t[0],t[1],t[2]),this}get orientation(){return this.updateMatrix(),this._orientation}set orientation(t){this._orientation.from(t),this.updateMatrix()}setOrientation(t,e,n,i){return"number"==typeof t?this._orientation.reset(t,e,n,i):this._orientation.reset(t[0],t[1],t[2],t[3]),this.updateMatrix(),this}setEulerRotation(t,e,n){return H.A6(this._orientation,t,e,n),this.updateMatrix(),this}orbitAroundX(t){return this._orientation.rotateAround(l.X,t),this.updateMatrix(),this}orbitAroundY(t){return this._orientation.rotateAround(l.Y,t),this.updateMatrix(),this}orbitAroundZ(t){return this._orientation.rotateAround(l.Z,t),this.updateMatrix(),this}moveAlongAxes(t,e,n){return this.position.addWithScale(this.axisX,t).addWithScale(this.axisY,e).addWithScale(this.axisZ,n),this.updateMatrix(),this}debug(t="Transfo"){console.log(t),console.log("Distance:",this.distance),this.orientation.debug("Orientation"),this.scale.debug("Scale"),this.position.debug("Position"),this.matrix.debug("Matrix")}updateMatrix(){this.dirty=!0}}class Q extends Float32Array{static fromMix(t,e,n=.5){const i=1-n,s=i*t.x+n*e.x,r=i*t.y+n*e.y;return new Q(s,r)}static distance(t,e){const n=e.x-t.x,i=e.y-t.y;return Math.hypot(n,i)}constructor(t=0,e=0){if(super(2),"number"!=typeof t)return this.x=t[0],void(this.y=t[1]);this.x=t,this.y=e}clone(){return new Q(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this}isEqual(t){const[e,n]=t;return e===this.x&&n===this.y}isClose(t,e=1e-6){const[n,i]=t;return!(Math.abs(n-this.x)>e||Math.abs(i-this.y)>e)}from(t){const[e,n]=t;return this.x=e,this.y=n,this}fromMix(t,e,n){const[i,s]=t,[r,o]=e;return this.reset(h(i,r,n),h(s,o,n))}reset(t,e){return this[0]=t,this[1]=e,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}add(...t){for(const e of t)this[0]+=e.x,this[1]+=e.y;return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this}scale(t){return this[0]*=t,this[1]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]}get size(){return Math.hypot(this[0],this[1])}normalize(){const t=this[0]*this[0]+this[1]*this[1];return 0===t?this:this.scale(1/Math.sqrt(t))}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this}debug(t="vec2"){const{x:e,y:n}=this,i=[e,n].map((t=>t.toFixed(6)));console.log(`${t}:   `,i.join(" | "),"   length:",Math.hypot(e,n))}}class q{constructor(t={}){var e,n,i,s;this._screenWidth=1920,this._screenHeight=1080,this._screenAspectRatio=1920/1080,this._dirtyModelView=!0,this.dirtyModelViewInverse=!0,this._dirtyAxis=!0,this._dirtyProjection=!0,this.dirtyProjectionInverse=!0,this._near=.001,this._far=1/0,this._matrixModelView=new f,this._matrixProjectionInverse=new f,this._zoom=1,this.name=null!==(e=t.name)&&void 0!==e?e:"TgdCamera#"+q.incrementalId++,this._near=null!==(n=t.near)&&void 0!==n?n:.001,this._far=null!==(i=t.far)&&void 0!==i?i:1e6,this.transfo=new K(t.transfo),this.zoom=null!==(s=t.zoom)&&void 0!==s?s:1}getCurrentState(){return{distance:this.transfo.distance,orientation:this.transfo.orientation.clone(),spaceHeightAtTarget:this.spaceHeightAtTarget,position:this.transfo.position.clone(),zoom:this.zoom}}get near(){return this._near}set near(t){t!==this._near&&(this._near=t,this.dirtyProjection=!0)}get far(){return this._far}set far(t){t!==this._far&&(this._far=t,this.dirtyProjection=!0)}get screenAspectRatio(){return this._screenAspectRatio}get screenWidth(){return this._screenWidth}set screenWidth(t){t!==this._screenWidth&&(this._screenWidth=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get screenHeight(){return this._screenHeight}set screenHeight(t){t!==this._screenHeight&&(this._screenHeight=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get spaceHeightAtTarget(){return this.getSpaceHeightAtTarget()}set spaceHeightAtTarget(t){this.setSpaceHeightAtTarget(t)}get spaceWidthAtTarget(){return this.screenWidth*this.spaceHeightAtTarget/this.screenHeight}set spaceWidthAtTarget(t){this.setSpaceHeightAtTarget(t*this.screenHeight/this.screenWidth)}from(t){const{zoom:e,screenWidth:n,screenHeight:i}=t;return this.transfo.from(t.transfo),this.zoom=e,this.screenWidth=n,this.screenHeight=i,this.dirtyModelView=!0,this.copyProjectionFrom(t),this}fromTransfo(t){return this.transfo.from(t),this.dirtyModelView=!0,this}get matrixModelView(){return this._matrixModelView.invert(this.transfo.matrix)}get matrixProjectionInverse(){return this.dirtyProjectionInverse&&(this._matrixProjectionInverse.invert(this.matrixProjection),this.dirtyProjectionInverse=!1),this._matrixProjectionInverse}get zoom(){return this._zoom}set zoom(t){this._zoom!==t&&(this._zoom=t,this.transfo.setScale(t,t,t),this.dirtyModelView=!0)}toCode(t){return`// ${null!=t?t:"TgdCamera"}\n// Not implemented yet`}debug(t){const e=`${this.name}: ${null!=t?t:""}`;console.log("TgdCamera",e),console.log("    Distance:",this.transfo.distance),console.log("    Zoom:",this.zoom),this.transfo.orientation.debug("   Orientation"),this.transfo.position.debug("    Target"),this.transfo.actualPosition.debug("    Actual position"),this.matrixModelView.debug("    MatrixModelView"),this.matrixProjection.debug("    MatrixProjection")}get dirtyModelView(){return this._dirtyModelView}set dirtyModelView(t){this._dirtyModelView=t,t&&(this.dirtyModelViewInverse=!0)}get dirtyProjection(){return this._dirtyProjection}set dirtyProjection(t){this._dirtyProjection=t,t&&(this.dirtyProjectionInverse=!0)}}q.incrementalId=1;class J extends q{constructor(t={}){var e;super(t),this._matrixProjection=new f,this._fovy=Math.PI/4,this._ray={origin:new l,direction:new l},this._fovy=null!==(e=t.fovy)&&void 0!==e?e:Math.PI/4}copyProjectionFrom(t){return this.fovy=t.fovy,this.near=t.near,this.far=t.far,this}castRay(t,e){const{transfo:n}=this,{origin:i,direction:s}=this._ray;i.from(n.actualPosition);const r=Math.atan(.5*this.fovy),o=r*this.screenAspectRatio;return s.fromOpposite(n.axisZ).addWithScale(n.axisX,o*t).addWithScale(n.axisY,r*e).normalize(),this._ray}get fovy(){return this._fovy}set fovy(t){t!==this._fovy&&(this._fovy=t,this.dirtyProjection=!0)}get matrixProjection(){return this.updateProjectionIfNeeded(),this._matrixProjection}getSpaceHeightAtTarget(){return 2*Math.tan(.5*this.fovy)*this.transfo.distance}setSpaceHeightAtTarget(t){this.transfo.setDistance(t/(2*Math.tan(.5*this.fovy)))}updateProjectionIfNeeded(){if(!this.dirtyProjection)return;const t=this._fovy,e=this.screenAspectRatio,n=this._near,i=this._far,s=this._matrixProjection;d.fN(s,t,e,n,i),s[0]*=this.zoom,s[5]*=this.zoom,this.dirtyProjection=!0}toCode(t){const e=[];return t&&e.push(`// ${t}`),e.push("const camera = new TgdCameraPerspective({"),this.name&&e.push(`  name: ${JSON.stringify(this.name)},`),e.push(`  fovy: ${this._fovy},`),e.push(`  near: ${this._near},`),e.push(`  far: ${this._far},`),e.push(`  zoom: ${this.zoom},`),e.push("  transfo: {"),e.push(`  distance: ${this.transfo.distance},`),e.push(`    position: ${JSON.stringify([...this.transfo.position])},`),e.push(`    orientation: ${JSON.stringify([...this.transfo.orientation])},`),e.push(`    scale: ${JSON.stringify([...this.transfo.scale])},`),e.push("  }"),e.push("}"),e.join("\n")}}class tt{constructor(){this.listeners=new Set}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}dispatch(t){for(const e of this.listeners)e(t)}}class et{constructor(){this.eventKeyPress=new tt,this.keysDown=new Set,this.keysUp=new Set,this.attached=!1,this.handleKeyDown=t=>{this.keysDown.add(t.key),this.keysUp.delete(t.key)},this.handleKeyUp=t=>{this.keysDown.delete(t.key),this.keysUp.add(t.key),this.eventKeyPress.dispatch(t)},document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),this.attached=!0}detach(){this.attached&&(document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),this.attached=!1)}isUp(...t){return!this.isDown(...t)}isDown(...t){for(const e of t)if(!this.keysDown.has(e))return!1;return!0}hasClicked(t){return!!this.keysUp.has(t)&&(this.keysUp.delete(t),!0)}}class nt{constructor(t){this.canvas=t,this.eventTap=new tt,this.eventMoveStart=new tt,this.eventMove=new tt,this.eventMoveEnd=new tt,this.eventZoom=new tt,this.tapDelay=300,this.controlKeys={altKey:!1,ctrlKey:!1,metaKey:!1,shiftKey:!1},this.start={x:0,y:0,t:0,fingersCount:1},this.current={x:0,y:0,t:0,fingersCount:1},this.previous={x:0,y:0,t:0,fingersCount:1},this.pointerEvent=null,this.handleContextMenu=t=>{t.preventDefault()},this.handleCanvasWheel=t=>{let e=t.deltaX+t.deltaY+t.deltaZ;e=e>0?1:-1,this.eventZoom.dispatch(Object.assign({current:this.getPoint(t),direction:e,preventDefault:()=>t.preventDefault()},this.controlKeys))},this.handlePointerDown=t=>{if(!t.isPrimary)return;this.canvas.setPointerCapture(t.pointerId),t.preventDefault(),t.stopPropagation(),this.pointerEvent=t;const e=this.getPoint(t);this.start=this.current=this.previous=e,this.eventMoveStart.dispatch(Object.assign({start:e,current:e,previous:e},this.controlKeys))},this.handlePointerMove=t=>{t.isPrimary&&this.pointerEvent&&this.canvas&&(this.previous=this.current,this.current=this.getPoint(t),this.eventMove.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)))},this.handlePointerUp=t=>{t.isPrimary&&this.pointerEvent&&(t.preventDefault(),this.current=this.getPoint(t),this.eventMoveEnd.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)),this.pointerEvent=null,t.timeStamp-this.start.t<this.tapDelay&&this.eventTap.dispatch(Object.assign(Object.assign({},this.start),this.controlKeys)))},t.addEventListener("pointerdown",this.handlePointerDown,!0),t.addEventListener("wheel",this.handleCanvasWheel),t.addEventListener("contextmenu",this.handleContextMenu),t.addEventListener("pointermove",this.handlePointerMove),t.addEventListener("pointerup",this.handlePointerUp)}isTouching(t){return!!this.pointerEvent&&(!t||t(this.current))}detach(){const{canvas:t}=this;t&&(t.removeEventListener("pointerdown",this.handlePointerDown),t.removeEventListener("wheel",this.handleCanvasWheel),t.removeEventListener("contextmenu",this.handleContextMenu),t.removeEventListener("pointermove",this.handlePointerMove),t.removeEventListener("pointerup",this.handlePointerUp))}getPoint(t){this.controlKeys={altKey:t.altKey||2===t.buttons,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey};const{left:e,top:n,width:i,height:s}=this.canvas.getBoundingClientRect();return{x:2*((t.clientX-e)/i-.5),y:-2*((t.clientY-n)/s-.5),t:t.timeStamp,fingersCount:1}}}class it{constructor(t){this.canvas=t,this._keyboard=null,this._pointer=null}get keyboard(){return this._keyboard||(this._keyboard=new et),this._keyboard}get pointer(){return this._pointer||(this._pointer=new nt(this.canvas)),this._pointer}}class st{constructor(){this.name="Painter/"+st.counter++,this.active=!0}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:null}}}st.log=new class{constructor(){this.level=0,this.lookupTable=new Map}lookup(t,e){var n;if("number"!=typeof e)return JSON.stringify(e);const{lookupTable:i}=this;if(0===i.size)for(const e in t){const n=t[e];"number"==typeof n&&i.set(n,`gl.${e}`)}return null!==(n=i.get(e))&&void 0!==n?n:`gl[${e}]`}call(t,e){const n="  ".repeat(this.level);console.log(`${n}>>>`,t),this.level++;const i=Date.now();try{return e()}catch(t){throw console.error(t),t}finally{this.level--,console.log(`${n}<<<`,t,`(${Date.now()-i} ms)`)}}stateDepth(t){if(console.log("// [State] Depth"),t.getParameter(t.DEPTH_TEST)){console.log("gl.enable( gl.DEPTH_TEST )"),console.log("gl.depthFunc(",this.lookup(t,t.getParameter(t.DEPTH_FUNC)),")"),console.log("gl.depthMask(",this.lookup(t,t.getParameter(t.DEPTH_WRITEMASK)),")");const[e,n]=t.getParameter(t.DEPTH_RANGE);console.log("gl.depthRange(",e,",",n,")")}else console.log("gl.disable( gl.DEPTH_TEST )")}},st.counter=0;class rt extends st{constructor(t=[],{onEnter:e,onExit:n,name:i}={}){super(),this.active=!0,this.onEnter=e,this.onExit=n,this.painters=[...t],this.name=null!=i?i:`Group/${this.name}`}forEachChild(t){for(const[e,n]of this.painters.entries())t(n,e)}has(t){return this.painters.includes(t)}add(...t){for(const e of t)this.painters.push(e)}addFirst(...t){for(let e=t.length-1;e>=0;e--){const n=t[e];this.painters.unshift(n)}}remove(...t){for(const e of t){const t=this.painters.indexOf(e);-1!==t&&(this.painters.splice(t,1),e.delete())}}removeAll(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}delete(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}paint(t,e){var n,i;if(this.active){null===(n=this.onEnter)||void 0===n||n.call(this,t,e);for(const n of this.painters)n.active&&n.paint(t,e);null===(i=this.onExit)||void 0===i||i.call(this,t,e)}}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:this.painters.map((t=>t.debugHierarchy()))}}}function ot(t,e){var n,i;const s=new K(t.transfo).from(e);s.debug(),"number"==typeof e.distance&&(s.distance=e.distance);const r=t.zoom,o=null!==(n=e.zoom)&&void 0!==n?n:r,a=function(t,e,n){const i=t.clone().from({}),s=i.distance,r=i.position.clone(),o=i.scale.clone(),a=i.orientation.clone(),c=t.clone().from(n),l=c.orientation.clone(),u=c.position.clone(),d=c.scale.clone(),f=c.distance;return e=>{t.distance=h(s,f,e),t.position.fromMix(r,u,e),t.scale.fromMix(o,d,e),t.orientation.fromSlerp(a,l,e),t.updateMatrix()}}(t.transfo,0,s),c=t.spaceHeightAtTarget,l=null!==(i=e.spaceHeightAtTarget)&&void 0!==i?i:t.spaceHeightAtTarget;return n=>{a(n),"number"==typeof e.spaceHeightAtTarget&&(t.spaceHeightAtTarget=h(c,l,n)),t.zoom=h(r,o,n)}}function at(t,e=0,n=0){const i=e>0?e:t.length,s=n>0?n:Math.ceil(t.length/i),{canvas:r,ctx:o}=function(t,e,n){const i=document.createElement("canvas");i.width=t,i.height=e;const s=i.getContext("2d",n);if(!s)throw new Error("Unable to create 2D context!");return{canvas:i,ctx:s}}(i,s);let a=0;for(let e=0;e<s;e++)for(let n=0;n<i;n++)o.fillStyle=t[a%t.length],o.fillRect(n,e,1,1),a++;return r}function ht(t){return 1-(1-t)*(1-t)}var ct=n(664);const lt={index:"number",texCoord:["?","number"]};var ut,dt,ft,gt,At,mt,pt;Object.assign(Object.assign({},lt),{scale:["?","number"]}),Object.assign(Object.assign({},lt),{strength:["?","number"]}),function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(ut||(ut={})),function(t){t[t.FUNC_ADD=WebGL2RenderingContext.FUNC_ADD]="FUNC_ADD",t[t.FUNC_SUBTRACT=WebGL2RenderingContext.FUNC_SUBTRACT]="FUNC_SUBTRACT",t[t.FUNC_REVERSE_SUBTRACT=WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT]="FUNC_REVERSE_SUBTRACT",t[t.MIN=WebGL2RenderingContext.MIN]="MIN",t[t.MAX=WebGL2RenderingContext.MAX]="MAX"}(dt||(dt={})),function(t){t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.ONE=WebGL2RenderingContext.ONE]="ONE",t[t.SRC_COLOR=WebGL2RenderingContext.SRC_COLOR]="SRC_COLOR",t[t.ONE_MINUS_SRC_COLOR=WebGL2RenderingContext.ONE_MINUS_SRC_COLOR]="ONE_MINUS_SRC_COLOR",t[t.DST_COLOR=WebGL2RenderingContext.DST_COLOR]="DST_COLOR",t[t.ONE_MINUS_DST_COLOR=WebGL2RenderingContext.ONE_MINUS_DST_COLOR]="ONE_MINUS_DST_COLOR",t[t.SRC_ALPHA=WebGL2RenderingContext.SRC_ALPHA]="SRC_ALPHA",t[t.ONE_MINUS_SRC_ALPHA=WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA]="ONE_MINUS_SRC_ALPHA",t[t.DST_ALPHA=WebGL2RenderingContext.DST_ALPHA]="DST_ALPHA",t[t.ONE_MINUS_DST_ALPHA=WebGL2RenderingContext.ONE_MINUS_DST_ALPHA]="ONE_MINUS_DST_ALPHA",t[t.CONSTANT_COLOR=WebGL2RenderingContext.CONSTANT_COLOR]="CONSTANT_COLOR",t[t.ONE_MINUS_CONSTANT_COLOR=WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR]="ONE_MINUS_CONSTANT_COLOR",t[t.CONSTANT_ALPHA=WebGL2RenderingContext.CONSTANT_ALPHA]="CONSTANT_ALPHA",t[t.ONE_MINUS_CONSTANT_ALPHA=WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA]="ONE_MINUS_CONSTANT_ALPHA",t[t.SRC_ALPHA_SATURATE=WebGL2RenderingContext.SRC_ALPHA_SATURATE]="SRC_ALPHA_SATURATE"}(ft||(ft={})),function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(gt||(gt={})),function(t){t[t.KEEP=WebGL2RenderingContext.KEEP]="KEEP",t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.REPLACE=WebGL2RenderingContext.REPLACE]="REPLACE",t[t.INCR=WebGL2RenderingContext.INCR]="INCR",t[t.INCR_WRAP=WebGL2RenderingContext.INCR_WRAP]="INCR_WRAP",t[t.DECR=WebGL2RenderingContext.DECR]="DECR",t[t.DECR_WRAP=WebGL2RenderingContext.DECR_WRAP]="DECR_WRAP",t[t.INVERT=WebGL2RenderingContext.INVERT]="INVERT"}(At||(At={})),function(t){t[t.FRONT=WebGL2RenderingContext.FRONT]="FRONT",t[t.BACK=WebGL2RenderingContext.BACK]="BACK",t[t.FRONT_AND_BACK=WebGL2RenderingContext.FRONT_AND_BACK]="FRONT_AND_BACK"}(mt||(mt={})),function(t){t[t.ALPHA=WebGL2RenderingContext.ALPHA]="ALPHA",t[t.RGB=WebGL2RenderingContext.RGB]="RGB",t[t.RGBA=WebGL2RenderingContext.RGBA]="RGBA",t[t.LUMINANCE=WebGL2RenderingContext.LUMINANCE]="LUMINANCE",t[t.LUMINANCE_ALPHA=WebGL2RenderingContext.LUMINANCE_ALPHA]="LUMINANCE_ALPHA"}(pt||(pt={})),dt.FUNC_ADD,ft.SRC_ALPHA,ft.ONE_MINUS_SRC_ALPHA,dt.FUNC_ADD,ft.ONE,ft.ZERO,dt.FUNC_ADD,ft.SRC_ALPHA,ft.ONE_MINUS_SRC_ALPHA,dt.FUNC_ADD,ft.ONE,ft.ZERO,dt.FUNC_ADD,ft.ONE,ft.ONE,dt.FUNC_ADD,ft.ONE,ft.ZERO,dt.FUNC_ADD,ft.ONE,ft.ONE_MINUS_SRC_ALPHA,dt.FUNC_ADD,ft.ONE,ft.ZERO,mt.BACK,mt.BACK,mt.FRONT,ut.ALWAYS,ut.ALWAYS,ut.LESS,ut.LEQUAL,ut.LESS,ut.LEQUAL,gt.ALWAYS,gt.ALWAYS,At.KEEP,At.KEEP,At.KEEP,At.KEEP,At.KEEP,At.KEEP;class Et{constructor(){this.animations=new Map}schedule(t){var e;t.name||(t.name="TgdAnimation#"+Et.counter++);const{action:n,duration:i,easingFunction:s,repeat:r}=t;return this.animations.set(t,{start:-1,delay:null!==(e=t.delay)&&void 0!==e?e:0,duration:i,inverseDuration:1/i,action:s?t=>n(s(t)):n,loop:1,repeat:null!=r?r:1,cancel:()=>this.cancel(t),onEnd:t.onEnd}),t}cancel(t){this.animations.delete(t)}paint(t){var e;if(0===this.animations.size)return!1;for(const n of this.animations.values()){n.start<0&&(n.start=t+n.delay);const i=t-n.start;if(i<0)continue;const s=Math.min(1,n.inverseDuration*i);for(n.action(s);t>n.start+n.duration;){try{null===(e=n.onEnd)||void 0===e||e.call(n)}catch(t){console.error("Animation.onEnd() failed for",n),console.error(t)}n.loop++,n.start+=n.duration}n.loop>n.repeat&&n.cancel()}return!0}}Et.counter=1;class bt{constructor(t,e={}){var n;this.canvas=t,this.options=e,this.eventPaint=new tt,this._camera=new J({transfo:{distance:15},far:100,near:.1,fovy:Math.PI/8,zoom:1}),this._fps=0,this._aspectRatio=1,this._aspectRatioInverse=1,this.paintingIsOngoing=!1,this.paintingIsQueued=!1,this.isPlaying=!1,this.requestAnimationFrame=-1,this.lastTime=-1,this.timeShift=0,this.animationManager=new Et,this.paint=()=>{this.paintingIsOngoing?this.paintingIsQueued=!0:(this.paintingIsQueued=!1,this.paintingIsOngoing=!0,globalThis.cancelAnimationFrame(this.requestAnimationFrame),this.requestAnimationFrame=globalThis.requestAnimationFrame(this.actualPaint))},this.actualPaint=t=>{try{this.timeShift=t-Date.now();const{lastTime:e,gl:n}=this;if(e<0)return this.lastTime=t,void this.paint();const i=t-this.lastTime;this._fps=Math.round(1/i),this.lastTime=t,this._camera.screenWidth=n.drawingBufferWidth,this._camera.screenHeight=n.drawingBufferHeight,this._aspectRatio=n.drawingBufferWidth/n.drawingBufferHeight,this._aspectRatioInverse=1/this._aspectRatio;const s=.001*t,r=.001*i;this.painters.paint(s,r),this.eventPaint.dispatch(this),(this.paintingIsQueued||this.animationManager.paint(s)||this.isPlaying)&&(this.paintingIsOngoing=!1,this.paint())}catch(t){console.error(t)}finally{this.paintingIsOngoing=!1}};const i=t.getContext("webgl2",e);if(!i)throw new Error("Unable to create a WebGL2 context!");e.enableTextureFloatStorage&&i.getExtension("EXT_color_buffer_float"),this.implementationColorReadFormat=i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT),this.implementationColorReadType=i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE),this.gl=i,this.observer=new ResizeObserver((()=>{const n=t.clientWidth,s=t.clientHeight,{onResize:r}=e;r?r(this,t.clientWidth,t.clientHeight):(t.width=n,t.height=s),i.viewport(0,0,t.width,t.height),this.paint()})),this.observer.observe(t),this.inputs=new it(t),e.camera&&(this._camera=e.camera),this.painters=new rt,this.name=null!==(n=e.name)&&void 0!==n?n:"Context#"+bt.incrementalId++,this.painters.name=this.name,t.style.touchAction="none",this.stateReset()}get fps(){return this._fps}get time(){return Date.now()+this.timeShift}debugHierarchy(){return this.painters.debugHierarchy()}get camera(){return this._camera}set camera(t){t!==this._camera&&(this._camera=t,this.paint())}animSchedule(...t){var e,n;const i=[];let s=0;for(const r of t){const t=r.duration+(null!==(e=r.delay)&&void 0!==e?e:0);r.delay=s+(null!==(n=r.delay)&&void 0!==n?n:0),s+=t,i.push(this.animationManager.schedule(r))}return this.paint(),i}animCancel(t){this.animationManager.cancel(t)}get onEnter(){return this.painters.onEnter}set onEnter(t){this.painters.onEnter=t}get onExit(){return this.painters.onExit}set onExit(t){this.painters.onExit=t}get width(){return this.gl.drawingBufferWidth}get height(){return this.gl.drawingBufferHeight}get aspectRatio(){return this._aspectRatio}get aspectRatioInverse(){return this._aspectRatioInverse}get playing(){return this.isPlaying}set playing(t){t!==this.isPlaying&&(t?this.paint():(this.paintingIsOngoing=!1,this.paintingIsQueued=!1,globalThis.cancelAnimationFrame(this.requestAnimationFrame)),this.isPlaying=t)}play(){this.playing=!0}pause(){this.playing=!1}has(t){return this.painters.has(t)}add(...t){this.painters.add(...t)}addFirst(...t){this.painters.addFirst(...t)}remove(...t){this.painters.remove(...t)}removeAll(){this.painters.removeAll()}takeSnapshot(t){const e=t.getContext("2d");if(!e)throw new Error("[TgdContext.takeSnapshot] We cannot get a 2D context for the target canvas! Maybe it already has another type of context.");const{width:n,height:i}=t,s=function(t,e){const n=document.createElement("canvas");return n.width=t,n.height=e,n}(n,i),r=new bt(s,this.options);this.painters.forEachChild((t=>r.add(t))),r.actualPaint(this.lastTime),r.gl.finish(),e.drawImage(s,0,0)}lookupWebglConstant(t){const{gl:e}=this;for(const n in e)if(e[n]===t)return n;return`Unknown gl[${t}]`}destroy(){this.pause(),this.painters.delete(),this.observer.unobserve(this.canvas)}stateReset(){const{gl:t}=this,e=t.getParameter(t.MAX_VERTEX_ATTRIBS),n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n);for(let n=0;n<e;++n)t.disableVertexAttribArray(n),t.vertexAttribPointer(n,4,t.FLOAT,!1,0,0),t.vertexAttrib1f(n,0);t.deleteBuffer(n);const i=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);for(let e=0;e<i;++e)t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_CUBE_MAP,null),t.bindTexture(t.TEXTURE_2D,null);return t.activeTexture(t.TEXTURE0),t.useProgram(null),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.DITHER),t.disable(t.SCISSOR_TEST),t.blendColor(0,0,0,0),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.clearColor(0,0,0,0),t.clearDepth(1),t.clearStencil(-1),t.colorMask(!0,!0,!0,!0),t.cullFace(t.BACK),t.depthFunc(t.LESS),t.depthMask(!0),t.depthRange(0,1),t.frontFace(t.CCW),t.hint(t.GENERATE_MIPMAP_HINT,t.DONT_CARE),t.lineWidth(1),t.pixelStorei(t.PACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),t.polygonOffset(0,0),t.sampleCoverage(1,!1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilMask(4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),t}}bt.incrementalId=1;class xt{constructor(t,{geo:e,minZoom:n=.001,maxZoom:i=1/0,speedZoom:s=1,speedOrbit:r=1,speedPanning:o=1,inertiaZoom:a=0,inertiaOrbit:h=0,inertiaPanning:c=0,fixedTarget:l=!1,debug:u=!1,onZoomRequest:d=yt}={}){this.context=t,this.id="TgdControllerCameraOrbit-"+xt.counter++,this.eventChange=new tt,this.minZoom=.001,this.maxZoom=1/0,this.speedZoom=1,this.speedOrbit=1,this.speedPanning=1,this.inertiaZoom=0,this.inertiaOrbit=0,this.inertiaPanning=0,this.fixedTarget=!1,this._enabled=!0,this.animOrbit=null,this.disabledUntil=0,this.tmpQuat=new j,this.handleMove=t=>{this.enabled&&!this.animOrbit&&this.actualMove(t)},this.actualMove=t=>{if(t.current.t-t.previous.t<=0)return;const{context:e}=this,{keyboard:n}=e.inputs;if(t.altKey||2===t.current.fingersCount)return this.handlePan(t);if(this.geo){const e=n.isDown("Shift")?.2:2,i=n.isDown("x")?0:e*(t.previous.x-t.current.x),s=n.isDown("y")?0:e*(t.previous.y-t.current.y),r=this.geo.lng+i,o=this.geo.lat+s;this.orbitGeo(o,r)}else{if(n.isDown("z"))return this.handleRotateAroundZ(t);this.orbit(t.current.x-t.previous.x,t.current.y-t.previous.y,t.shiftKey)}},this.handleMoveStart=()=>{if(!this.enabled)return;const{animOrbit:t,context:e}=this;t&&(e.animCancel(t),this.animOrbit=null)},this.handleMoveEnd=t=>{if(!this.enabled)return;const{context:e,inertiaOrbit:n}=this;if(n>0){const i=1/(t.current.t-t.previous.t),s=i*(t.current.x-t.previous.x),r=i*(t.current.y-t.previous.y),o=structuredClone(t);o.current.t=Date.now(),this.animOrbit={duration:.001*n,action:t=>{o.previous.t=o.current.t,o.previous.x=o.current.x,o.previous.y=o.current.y,o.previous.fingersCount=o.current.fingersCount,o.current.t=Date.now();const e=(1-t)*(o.current.t-o.previous.t);o.current.x+=e*s,o.current.y+=e*r,this.actualMove(o)},easingFunction:ht},e.animSchedule(this.animOrbit)}},this.handleZoom=t=>{if(!this.enabled||0===this.speedZoom||!this.onZoomRequest({altKey:t.altKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey,x:t.current.x,y:t.current.y}))return;const{context:e}=this,{camera:n}=e;let i=.1*this.speedZoom;this.context.inputs.keyboard.isDown("Shift")&&(i*=.1);const s=-t.direction*i;n.transfo.distance=Math.max(0,n.transfo.distance+s),t.preventDefault(),this.fireZoomChange()},this.geo=void 0,e&&(this.geo=Object.assign({lat:0,lng:0,minLat:-Math.PI/2,maxLat:+Math.PI/2,minLng:-Number.MAX_VALUE,maxLng:+Number.MAX_VALUE},e)),this.cameraInitialState=t.camera.getCurrentState();const{inputs:f}=t;f.pointer.eventMoveStart.addListener(this.handleMoveStart),f.pointer.eventMoveEnd.addListener(this.handleMoveEnd),f.pointer.eventMove.addListener(this.handleMove),f.pointer.eventZoom.addListener(this.handleZoom),this.speedOrbit=r,this.speedZoom=s,this.speedPanning=o,this.inertiaOrbit=h,this.inertiaZoom=a,this.inertiaPanning=c,this.fixedTarget=l,this.minZoom=n,this.maxZoom=i,this.onZoomRequest=d,this.geo&&this.orbitGeo(this.geo.lat,this.geo.lng),globalThis.setTimeout((()=>t.paint())),u&&t.inputs.keyboard.eventKeyPress.addListener((t=>{"?"===t.key&&console.log(this.context.camera.toCode())}))}get enabled(){return this.context.time>this.disabledUntil&&this._enabled}set enabled(t){this._enabled=t}reset(t,e){const{context:n}=this;this.disableForSomeTime(t),n.animSchedule({action:ot(n.camera,this.cameraInitialState),duration:t,easingFunction:e})}disableForSomeTime(t){this.disabledUntil=Math.max(this.disabledUntil,this.context.time+t)}detach(){const{inputs:t}=this.context;t.pointer.eventMove.removeListener(this.handleMove),t.pointer.eventZoom.removeListener(this.handleZoom)}orbit(t,e,n){const{context:i}=this,{camera:s}=i,{keyboard:r}=i.inputs,o=3*(n?.1:1)*this.speedOrbit,a=t*o,h=e*o;r.isDown("x")||s.transfo.orbitAroundY(a),r.isDown("y")||s.transfo.orbitAroundX(-h),this.fireOrbitChange()}orbitGeo(t,e){const{geo:n}=this;if(!n)return;t=a(t,n.minLat,n.maxLat),n.lat=t,e=a(e,n.minLng,n.maxLng),n.lng=e;const{orientation:i}=this.cameraInitialState,s=vt(t,e),r=vt(t+Math.PI/2,e),o=new l(r).cross(s),h=new B;i.toMatrix(h);const c=new B(o,r,s);c.multiply(h),this.tmpQuat.fromMatrix(c),this.context.camera.transfo.orientation=this.tmpQuat,this.fireOrbitChange()}handlePan(t){const{fixedTarget:e,speedPanning:n,context:i}=this,{camera:s}=i,r=.5*n*(1/s.zoom),o=(t.current.x-t.previous.x)*r*s.spaceWidthAtTarget,a=(t.current.y-t.previous.y)*r*s.spaceHeightAtTarget;e||s.transfo.moveAlongAxes(-o,-a,0),this.fireOrbitChange()}handleRotateAroundZ(t){const{camera:e}=this.context,n=t.previous.x,i=t.previous.y;if(Math.abs(n)+Math.abs(i)===0)return;const s=t.current.x,r=t.current.y;if(Math.abs(s)+Math.abs(r)===0)return;const o=n*s+i*r,a=n*r-i*s,h=Math.atan2(a,o)*this.speedOrbit;e.transfo.orbitAroundZ(h),this.fireOrbitChange()}fireOrbitChange(){this.context.paint(),this.eventChange.dispatch(this.context.camera)}fireZoomChange(){this.context.paint()}}xt.counter=0;const yt=()=>!0;function vt(t,e){const n=Math.cos(t),i=Math.sin(t),s=n*Math.cos(e),r=n*Math.sin(e);return new l(r,i,s)}function Ct(t){if("string"==typeof t)return!0;if(!Array.isArray(t))return!1;for(const e of t)if(!Ct(e))return!1;return!0}function Rt(t,e="",n){if("string"==typeof t)return`${e}${t}`;if(!t)return"";const i=null!=n?n:new Set;if(!Array.isArray(t))return Object.keys(t).map((e=>i.has(e)?null:(i.add(e),`// ${e}\n${t[e]}\n`))).filter((t=>"string"==typeof t)).join("\n");const s=`${e}    `;return t.filter((t=>null!==t)).filter((t=>!Array.isArray(t)||t.length>0)).map((t=>Rt(t,s,i))).join("\n")}function _t(t,e,n="----------------------------------------"){const i=Object.keys(t);return 0===i.length?[]:[`// ${n}`,...i.map((n=>`${e} ${t[n]} ${n};`))]}function wt(t,e){if(Ct(t))return[t];const n=Object.keys(t);if(0===n.length)return[];const i=e?[`// ${e}`]:[];for(const e of n)i.push(t[e],"");return i}class Tt{constructor(t,e){var n;this.gl=t,this.options=e;const i=t.createProgram();if(!i)throw new Error("Unable to create WebGLProgram!");const s=Rt(e.vert),r=this.createShader("VERTEX_SHADER",s);t.attachShader(i,r);const o=Rt(e.frag),a=this.createShader("FRAGMENT_SHADER",o);t.attachShader(i,a);const{transformFeedback:h}=e;if(h){const e=Array.isArray(h)?t.INTERLEAVED_ATTRIBS:t[h.bufferMode],n=Array.isArray(h)?h:h.varyings;t.transformFeedbackVaryings(i,n,e)}if(t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){const e=null!==(n=t.getProgramInfoLog(i))&&void 0!==n?n:"";console.warn(e);const r=Lt(e),a=[Bt("Vertex Shader",s,r),Bt("Fragment Shader",o,r)].join("\n");throw new Error(a)}this.program=i,this.shaders=[r,a],this.uniformsLocations=this.getUniformsLocations(),t.detachShader(i,r),t.deleteShader(r),t.detachShader(i,a),t.deleteShader(a)}toCode({indent:t=""}={}){return["function createProgram(gl: WebGL2RenderingContext) {","  const prg = gl.createProgram()","  const vertexShader = gl.createShader(gl.VERTEX_SHADER)",`  gl.shaderSource(vertexShader, \`${Rt(this.options.vert)}\`)`,"  gl.compileShader(vertexShader)","  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)",`  gl.shaderSource(fragmentShader, \`${Rt(this.options.frag)}\`)`,"  gl.compileShader(fragmentShader)","  gl.attachShader(prg, vertexShader)","  gl.attachShader(prg, fragmentShader)","  gl.linkProgram(prg)","  return prg","}"].map((e=>`${t}${e}`)).join("\n")}hasAttribute(t){const{gl:e,program:n}=this;return e.getAttribLocation(n,t)>=0}getAttribLocation(t){const{gl:e,program:n}=this,i=e.getAttribLocation(n,t);if(i<0)throw new Error(`Attribute "${t}" not found!`);return i}getUniformLocation(t){const{uniformsLocations:e}=this,n=Object.keys(e);if(0===t.length)return console.warn(`Uniform "${t}" has not been found: there is no active uniform in this program!`),0;const i=e[t];return i||console.warn(`No active uniform found with name "${t}"!\nAvailable names are: ${n.join(", ")}.`),i}uniform1f(t,e){const{gl:n}=this;n.uniform1f(this.getUniformLocation(t),e)}uniform2f(t,e,n){const{gl:i}=this;i.uniform2f(this.getUniformLocation(t),e,n)}uniform3f(t,e,n,i){const{gl:s}=this;s.uniform3f(this.getUniformLocation(t),e,n,i)}uniform3fv(t,e){const{gl:n}=this;n.uniform3fv(this.getUniformLocation(t),e)}uniform4f(t,e,n,i,s){const{gl:r}=this;r.uniform4f(this.getUniformLocation(t),e,n,i,s)}uniform4fv(t,e){const{gl:n}=this;n.uniform4fv(this.getUniformLocation(t),e)}uniform1i(t,e){const{gl:n}=this;n.uniform1i(this.getUniformLocation(t),e)}uniform2i(t,e,n){const{gl:i}=this;i.uniform2i(this.getUniformLocation(t),e,n)}uniform3i(t,e,n,i){const{gl:s}=this;s.uniform3i(this.getUniformLocation(t),e,n,i)}uniform4i(t,e,n,i,s){const{gl:r}=this;r.uniform4i(this.getUniformLocation(t),e,n,i,s)}uniform1ui(t,e){const{gl:n}=this;n.uniform1ui(this.getUniformLocation(t),e)}uniform2ui(t,e,n){const{gl:i}=this;i.uniform2ui(this.getUniformLocation(t),e,n)}uniform3ui(t,e,n,i){const{gl:s}=this;s.uniform3ui(this.getUniformLocation(t),e,n,i)}uniform4ui(t,e,n,i,s){const{gl:r}=this;r.uniform4ui(this.getUniformLocation(t),e,n,i,s)}uniformMatrix3fv(t,e){const{gl:n}=this;n.uniformMatrix3fv(this.getUniformLocation(t),!1,e)}uniformMatrix4fv(t,e){const{gl:n}=this;n.uniformMatrix4fv(this.getUniformLocation(t),!1,e)}use(){const{gl:t,program:e}=this;t.useProgram(e)}delete(){const{gl:t}=this;for(const e of this.shaders)t.deleteShader(e);t.deleteProgram(this.program)}debug(t="TgdProgram"){console.log(t);const{options:e}=this;Bt("Vertex Shader",Rt(e.vert)),Bt("Fragment Shader",Rt(e.frag))}createShader(t,e){const{gl:n}=this,i=n.createShader(n[t]);if(!i)throw new Error(`Unable to create a WebGLShader of type "${t}"!`);n.shaderSource(i,e),n.compileShader(i);const s=n.getShaderInfoLog(i);if(s){console.error(`Error in ${t} code:`,s);const n=Lt(s);throw new Error(Bt(t,e,n))}return i}getUniformsLocations(){const{gl:t,program:e}=this,n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);if("number"!=typeof n)throw new Error("Unable to get the number of uniforms in a WebGLProgram!");const i={};for(let s=0;s<n;s++){const n=t.getActiveUniform(e,s);if(!n)continue;const r=t.getUniformLocation(e,n.name);if(null===r)throw new Error(`Unable to get location for uniform "${n.name}"!`);i[n.name]=r}return i}}const St=/^ERROR:[ \t]+([0-9]+):([0-9]+):/g;function Lt(t){const e=[],n=[];for(const i of t.split("\n")){St.lastIndex=-1;const t=St.exec(i);t&&(e.push(Number.parseInt(t[2],10)),n.push(i.slice(t[0].length).trim()))}return{lines:e,messages:n}}function Ot(t,e=!1){return`color:#fff;background:${t};font-family:monospace;font-size:80%;font-weight:${e?"bolder":"100"};margin:0;color:${e?"#777":"#fff"}`}function Bt(t,e,n){const{lines:i=[],messages:s=[]}=null!=n?n:{},r=[t],o=[`%c${t}`],a=["font-weight:bolder;font-size:120%"];let h=!1;for(const[t,n]of e.split("\n").entries()){const e=t+1,c=`${e}`.padStart(5," "),l=i.includes(e)?"#f00":"#000";o.push(`%c${c}  %c${n}`),r.push(`${c}  ${n}`),a.push(Ot(l,!0),Ot(l,!1)),i.includes(e)&&(h=!0,o.push(`%c${s[i.indexOf(e)]}`),r.push(`##### ${s[i.indexOf(e)]}`),a.push("color:#f33;background:#333;font-weight:bold"),console.error())}return console.log(o.join("\n"),...a),h?r.join("\n"):""}class Mt{constructor(t,e={}){var n,i;this.attributesDefinition=t,this.options=e,this.stride=0,this.definitions={},this._data=new ArrayBuffer(0),this._count=0,this.target=null!==(n=e.target)&&void 0!==n?n:"ARRAY_BUFFER",this.usage=null!==(i=e.usage)&&void 0!==i?i:"STATIC_DRAW",this.initialize(t,e)}initialize(t,e={}){var n;for(const e of Object.keys(t)){const n=t[e];this.attributesDefinition[e]=n}const i=null!==(n=e.divisor)&&void 0!==n?n:0;let s=0;const r={},o={};for(const e of Object.keys(t)){r[e]=new ArrayBuffer(0);const n={dimension:Pt[t[e]],byteOffset:s,bytesPerElement:Float32Array.BYTES_PER_ELEMENT,divisor:i,getter:(t,e)=>(e>=t.byteLength&&(e%=t.byteLength),t.getFloat32(e,!0)),setter(t,e,n){t.setFloat32(e,n,!0)}};o[e]=n,s+=n.bytesPerElement*n.dimension}this.definitions=o,this.stride=s,this._data=Ft(this._data,this.count*this.stride)}assertAttribType(t,...e){const n=this.attributesDefinition[t];if(!n)throw new Error(`Attribute "${t}" does not exist! Available names are: ${Object.keys(this.attributesDefinition).join(", ")}.`);if(!e.includes(n))throw new Error(`Attribute "${t}" is of type "${n}", which is not ${e.join(" nor ")}!`);return this}addAttributes(t){const e=this.clone();for(const e of Object.keys(t)){const n=this.attributesDefinition[e],i=t[e];if(n&&n!==i)throw new Error(`It is not allowed to change the type of attribute "${e}" from "${n}" to "${i}"! Prefer removing the attribute first.`)}this.initialize(Object.assign(Object.assign({},this.attributesDefinition),t),this.options);const n=this;n.count=e.count;for(const t of e.attributesNames)try{const{get:i}=e.getAttribAccessor(t),{set:s}=n.getAttribAccessor(t);for(let n=0;n<e.count;n++){const e=this.getDef(t);for(let t=0;t<e.dimension;t++)s(i(n,t),n,t)}}catch(e){const n=e instanceof Error?e.message:JSON.stringify(e);throw new Error(`Unable to clone attribute "${t}"!\n${n}`)}}clone(){const t=new Mt(structuredClone(this.attributesDefinition),this.options);t.count=this.count;const e=new DataView(this._data),n=new DataView(t._data);for(let t=0;t<e.byteLength;t++)n.setUint8(t,e.getUint8(t));return t}get data(){return this._data}get count(){return this._count}set count(t){this._count!==t&&(this._count=t,this._data=Ft(this._data,t*this.stride))}get attributesNames(){return Object.keys(this.attributesDefinition)}getAttribAccessor(t){const e=this.getDef(t),n=new DataView(this.data),i=this.stride;return{get(t,s=0){const r=e.byteOffset+i*t+s*e.bytesPerElement;return e.getter(n,r)},set(t,s,r=0){const o=e.byteOffset+i*s+r*e.bytesPerElement;e.setter(n,o,t)}}}set(t,e,{byteOffset:n=0,byteStride:i,first:s=0,count:r=1/0,targetFirst:o=0}={}){const{bytesPerElement:a,dimension:h,byteOffset:c}=this.getDef(t),l=e instanceof ArrayBuffer?e:e.buffer,u=a*h,d=null!=i?i:u;let f=n+d*s;const g=this.stride;let A=o*g+c;this.count=Math.max(this.count,Math.min(r,Math.floor((l.byteLength-f)/d)));const m=l.byteLength-d+1,p=this._data.byteLength+c-g+1,E=new Uint8Array(l),b=new Uint8Array(this._data);let x=0;for(;x<r&&f<m&&A<p;)b.set(E.subarray(f,f+u),A),x++,f+=d,A+=g}getDef(t){const e=this.definitions[t];if(!e)throw new Error(`[TgdDataset] Attribute "${String(t)}" not found in this DataSet!\nAvailable names are: ${Object.keys(this.definitions).map((t=>JSON.stringify(t))).join(", ")}.`);return e}defineAttributes(t,e){let n=0;const{definitions:i}=this;for(const s of Object.keys(i)){const r=i[s];if(e.hasAttribute(s)){const i=e.getAttribLocation(s);t.enableVertexAttribArray(i),t.vertexAttribPointer(i,r.dimension,t.FLOAT,!1,this.stride,n),t.vertexAttribDivisor(i,r.divisor)}n+=r.dimension*r.bytesPerElement}}toCode({indent:t=""}={}){const e=[];let n=0;const{definitions:i}=this;for(const t of Object.keys(i)){const s=i[t],r=`$${t}`;e.push(`const ${r} = gl.getAttribLocation(prg, "${t}")`,`gl.enableVertexAttribArray(${r})`,"gl.vertexAttribPointer(",`  ${r},`,`  ${s.dimension},  // Dimension`,"  gl.FLOAT,","  false,",`  ${this.stride},   // Stride`,`  ${n}   // Offset`,")",`gl.vertexAttribDivisor(${r}, ${s.divisor})`),n+=s.dimension*s.bytesPerElement}return e.map((e=>`${t}${e}`)).join("\n")}debug(t="Dataset"){console.log(t,"   count:",this.count,"   target:",this.target,"   usage:",this.usage);const e=[["Name","type","offset"]];for(const t of Object.keys(this.definitions)){const n=this.definitions[t];e.push([t,this.attributesDefinition[t],`${n.byteOffset}`])}const n=[0,1,2].map((t=>e.reduce(((e,n)=>Math.max(e,n[t].length)),0)));for(const[t,i,s]of e)console.log(`%c${t.padEnd(n[0]+2)}${i.padStart(n[1]+2)}${s.padStart(n[2]+2)}`,"font-family:monospace");for(const t of Object.keys(this.definitions)){const e=this.definitions[t];if(!e)continue;const{get:n}=this.getAttribAccessor(t),i=[];for(let t=0;t<this.count;t++){const s=[];for(let i=0;i<e.dimension;i++)s.push(n(t,i));i.push(s)}console.log(`Attribute "${t}":`,i)}}}const Pt={float:1,vec2:2,vec3:3,vec4:4},Ft="function"==typeof ArrayBuffer.prototype.transfer?function(t,e){return t.transfer(e)}:function(t,e){const n=new ArrayBuffer(null!=e?e:t.byteLength);return new Uint8Array(n).set(new Uint8Array(t)),n};class Nt{constructor(t,e={}){var n,i;this.gl=t;const s=t.createBuffer();if(!s)throw new Error("Unable to create WebGLBuffer!");this._target=null!==(n=null==e?void 0:e.target)&&void 0!==n?n:"ARRAY_BUFFER",this._usage=null!==(i=null==e?void 0:e.usage)&&void 0!==i?i:"STATIC_DRAW",this.buffer=s;const{data:r}=e;r&&this.bufferData(Object.assign(Object.assign({},e),{data:r}))}get target(){return this._target}bind(t){const{gl:e,buffer:n}=this;this._target=null!=t?t:this._target,e.bindBuffer(e[this._target],n)}bufferData(t){var e,n;const{gl:i}=this;this._usage=null!==(e=t.usage)&&void 0!==e?e:this._usage,this._target=null!==(n=t.target)&&void 0!==n?n:this._target,this.bind(t.target),i.bufferData(i[this._target],t.data,i[this._usage])}delete(){const{gl:t,buffer:e}=this;t.deleteBuffer(e)}}class Ut{constructor(t,e,n,i){this.gl=t,this.program=e,this.datasets=n,this.elements=i,this.drawBuffers=[],this.elemBuffer=null;const s=t.createVertexArray();if(!s)throw new Error("Unable to create VertexArrayObject!");if(this.vao=s,e&&n){if(t.bindVertexArray(s),this.drawBuffers=n.map((n=>{const i=new Nt(t,{data:n.data,target:n.target,usage:n.usage});return i.bind(),n.defineAttributes(t,e),i})),i){const e=new Nt(t,{data:i,target:"ELEMENT_ARRAY_BUFFER"});e.bind(),this.elemBuffer=e}t.bindVertexArray(null)}}getBuffer(t){return this.drawBuffers[t]}toCode({indent:t=""}={}){var e;const n=["function createVAO(","  gl: WebGL2RenderingContext,",`  prg: WebGLProgram${null===(e=this.datasets)||void 0===e?void 0:e.map(((t,e)=>`, data${e}: ArrayBuffer`)).join("")}`,") {","  const vao = gl.createVertexArray()","  gl.bindVertexArray(vao)"];if(this.datasets)for(const[e,i]of this.datasets.entries())n.push(`  const buff${e} = gl.createBuffer()`,`  gl.bindBuffer(gl.${i.target}, buff${e})`,`  gl.bufferData(gl.${i.target}, data${e}, gl.${i.usage})`,i.toCode({indent:`${t}  `}));return n.push("  return vao","}"),n.map((e=>`${t}${e}`)).join("\n")}debug(t="TgdVertexArray"){if(console.log(t),this.program&&this.program.debug(),this.datasets)for(const[t,e]of this.datasets.entries())e.debug(`   Dataset #${t}`);this.elements&&console.log("Elements:",this.elements)}bind(){this.gl.bindVertexArray(this.vao)}unbind(){this.gl.bindVertexArray(null)}delete(){const{gl:t,vao:e,drawBuffers:n,elemBuffer:i}=this;t.deleteVertexArray(e);for(const t of n)t.delete();i&&i.delete()}}class It{constructor({precision:t="highp",uniforms:e={},attributes:n={},varying:i={},functions:s={},mainCode:r=[]}={}){this.precision=t,this.uniforms=e,this.attributes=n,this.varying=i,this.functions=s,this.mainCode=r}get code(){return Rt(["#version 300 es",`precision ${this.precision} float;`,..._t(this.uniforms,"uniform"),..._t(this.attributes,"in"),..._t(this.varying,"out"),...wt(this.functions),"","void main() {",this.mainCode,"}"])}}class Dt{constructor({precision:t="highp",uniforms:e={},outputs:n={FragColor:"vec4"},varying:i={},functions:s={},mainCode:r=["FragColor = vec4(1, 0.667, 0, 1);"]}={}){this.precision="mediump",this.precision=t,this.uniforms=e,this.outputs=n,this.varying=i,this.functions=s,this.mainCode=r}get code(){return Rt(["#version 300 es",`precision ${this.precision} float;`,..._t(this.uniforms,"uniform"),..._t(this.varying,"in"),..._t(this.outputs,"out"),...wt(this.functions),"","void main() {",this.mainCode,"}"])}}class kt extends rt{constructor(t,e){super(e.children),this.context=t,this.options=e,this.dirty=!0,this._width=0,this._height=0,this._framebuffer=null,this._depthBuffer=null,this._stencilBuffer=null;const{textureColor0:n,textureColor1:i,textureColor2:s,textureColor3:r}=e;n||i||s||r||console.error("[TgdPainterFramebuffer] You gave no color texture in the constructor: nothing will be rendered!"),this.textureColor0=n,this.textureColor1=i,this.textureColor2=s,this.textureColor3=r,this.textureDepth=e.textureDepth,this.onEnter=e.onEnter,this.onExit=e.onExit;const{gl:o}=this.context;this.drawBuffers=[this.textureColor0?o.COLOR_ATTACHMENT0:o.NONE,this.textureColor1?o.COLOR_ATTACHMENT1:o.NONE,this.textureColor2?o.COLOR_ATTACHMENT2:o.NONE,this.textureColor3?o.COLOR_ATTACHMENT3:o.NONE]}get width(){return this._width}set width(t){this._width!==t&&(this._width=t,this.dirty=!0)}get height(){return this._height}set height(t){this._height!==t&&(this._height=t,this.dirty=!0)}updateTextureForColor(t,e){if(!t)return;const{context:n,width:i,height:s}=this,{gl:r}=n;t.resize(i,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+e,r.TEXTURE_2D,t.glTexture,0)}createTextureForDepth(){const t=this.textureDepth;if(!t)return;const{context:e,width:n,height:i}=this,{gl:s}=e;t.resize(n,i),s.framebufferTexture2D(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.TEXTURE_2D,t.glTexture,0)}createDepthBuffer(t){if(!1===this.options.depthBuffer)return;const{width:e,height:n}=this,i=t.createRenderbuffer();if(!i)throw new Error("Unable to create WebGLRenderBuffer for depth!");this._depthBuffer=i,t.bindRenderbuffer(t.RENDERBUFFER,i),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,e,n),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,i)}createStencilBuffer(t){if(!1!==this.options.stencilBuffer){const{width:e,height:n}=this,i=t.createRenderbuffer();if(!i)throw new Error("Unable to create WebGLRenderBuffer for stencil!");this._stencilBuffer=i,t.bindRenderbuffer(t.RENDERBUFFER,i),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,e,n),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,i)}}createFramebufferIfNeeded(){if(!this.dirty)return;const{context:t}=this,{gl:e}=t;this.delete(),this._framebuffer=function(t){const e=t.createFramebuffer();if(!e)throw new Error("Unable to create a WebGLFramebuffer!");return e}(e),e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer),this.updateTextureForColor(this.textureColor0,0),this.updateTextureForColor(this.textureColor1,1),this.updateTextureForColor(this.textureColor2,2),this.updateTextureForColor(this.textureColor3,3),this.createTextureForDepth(),this.createDepthBuffer(e),this.createStencilBuffer(e);const n=e.checkFramebufferStatus(e.FRAMEBUFFER);n!==e.FRAMEBUFFER_COMPLETE&&console.error(`Your Framebuffer is incomplete: ${i(n)}!`),this.dirty=!1}paint(t,e){const{context:n,options:i}=this,{gl:s}=n,{viewportMatchingScale:r=1}=i;this.width=Math.round(n.width*r),this.height=Math.round(n.height*r),this.createFramebufferIfNeeded(),s.bindFramebuffer(s.FRAMEBUFFER,this._framebuffer),s.drawBuffers(this.drawBuffers),super.paint(t,e),s.bindFramebuffer(s.FRAMEBUFFER,null)}delete(){const{context:t,_framebuffer:e,_depthBuffer:n,_stencilBuffer:i}=this,{gl:s}=t;e&&(s.deleteFramebuffer(e),this._framebuffer=null),n&&(s.deleteRenderbuffer(n),this._depthBuffer=null),i&&(s.deleteRenderbuffer(i),this._stencilBuffer=null)}}function $t(t){return(0,ct.sH)(this,void 0,void 0,(function*(){return new Promise((e=>{const n=new Image;n.addEventListener("load",(()=>e(n))),n.addEventListener("error",(()=>{console.error("Unable to load image:",t),e(null)})),n.src=t}))}))}class Ht{constructor(t,e){this.context=t,this.eventChange=new tt,this._texture=null,this._width=-1,this._height=-1,this.params={magFilter:"LINEAR",minFilter:"LINEAR",wrapS:"REPEAT",wrapT:"REPEAT",wrapR:"REPEAT"};const{gl:n}=t;this.gl=n,this.name="Texture2D/"+Ht.counter++,this.storage=Object.assign({width:0,height:0,internalFormat:"RGBA8",levels:1,flipY:!1,premultipliedAlpha:!1},e);const i=null==e?void 0:e.width,s=null==e?void 0:e.height;"number"==typeof i&&"number"==typeof s?this.resize(i,s):this.createTexture()}delete(){this._texture&&this.gl.deleteTexture(this._texture),this._texture=null}get width(){return this._width}get height(){return this._height}createTexture(){this.delete();const t=this.gl.createTexture();if(!t)throw new Error("Unable to create a WebGLTexture!");const{gl:e}=this;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,this.storage.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.storage.premultipliedAlpha),this._texture=t,this.setParams(this.params)}resize(t,e){if(t===this.width&&e===this.height)return;const{gl:n,storage:i}=this;this.createTexture(),this._width=t,this._height=e,i.width=t,i.height=e,this.bind(),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,this.storage.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.storage.premultipliedAlpha);const{internalFormat:s,levels:r}=this.storage;if(s.startsWith("COMPRESSED_")&&!n.getExtension("WEBGL_compressed_texture_etc"))throw new Error('Your browser does not support extension "WEBGL_compressed_texture_etc" on this device!');n.texStorage2D(n.TEXTURE_2D,r,n[s],t,e),this.checkError()}checkError(){const{gl:t}=this,e=t.getError();e!==t.NO_ERROR&&console.error(`[TgdTexture2D::${this.name}] Error:`,i(e))}get glTexture(){if(this._texture)return this._texture;throw new Error(`Texture "${this.name}" has been deleted!`)}bind(){this.gl.bindTexture(this.gl.TEXTURE_2D,this.glTexture)}loadBitmap(t,e={}){var n,i,s,r;if(!t)return this;if("string"==typeof t)return this.loadBitmap($t(t),e);if(!((r=t)instanceof ImageData||r instanceof HTMLImageElement||r instanceof HTMLCanvasElement||r instanceof HTMLVideoElement||r instanceof ImageBitmap))return t.then((t=>this.loadBitmap(t))).catch((t=>console.error("Unable to load texture BMP:",t))),this;const{storage:o,gl:a}=this,{level:h=0}=e;return this._width=t.width,this._height=t.height,this.bind(),a.texImage2D(a.TEXTURE_2D,h,a[o.internalFormat],a[function(t){for(const[e,n]of Wt)if(n.has(t))return e;throw new Error(`There is no compatible format for internalFormat "${t}" and type "UNSIGNED_BYTE"!`)}(o.internalFormat)],a.UNSIGNED_BYTE,t),this.checkError(),e.generateMipmap&&(this.generateMipmap(),this.checkError()),null===(i=(n=this.context).paint)||void 0===i||i.call(n),null===(s=e.onLoad)||void 0===s||s.call(e),this.eventChange.dispatch(this),this}loadData(t,e){const{level:n=0,width:i,height:s,internalFormat:r="RGB",format:o="RGB"}=e,{gl:a}=this;return this.bind(),a.texImage2D(a.TEXTURE_2D,n,a[r],i,s,0,a[o],a.UNSIGNED_BYTE,t),this.checkError(),this.eventChange.dispatch(this),this}activate(t,e,n){const{gl:i}=this;return i.activeTexture(i.TEXTURE0+t),this.bind(),e&&n&&e.uniform1i(n,t),this}generateMipmap(){const{gl:t}=this;return this.bind(),t.generateMipmap(t.TEXTURE_2D),this}setParams(t){return this.bind(),function(t,{wrapS:e,wrapT:n,wrapR:i,minFilter:s,magFilter:r}){e&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t[e]),n&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t[n]),i&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_R,t[i]),s&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t[s]),r&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t[r])}(this.gl,t),this.params=Object.assign(Object.assign({},this.params),t),this}set textureBaseLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_BASE_LEVEL,t)}get textureBaseLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_BASE_LEVEL)}set textureMaxLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAX_LEVEL,t)}get textureMaxLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_MAX_LEVEL)}getParameter(t){const{gl:e,glTexture:n}=this;return e.bindTexture(e.TEXTURE_2D,n),e.getTexParameter(e.TEXTURE_2D,e[t])}debug(t){var e;console.log(null!==(e=null!=t?t:this.name)&&void 0!==e?e:"TgdTexture2D","  ",this.width,"×",this.height);const n=["TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_R","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAX_LEVEL","TEXTURE_MAX_LOD","TEXTURE_MIN_LOD","TEXTURE_BASE_LEVEL","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS"];for(const t of n){const e=this.getParameter(t);console.log(">",t,"=",e,"number"==typeof e?`(${i(e)})`:" ")}}}Ht.counter=0;const Wt=[["RGB",new Set(["RGB","RGB8","RGB565","SRGB8","RGB8_SNORM","RGB565","R11F_G11F_B10F","RGB9_E5","RGB16F","R11F_G11F_B10F","RGB9_E5","RGB32F","RGB16F","R11F_G11F_B10F","RGB9_E5"])],["RGBA",new Set(["RGBA","RGBA8","RGB5_A1","RGBA4","SRGB8_ALPHA8","RGBA8_SNORM","RGBA4","RGB5_A1","RGB10_A2","RGB5_A1","RGBA16F","RGBA32F","RGBA16F"])],["RG",new Set(["RG8"])],["RED",new Set(["R8"])]];new u(.8,.6,.1,1),new u(.6,1,.9,1),new u(.9,.5,.1,1),new l(1,0,0),new l(0,1,0),new l(0,0,1),new l(-1,0,0),new l(0,-1,0),new l(0,0,-1),Math.E,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,new Q(1,0);var Gt=n(638),Xt=n(898),zt=n(63);class jt{constructor(t,e){this.gl=t,this.screenWidthInverse=2/e.screenWidth,this.screenHeightInverse=2/e.screenHeight,this.texture=e.symbols;const n=new Tt(t,{vert:"// attPosition.x is +1 or -1\n// attPosition.y is +1 or -1\nattribute vec2 attPos;\n// UV coordinates are either 0 or 1.\nattribute vec2 attUV;\n\n// Double of the inverse of screen width/height in pixels.\nuniform vec2 uniScreenSizeInverse;\n// Screen coordinates of the center, in pixels.\n// The center of the screen is at (0,0).\nuniform vec2 uniCenter;\n// Size of the symbol in pixels divided by 256;\nuniform vec2 uniSymbolSize;\n// Position of the top left corner of the symbol,\n// expressed in pixels divided by 256.\nuniform vec2 uniSymbolCorner;\n\nvarying vec2 varUV;\n\nvoid main() {\n    vec2 center = uniCenter * uniScreenSizeInverse;\n    vec2 point = 128.0 * uniSymbolSize * attPos;   // Later, we will add rotation and scale.\n    gl_Position = vec4(center + point * uniScreenSizeInverse, 0.0, 1.0);\n    varUV = uniSymbolCorner + uniSymbolSize * attUV;\n}\n",frag:"precision mediump float;\n\n// The symbols' page.\nuniform sampler2D texSymbols;\nuniform float uniColor;\n\n// Coords of the current pixel. (0,0) is le left bottom one and (1,1) is the upper right one.\nvarying vec2 varUV;\n\nvoid main() {\n  float alpha = texture2D( texSymbols, varUV ).a;\n  if (alpha < 0.5) discard;\n  \n  gl_FragColor = vec4( vec3(uniColor), 1.0);\n//   if (varUV.x < 32.0 / 256.0) {\n//     gl_FragColor = vec4(0, 1, 0, 1);\n//   } else {\n//     gl_FragColor = vec4(1, 0, 0, 1);\n//   }\n}\n"});this.prg=n;const i=new Mt({attPos:"vec2",attUV:"vec2"});i.set("attPos",new Float32Array([-1,1,-1,-1,1,1,1,-1])),i.set("attUV",new Float32Array([0,1,0,0,1,1,1,0]));const s=new Ut(t,n,[i]);this.vao=s}delete(){this.texture.delete(),this.prg.delete(),this.vao.delete()}paint({screenX:t,screenY:e,symbolX:n,symbolY:i,width:s=16,height:r=16,colorIndex:o}){const{gl:a,prg:h,vao:c,texture:l,screenWidthInverse:u,screenHeightInverse:d}=this;h.use(),l.activate(0,h,"texSymbols"),h.uniform1f("uniColor",o/255),h.uniform2f("uniScreenSizeInverse",u,d),h.uniform2f("uniCenter",t,e),h.uniform2f("uniSymbolCorner",n/256,i/256),h.uniform2f("uniSymbolSize",s/256,r/256),c.bind(),a.drawArrays(a.TRIANGLE_STRIP,0,4),c.unbind()}}class Vt extends st{constructor(t,e,n){super(),this.context=t,this.textureRead=e,this.action=n;const i=new It({varying:{varUV:"vec2"},attributes:{attPos:"vec2",attUV:"vec2"},mainCode:["varUV = attUV;","gl_Position = vec4(attPos, 0.0, 1.0);"]}).code,s=new Dt({varying:{varUV:"vec2"},uniforms:{uniTexture:"sampler2D"},outputs:{FragColor:"vec4"},mainCode:["float colorIndex = texture(uniTexture, varUV).r;","FragColor = vec4(colorIndex, 0.0, 0.0, 1.0);"]}).code,r=new Tt(t.gl,{vert:i,frag:s});this.prg=r;const o=new Mt({attPos:"vec2",attUV:"vec2"});o.set("attPos",new Float32Array([-1,1,-1,-1,1,1,1,-1])),o.set("attUV",new Float32Array([0,1,0,0,1,1,1,0]));const a=new Ut(t.gl,r,[o]);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(){const{context:t,prg:e,vao:n,textureRead:i}=this,{gl:s}=t;e.use(),i.activate(0,e,"uniTexture"),n.bind(),s.drawArrays(s.TRIANGLE_STRIP,0,4),n.unbind(),this.action()}}class Yt extends st{constructor(t,e,n,i){super(),this.surface=new Vt(t,e,i),this.framebuffer=new kt(t,{textureColor0:n,children:[this.surface]})}delete(){this.surface.delete(),this.framebuffer.delete()}paint(t,e){this.framebuffer.paint(t,e)}}class Zt{constructor(t){this.context=t,this.action=Kt,this.currentFramebufferIndex=0,this.applyAction=()=>{this.action()};const e=new Ht(t),n=new Ht(t);this.textures=[e,n];for(const t of this.textures)t.setParams({magFilter:"NEAREST",minFilter:"NEAREST",wrapS:"REPEAT",wrapT:"REPEAT"});const i=this.applyAction;this.framebuffers=[new Yt(t,n,e,i),new Yt(t,e,n,i)]}get texture(){return this.textures[this.currentFramebufferIndex]}swap(){this.currentFramebufferIndex=1-this.currentFramebufferIndex}delete(){for(const t of this.textures)t.delete();for(const t of this.framebuffers)t.delete()}paint(t=Kt){this.swap(),this.action=t,this.framebuffers[this.currentFramebufferIndex].paint(0,0)}}const Kt=()=>{};class Qt{constructor(t,e){this.context=t,this.texturePalette=e;const n=new It({varying:{varUV:"vec2"},attributes:{attPos:"vec2",attUV:"vec2"},mainCode:["varUV = attUV;","gl_Position = vec4(attPos, 0.0, 1.0);"]}).code,i=new Dt({varying:{varUV:"vec2"},uniforms:{uniTexture:"sampler2D",uniPalette:"sampler2D"},outputs:{FragColor:"vec4"},mainCode:["vec4 texel = texture(uniTexture, varUV);","float colorIndex = texel.r;","float u = colorIndex + 1.0 / 512.0;","FragColor = texture(uniPalette, vec2(u, 0.5));","if (colorIndex == 0.0) FragColor.a = 0.0;"]}).code,s=new Tt(t.gl,{vert:n,frag:i});this.prg=s;const r=new Mt({attPos:"vec2",attUV:"vec2"});r.set("attPos",new Float32Array([-1,1,-1,-1,1,1,1,-1])),r.set("attUV",new Float32Array([0,0,0,1,1,0,1,1]));const o=new Ut(t.gl,s,[r]);this.vao=o}delete(){this.prg.delete(),this.vao.delete()}paint(t){const{context:e,prg:n,vao:i,texturePalette:s}=this,{gl:r}=e;n.use(),t.activate(0,n,"uniTexture"),s.activate(1,n,"uniPalette"),i.bind(),r.drawArrays(r.TRIANGLE_STRIP,0,4),i.unbind()}}function qt(t,e,n){return i=>{try{return null==e||e(i),n(i)}catch(e){throw new Error(`Erreur de l'instruction "${t.toUpperCase()}": ${e}`)}}}function Jt(t=1,e=999){return n=>{if((n.length<t||n.length>e)&&t===e){if(0===t)throw new Error("Cette function n'attend aucun argument.");if(1===t)throw new Error("Cette function attend un et un seul argument.");throw new Error(`Cette function attend entre ${t} et ${e} arguments.`)}for(const t of n)if("number"!=typeof t)throw new Error("Tous les arguments de cette fonction doivent être des nombres.")}}function te(t=1,e=999){return n=>{if((n.length<t||n.length>e)&&t===e){if(0===t)throw new Error("Cette function n'attend aucun argument.");if(1===t)throw new Error("Cette function attend un et un seul argument.");throw new Error(`Cette function attend entre ${t} et ${e} arguments.`)}for(const t of n)if("string"!=typeof t)throw new Error("Tous les arguments de cette fonction doivent être des nombres.")}}function ee(t=0,e=999){return n=>{if((n.length<t||n.length>e)&&t===e){if(0===t)throw new Error("Cette function n'attend aucun argument.");if(1===t)throw new Error("Cette function attend un et un seul argument.");throw new Error(`Cette function attend entre ${t} et ${e} arguments.`)}}}const ne=t=>qt("cls",ee(),(()=>{t.paintFB((()=>{t.x=t.TEXT_ORIGIN_X,t.y=t.TEXT_ORIGIN_Y;const{gl:e}=t;e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT)})),t.paint()})),ie=t=>qt("color",Jt(1,1),(([e])=>{t.colorIndex=e})),se=t=>qt("disk",Jt(1,2),(([e,n])=>{t.paintFB((()=>{t.painterDisk.paint(t.screenSpaceX(t.x),t.screenSpaceY(t.y),t.screenSpaceX(e),t.screenSpaceY(null!=n?n:e),t.colorIndex)}))})),re=t=>qt("locate",Jt(2,2),(([e,n])=>{const i=c(Math.floor(e),0,t.TEXT_COLS-1),s=c(Math.floor(n),0,t.TEXT_ROWS-1);t.x=t.TEXT_ORIGIN_X+i*t.CHAR_SIZE,t.y=t.TEXT_ORIGIN_Y+s*t.CHAR_SIZE})),oe=t=>qt("move",Jt(2,2),(([e,n])=>{t.x=e,t.y=n})),ae=t=>qt("pause",Jt(1,1),(([e])=>new Promise((n=>{t.paint(),console.log("Sleeping",e,"seconds..."),globalThis.setTimeout((()=>{console.log("Slept",e,"seconds."),n()}),1e3*e)}))));var he=n(197);function ce(t,e){const n=e.map((t=>(0,he.Kg)(t)?t:JSON.stringify(t))).join("");t.print(n)}const le=t=>qt("print",ee(),(e=>{ce(t,e)})),ue=t=>qt("println",ee(),(e=>{ce(t,e),t.x=t.TEXT_ORIGIN_X,t.y+=t.CHAR_SIZE}));function de(t,e,n){return i=>{try{return null==e||e(i),n(i)}catch(e){throw new Error(`Erreur de la fonction "${t.toUpperCase()}": ${e}`)}}}const fe=t=>de("ASK",ee(0),(e=>new Promise((n=>{const i=e.map((t=>(0,he.Kg)(t)?t:JSON.stringify(t))).join("");t.print(i),t.paint();let s="";const r=e=>{if(!(e.ctrlKey||e.altKey||e.metaKey))try{const{key:i}=e;if(1===i.length)return s+=i,void t.print(i);if("Enter"===i)return globalThis.document.removeEventListener("keydown",r),t.x=t.TEXT_ORIGIN_X,t.y+=t.CHAR_SIZE,void n(s);console.log("🚀 [input] key =",i)}finally{t.paint()}};globalThis.document.addEventListener("keydown",r)}))));class ge{constructor(t){this.context=t,this.STEPS=128;const e=new It({uniforms:{uniCenter:"vec2",uniRadius:"vec2"},attributes:{attPos:"vec2"},mainCode:["gl_Position = vec4(uniCenter + attPos * uniRadius, 0.0, 1.0);"]}).code,n=new Dt({uniforms:{uniColor:"float"},outputs:{FragColor:"vec4"},mainCode:["FragColor = vec4(uniColor, 0.0, 0.0, 1.0);"]}).code,i=new Tt(t.gl,{vert:e,frag:n});this.prg=i;const s=[0,0],r=2*Math.PI/this.STEPS;for(let t=0;t<this.STEPS;t++){const e=r*t,n=Math.cos(e),i=Math.sin(e);s.push(n,i)}s.push(1,0);const o=new Mt({attPos:"vec2"});o.set("attPos",new Float32Array(s));const a=new Ut(t.gl,i,[o]);this.vao=a}delete(){this.prg.delete(),this.vao.delete()}paint(t,e,n,i,s){const{context:r,prg:o,vao:a}=this,{gl:h}=r;o.use(),o.uniform2f("uniCenter",t,e),o.uniform2f("uniRadius",n,i),o.uniform1f("uniColor",s/255),a.bind(),h.drawArrays(h.TRIANGLE_FAN,0,this.STEPS+2),a.unbind()}}const Ae=()=>{};class me extends st{constructor(t,e){super(),this.id="Kernel#"+me.ID++,this.LAYERS_COUNT=1,this.WIDTH=640,this.HEIGHT=480,this.CHAR_SIZE=16,this.TEXT_COLS=Math.floor(this.WIDTH/this.CHAR_SIZE),this.TEXT_ROWS=Math.floor(this.HEIGHT/this.CHAR_SIZE),this.TEXT_ORIGIN_X=(this.CHAR_SIZE-this.WIDTH)/2,this.TEXT_ORIGIN_Y=(this.CHAR_SIZE-this.HEIGHT)/2,this.x=(this.CHAR_SIZE-this.WIDTH)/2,this.y=(this.CHAR_SIZE-this.HEIGHT)/2,this.colorIndex=24,this.variables=new Map,this.layers=[],this.canvasPalette=at(["#000000","#000080","#0000FF","#800000","#800080","#8000FF","#FF0000","#FF0080","#FF00FF","#008000","#008080","#0080FF","#808000","#808080","#8080FF","#FF8000","#FF8080","#FF80FF","#00FF00","#00FF80","#00FFFF","#80FF00","#80FF80","#80FFFF","#FFFF00","#FFFF80","#FFFFFF","#000000"],256,1),this._currentLayerindex=0,t.width=this.WIDTH,t.height=this.HEIGHT;const n=new bt(t,{alpha:!0,antialias:!1,preserveDrawingBuffer:!0,onResize(t,e,n){}});this.context=n,this.painterDisk=new ge(n),this.texturePalette=new Ht(n).loadBitmap(this.canvasPalette),this.colorizer=new Qt(n,this.texturePalette),this.textureSymbols=new Ht(n).setParams({magFilter:"LINEAR",minFilter:"LINEAR",wrapS:"MIRRORED_REPEAT",wrapT:"MIRRORED_REPEAT"}).loadBitmap(e);for(let t=0;t<this.LAYERS_COUNT;t++)this.layers.push(new Zt(n));var i;n.add(this),n.paint(),this.painterSymbols=new jt(n.gl,{symbols:this.textureSymbols,screenWidth:this.WIDTH,screenHeight:this.HEIGHT}),this.instructions={CLS:ne(i=this),COLOR:ie(i),DISK:se(i),LOCATE:re(i),MOVE:oe(i),PAUSE:ae(i),PRINT:le(i),PRINTLN:ue(i)},this.functions=(t=>({ABS:de("ABS",Jt(1,1),(([t])=>Math.abs(t))),ASK:fe(t),CHR:de("CHR",Jt(1),(t=>t.map((t=>String.fromCharCode(t))).join(""))),INT:de("INT",te(1,1),(([t])=>Math.round(Number(t)))),LIST:de("LIST",(t=>{const[e]=t;if(2!==t.length||"number"!=typeof e)throw new Error("Cette fonction attends deux arguments: le nombre d'éléments et la valeur initiale de ces éléments.")}),(([t,e])=>new Array(t).fill(e))),MIN:de("MIN",Jt(1),(([t,...e])=>e.reduce(((t,e)=>Math.min(t,e)),t))),MAX:de("MAX",Jt(1),(([t,...e])=>e.reduce(((t,e)=>Math.max(t,e)),t))),NOT:de("NOT",Jt(1,1),(([t])=>0===t?1:0)),RANDOM:de("RANDOM",Jt(1,2),(t=>{const[e,n]=t;return(0,he.Et)(n)?e===n?e:Math.min(e,n)+Math.floor(Math.random()*(Math.abs(n-e)+1)):Math.floor(Math.random()*e)})),RANGE:de("RANGE",Jt(1,3),(t=>{let[e,n,i]=t;(0,he.Et)(n)||(n=e,e=0),(0,he.Et)(i)||(i=1);const s=[];for(let t=e;n>0;n--)s.push(t),t+=i;return s})),RGB:de("RGB",Jt(3,3),(t=>{const[e,n,i]=t;return 256*c(Math.round(e),0,15)+16*c(Math.round(n),0,15)+c(Math.round(i),0,15)})),TIME:de("TIME",Jt(0,0),(()=>Date.now()))}))(this)}get gl(){return this.context.gl}screenSpaceX(t){return 2*t/this.WIDTH}screenSpaceY(t){return 2*t/this.HEIGHT}executeInstruction(t,e){try{const n=this.instructions[t];if(!n)throw new Error(`L'instruction "${t.toUpperCase()}" n'existe pas.\nLes instructions disponibles sont: ${Object.keys(this.instructions).sort().join(", ")}.`);return n(e)}catch(e){const n=e instanceof Error?e.message:JSON.stringify(e);throw new Error(`Erreur de l'instruction ${t.toUpperCase()} :\n${n}`)}}executeFunction(t,e){try{const n=this.functions[t];if(!n)throw new Error(`La fonction "${t.toUpperCase()}" n'existe pas.\nLes fonctions disponibles sont: ${Object.keys(this.functions).sort().join(", ")}.`);return n(e)}catch(e){const n=e instanceof Error?e.message:JSON.stringify(e);throw new Error(`Erreur de la fonction ${t.toUpperCase()} :\n${n}`)}}get currentLayerIndex(){return this._currentLayerindex}set currentLayerIndex(t){t=1===this.LAYERS_COUNT?0:c(Math.round(t),0,this.LAYERS_COUNT-1),this._currentLayerindex=t}get layer(){return this.layers[this.currentLayerIndex]}delete(){for(const t of this.layers)t.delete();this.painterDisk.delete(),this.painterSymbols.delete(),this.textureSymbols.delete()}paint(){try{const{context:t,colorizer:e}=this,{gl:n}=t;console.log("PAINT"),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT);for(const t of this.layers)e.paint(t.texture)}catch(t){console.error("Error while painting:",t)}}paintFB(t=Ae){this.layer.paint(t)}print(t){this.paintFB((()=>{for(const e of t.split("")){const t=255&e.charCodeAt(0),n=15&t,i=t-n>>4;this.painterSymbols.paint({screenX:this.x,screenY:this.y,symbolX:n*this.CHAR_SIZE,symbolY:i*this.CHAR_SIZE,colorIndex:this.colorIndex}),this.x+=this.CHAR_SIZE,this.x>=this.WIDTH/2&&(this.x=this.TEXT_ORIGIN_X,this.y+=this.CHAR_SIZE)}}))}getVar(t){var e;if(t=t.toUpperCase(),!this.variables.has(t)){const e=[`La variable $${t.toLocaleLowerCase()} n'existe pas.`],n=Array.from(this.variables.keys()).map((t=>`$${t.toLocaleLowerCase()}`));throw 0===n.length?e.push("Aucune variable n'a encore été créée."):1===n.length?e.push(`La seule variable existante maintenant est ${n[0]}.`):e.push(`Les variables disponibles sont : ${n.join("\n")}`),new Error(e.join("\n"))}return null!==(e=this.variables.get(t))&&void 0!==e?e:0}setVar(t,e){this.variables.set(t.toUpperCase(),e)}debugVariables(){for(const t of this.variables.keys())console.log(t,"=",this.getVar(t))}test(){this.paintFB((()=>{this.painterSymbols.paint({colorIndex:4,screenX:0,screenY:0,symbolX:0,symbolY:0,width:512,height:512})}))}}me.ID=0;var pe=n(23);class Ee{constructor(t){var e;this.element=t,this.currentPage="",pe.xI.use({renderer:{link:t=>`<a href="#" data-href=${JSON.stringify(t.href)}>${t.text}</a>`}}),this.load(null!==(e=globalThis.localStorage.getItem("Basik/help"))&&void 0!==e?e:"main")}load(t){return e=this,n=void 0,s=function*(){const e=yield function(t){return(0,ct.sH)(this,void 0,void 0,(function*(){if(t instanceof File)return yield t.text();try{const e=yield fetch(t);return yield e.text()}catch(t){return console.error(t),null}}))}(`assets/help/${t}.md`);if(!e)return void console.error("Found no page with this id:",t);globalThis.localStorage.setItem("Basik/help",t),this.currentPage=t;const n=yield pe.xI.parse(e,{async:!0,gfm:!0});this.element.innerHTML=n,this.element.scrollTop=0;const i=this.element.querySelectorAll("a[data-href]");for(const t of i){const e=t.getAttribute("data-href");if(!e)continue;const n=this.makeId(e);t.addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation(),this.load(n)}))}const s=this.element.querySelectorAll("img");for(const t of s){const e=t.getAttribute("src");if(!e)continue;const n=`assets/help/${this.makeId(e)}`;t.setAttribute("src",n)}const r=this.element.querySelectorAll("pre");for(const t of r)t.setAttribute("title","Double-clique pour jouter à l'éditeur"),t.addEventListener("dblclick",(()=>{var e;Me().code=(null!==(e=t.textContent)&&void 0!==e?e:"").trim()}))},new((i=void 0)||(i=Promise))((function(t,r){function o(t){try{h(s.next(t))}catch(t){r(t)}}function a(t){try{h(s.throw(t))}catch(t){r(t)}}function h(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,a)}h((s=s.apply(e,n||[])).next())}));var e,n,i,s}makeId(t){const e=this.currentPage.split("/");return e.pop(),e.push(t),e.join("/")}}const be={SPC:/^[ \t]+/g,DOTS:/^\.\.\.[\n\r \t]+/g,COM:/^(REM )[^\n\r]*[\n\r]+/gi,EOL:/^[\n\r]+/g,VAR:/^\$[a-z0-9\._]+/gi,HEX:/^#[0-9a-f]+/gi,NUM:/^-?([0-9]+(\.[0-9]+)?|\.[0-9]+)/g,STR:/^"(\\"|[^"])*"/g,BINOP:/^(and|or|xor|>=|<=|<>|\^|==|[%+*/<>-])/g,EQUAL:/^=/g,PAR_OPEN:/^\(/g,PAR_CLOSE:/^\)/g,BRA_OPEN:/^\{/g,BRA_CLOSE:/^\}/g,SQR_OPEN:/^\[/g,SQR_CLOSE:/^\]/g,COMMA:/^,/g,FOR:/^for(?![a-z0-9])/i,IN:/^in(?![a-z0-9])/i,FUNC:/^[a-z][a-z_]*[0-9]*[ \t\r\n]*\(/i,INST:/^[a-z][a-z_]*[0-9]*/gi,EOF:/^<<EOF>>/},xe=["SPC","DOTS","COM","EOL"];class ye{constructor(t){this._code=t,this._cursor=0,this._token={id:"EOF",val:"",pos:1e100}}get token(){return this._token}get tokenID(){return this.token.id}get tokenCode(){return this._code.slice(this.token.pos)}all(){const t=this._cursor,e=[];for(this._cursor=0;this.hasMoreCode();)this.next(),e.push(structuredClone(this._token));return this._cursor=t,e}hasMoreCode(){return this._cursor<this._code.length-1}fatal(t){var e={pos:this._cursor,code:this._code,msg:t};throw console.error(e,this.token),e}next(){let t=this._code.slice(this._cursor);if(0===t.trimEnd().length)return this._token={id:"EOF",pos:this._cursor,val:""},void(this._cursor+=t.length+1);for(;;){let e=null;for(const n of Object.keys(be)){const i=n,s=be[i];if(!s)continue;s.lastIndex=0;const r=s.exec(t);if(r){e={id:i,val:r[0],pos:this._cursor};break}}if(e||this.fatal(`Je suis tombé sur un caractère qui n'a rien à faire là : "${t.charAt(0)}".`),this._cursor+=e.val.length,!xe.includes(e.id))return void(this._token=e);t=this._code.slice(this._cursor)}}is(...t){return t.includes(this._token.id)}get(...t){if(!t.includes(this._token.id))return null;const e=structuredClone(this._token);return this.next(),e}expect(t,e){(Array.isArray(t)?t:[t]).includes(this._token.id)||this.fatal(e);const n=structuredClone(this._token);return this.next(),n}}function ve(t){return(0,he.Xj)(t,{pos:"number",code:"string",msg:"string"})}function Ce(t,e){const n=[t,`Erreur à partir de : |${e.code.slice(e.pos,e.pos+32)}...|`,e.msg,""];console.log(`%c${e.msg}`,"background: #f00;color: #fff");const i=[];let s=0,r=0,o=1;const a=`${e.code}\n\n`;for(;r<a.length;)if("\n"===a.charAt(r++)){const t=a.slice(s,r).trimEnd();if(i.push([o++,t]),r>e.pos){for(const[t,e]of i.slice(-5))n.push(`${`${t}`.padStart(6," ")}:  ${e}`),console.log(`%c${`${t}`.padStart(6," ")}:  ${e}`,"font-family:monospace");throw console.log(`%c${" ".repeat(9+e.pos-s)}^`,"font-family:monospace"),n.push(`${" ".repeat(9+e.pos-s)}^`),new Error(n.join("\n"))}s=r}throw new Error(n.join("\n"))}const Re={"=":(t,e)=>JSON.stringify(t)===JSON.stringify(e)?1:0,"+":(t,e)=>(0,he.Et)(t)&&(0,he.Et)(e)?t+e:Array.isArray(t)?Array.isArray(e)?[...t,...e]:[...t,e]:Array.isArray(e)?Array.isArray(t)?[...t,...e]:[t,...e]:`${t}${e}`,"-":_e("-",((t,e)=>t-e)),"/":_e("/",((t,e)=>t/e)),"^":_e("^",((t,e)=>Math.pow(t,e))),"%":_e("^",((t,e)=>t%e)),AND:_e("^",((t,e)=>t&e)),OR:_e("^",((t,e)=>t|e)),XOR:_e("^",((t,e)=>t^e)),"*":(t,e)=>{if((0,he.Et)(t)&&(0,he.Et)(e))return t*e;if(Array.isArray(t)||Array.isArray(e))throw new Error("Il est impossible de multiplier des listes !");if((0,he.Kg)(t)&&(0,he.Kg)(e))throw new Error("Il est impossible de multiplier deux chaînes de caractères !");let n=(0,he.Kg)(t)?t:e,i=(0,he.Kg)(e)?t:e;if(0===i)return"";i<0&&(i=-i,n=n.split("").reverse().join(""));const s=Math.floor(i),r=i-s;return`${n.repeat(s)}${n.slice(0,Math.round(r*n.length))}`}};function _e(t,e){return(n,i)=>{if(!(0,he.Et)(n)||!(0,he.Et)(i))throw new Error(`L'opérateur "${t}" ne fonctionne qu'avec des nombres.`);return e(n,i)}}class we{constructor(){this.counter=0,this.labels=new Map,this.links=[]}reset(){this.labels.clear(),this.links.splice(0,this.links.length),this.counter=0}create(t=""){return`:${this.counter++}:${t}`}stick(t,e){this.labels.set(t,e)}link(t,e){this.links.push({cursor:t,label:e})}apply(t){for(const{cursor:e,label:n}of this.links){const i=this.labels.get(n);if(void 0===i)throw Error(`Label not found: ${n}`);t[e].val=i}}getLabelAtCursor(t){for(const[e,n]of this.labels.entries())if(n===t)return e;return""}getLinkAtCursor(t){for(const{label:e,cursor:n}of this.links)if(n===t)return e;return null}getLabelsMaxLength(){let t=0;for(const e of this.labels.keys())t=Math.max(t,e.length);return t}}var Te=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{h(i.next(t))}catch(t){r(t)}}function a(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}))};class Se{constructor(t){this.kernel=t,this.labels=new we,this.bytecode=[],this.stack=[],this.lexer=new ye(""),this.cursor=0,this.code="",this.parseBloc=()=>{if(!this.parseAny(this.parseForIn,this.parseInstruction,this.parseAffectation))return!1;for(;this.parseAny(this.parseForIn,this.parseInstruction,this.parseAffectation););return!0},this.parseForIn=()=>{const{lexer:t}=this;if(!t.get("FOR"))return!1;const e=t.expect("VAR","Il me faut un nom de variable après le mot clef FOR.");this.pushBytecode(e.val),t.expect("IN","Après le nom de variable, il faut le mot clef IN.\nExemple: FOR $i IN $notes"),this.parseExpression()||this.fatal("Je m'attendais à une expression après un FOR ... IN."),this.pushBytecode(0);const n=this.labelCreate(),i=this.labelCreate();return this.labelLink(i),this.labelStick(n),t.expect("BRA_OPEN",["Il faut une accolade ouvrante pour définir un bloc, comme dans cet exemple :","FOR $i IN RANGE(9) {","  PRINTLN($i)","}"].join("\n")),this.pushBytecode(this.$forIn),this.parseBloc(),t.expect("BRA_CLOSE",["Il faut une accolade fermante à la fin d'un bloc, comme dans cet exemple :","FOR $i IN RANGE(9) {","  PRINTLN($i)","}"].join("\n")),this.pushJmp(n),this.labelStick(i),!0},this.parseAffectation=()=>{const t=this.lexer.get("VAR");if(!t)return!1;const e=t.val;return this.pushBytecode(e),this.lexer.expect("EQUAL",`Je m'attendais à voir le signe "=" pour l'affectation de la variable ${e} !`),this.parseExpression(),this.pushBytecode(this.$setVar),!0},this.parseInstruction=()=>{const{lexer:t}=this,e=t.get("FUNC");if(!e)return!1;const n=e.val.slice(0,-1).trim().toUpperCase();let i=0;for(;this.parseExpression()&&(i++,t.get("COMMA")););return t.expect("PAR_CLOSE",`Il manque une parenthèse fermante après les arguments de l'instruction "${n}".`),this.pushBytecode(i,this.$makeArray,n,this.$instruction),!0},this.parseExpression=()=>{if(this.parseAny(this.parseNumber,this.parseVar,this.parseHexa,this.parseString,this.parseExpressionBlock,this.parseFunction)){for(;this.parseBinaryOperator(););return!0}return!1},this.parseFunction=()=>{const{lexer:t}=this,e=t.get("FUNC");if(!e)return!1;const n=e.val.slice(0,-1).trim().toUpperCase();let i=0;for(;this.parseExpression()&&(i++,t.get("COMMA")););return t.expect("PAR_CLOSE",`Il manque une parenthèse fermante après les arguments de la fonction "${n}".`),this.pushBytecode(i,this.$makeArray,n,this.$function),!0},this.parseExpressionBlock=()=>{const{lexer:t}=this;return!!t.get("PAR_OPEN")&&(this.parseExpression()||t.fatal("Il manque une expression après la parenthèse ouvrante."),t.expect("PAR_CLOSE","Il manque une parenthèse fermante ici."),!0)},this.parseBinaryOperator=()=>{const{lexer:t}=this,e=t.get("BINOP");if(!e)return!1;const n=e.val;return this.parseExpression()||t.fatal(`Je m'attendais à une expression après l'opérateur "${t.token.val}" !`),this.pushBytecode(this.makeBinOp(n)),!0},this.parseNumber=()=>{const t=this.lexer.get("NUM");return!!t&&(this.pushBytecode(Number(t.val)),!0)},this.parseString=()=>{const t=this.lexer.get("STR");return!!t&&(this.pushBytecode(t.val.slice(1,-1)),!0)},this.parseHexa=()=>{const t=this.lexer.get("HEX");return!!t&&(this.pushBytecode(Number(`0x${t.val.trim().slice(1)}`)),!0)},this.parseVar=()=>{const t=this.lexer.get("VAR");return!!t&&(this.pushBytecode(t.val,this.$getVar),!0)},this.$jmp=Le("JMP",(()=>{this.cursor=this.popNum()})),this.$setVar=Le("setVar(name, value)",(()=>{const t=this.pop(),e=this.popStr();this.kernel.setVar(e,t)})),this.$getVar=Le("getVar(name)",(()=>{var t;const e=this.popStr();this.stack.push(null!==(t=this.kernel.getVar(e))&&void 0!==t?t:0)})),this.$makeArray=Le("makeArray(count, ...)",(()=>{const t=this.popNum(),e=this.stack.splice(this.stack.length-t,t);this.stack.push(e)})),this.$function=()=>Te(this,void 0,void 0,(function*(){const t=this.popStr(),e=this.popArr(),n=yield this.kernel.executeFunction(t,e);this.stack.push(n)})),this.$instruction=()=>Te(this,void 0,void 0,(function*(){const t=this.popStr(),e=this.popArr();yield this.kernel.executeInstruction(t,e)})),this.$forIn=Le("FOR ... IN",(()=>{const[t,e,n,i]=this.stack.slice(-4),s=(0,he.Kg)(e)?e.split(""):e;if(!Array.isArray(s))throw new Error(["Après le IN, il me faut une liste ou une chaine.",`Mais j'ai reçu ça : ${JSON.stringify(s)}.`].join("\n"));if(!(0,he.Kg)(t))throw new Error("Internal error! VarName must be a number.");if(!(0,he.Et)(n))throw new Error("Internal error! Index must be a number.");if(!(0,he.Et)(i))throw new Error("Internal error! JumpOut must be a number.");if(n>=s.length)return this.stack.splice(-4,4),void(this.cursor=i);this.kernel.setVar(t,s[n]),this.stack[this.stack.length-2]=n+1}))}execute(t){return Te(this,void 0,void 0,(function*(){try{this.code=t,console.log(t),this.compile(),this.link()}catch(t){console.error(t),console.log("Byte code:",this.bytecode),Ce("Erreur de compilation !",ve(t)?t:{code:this.code,pos:this.bytecode[this.cursor].pos,msg:`${t}`})}try{this.stack.splice(0,this.stack.length);const{bytecode:t,stack:e}=this;for(this.cursor=0;this.cursor<t.length;){const n=t[this.cursor++].val;"function"==typeof n?yield n():e.push(n)}this.kernel.debugVariables()}catch(t){console.error(t),console.log("Cursor:",this.cursor),console.log("Byte code:",this.bytecode),console.log("Stack:",this.stack),Ce("Erreur d'execution !",ve(t)?t:{code:this.code,pos:this.bytecode[this.cursor].pos,msg:`${t}`})}finally{this.kernel.paint()}}))}compile(){this.labels.reset(),this.bytecode.splice(0,this.bytecode.length);const t=new ye(this.code);for(console.log("Tokens:",t.all()),t.next(),this.lexer=t;t.hasMoreCode();)this.parseBloc()||t.fatal("Caractère inattendu ! Je suis perdu...");this.pushBytecode("<<EOF>>"),console.log("Compiled!",this.bytecode)}link(){this.labels.apply(this.bytecode),this.debugBytecode()}fatal(t){const e=this.bytecode[this.cursor];throw e&&console.error(t,e),new Error(t)}pushBytecode(...t){for(const e of t)this.bytecode.push({pos:this.lexer.token.pos,val:e})}pushJmp(t){this.labelLink(t),this.pushBytecode(this.$jmp)}labelLink(t){this.pushBytecode(0),this.labels.link(this.bytecode.length-1,t)}labelStick(t){return this.labels.stick(t,this.bytecode.length)}labelCreate(t=""){return this.labels.create(t)}parseAny(...t){for(const e of t)if(e())return!0;return!1}pop(){const t=this.stack.pop();return null!=t?t:0}popStr(){const t=this.stack.pop();return(0,he.Kg)(t)?t:JSON.stringify(t)}popNum(){const t=this.stack.pop();return(0,he.Et)(t)?t:0}popArr(){const t=this.stack.pop();return Array.isArray(t)?t:(console.error("We were expecting an array, but got:",t),[])}makeBinOp(t){return Le(t,(()=>{const e=this.pop(),n=this.pop(),i=Re[t.toUpperCase()];i||this.lexer.fatal(`Unimplemented binary operator: "${t}"!`);const s=i(n,e);this.stack.push(s)}))}debugBytecode(){const t=this.labels.getLabelsMaxLength(),e=this.bytecode.map((({val:t},e)=>{if((0,he.Tn)(t))return`CALL ${t.name}`;const n=this.labels.getLinkAtCursor(e);return n?`LINK ${n}  ->  ${JSON.stringify(t)}`:`PUSH ${JSON.stringify(t)}`})).map(((e,n)=>`${`${n}`.padStart(6," ")}. ${this.labels.getLabelAtCursor(n).padEnd(t)} ${e}`));console.info(e.join("\n"))}}function Le(t,e){return{[t]:()=>new Promise(((t,n)=>{try{e()}catch(t){n(t)}t()}))}[t]}class Oe{constructor(t){var e;this.executeCurrentCode=()=>{return t=this,e=void 0,i=function*(){try{globalThis.localStorage.setItem("Basik/current",this.code),this.showRuntimeView(),yield this.asm.execute(this.code)}catch(t){const e=t instanceof Error?t.message:JSON.stringify(t,null,"  ");console.error("Runtime error:",t),this.get("ERROR").setAttribute("open","true"),this.get("ERROR-MESSAGE").textContent=e}},new((n=void 0)||(n=Promise))((function(s,r){function o(t){try{h(i.next(t))}catch(t){r(t)}}function a(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}));var t,e,n,i},this.switchFullscreen=()=>{(function(t,e){(0,ct.sH)(this,void 0,void 0,(function*(){return!!t&&(function(t){const e=document.fullscreenElement;if(!t||!e)return!1;let n=t.parentElement;for(;n;){if(n===document.fullscreenElement)return e.clientWidth===t.clientWidth&&e.clientHeight===t.clientHeight;n=n.parentElement}return document.fullscreenElement===t}(t)?function(){return(0,ct.sH)(this,void 0,void 0,(function*(){if(!document.fullscreenElement)return!1;try{return yield document.exitFullscreen(),!0}catch(t){return!1}}))}():function(t,e){return(0,ct.sH)(this,void 0,void 0,(function*(){if(!t)return!1;try{return yield t.requestFullscreen(null!=e?e:{navigationUI:"hide"}),!0}catch(t){return!1}}))}(t,null!=e?e:{navigationUI:"hide"}))}))})(this.get("MONITOR")),globalThis.document.body.classList.toggle("show")},this.help=new Ee(this.get("HELP"));const n=this.get("CANVAS");this.kernel=new me(n,t.symbols);const i=function(t){const e=Gt.$t.create({doc:"",extensions:[Xt.w4.of([...zt.pw,...zt.cL]),(0,Xt.$K)(),(0,Xt.Wu)(),(0,zt.b6)()]});return t.textContent="",new Xt.Lz({state:e,parent:t})}(this.get("CODE"));this.editor=i;const s=new Se(this.kernel);this.asm=s,this.code=null!==(e=globalThis.localStorage.getItem("Basik/current"))&&void 0!==e?e:"REM Tape ton code ici...\n\n",this.get("INDEX").addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation(),this.help.load("index")})),this.get("F1").addEventListener("click",this.executeCurrentCode),this.get("F11").addEventListener("click",this.switchFullscreen),globalThis.document.addEventListener("keydown",(t=>"F11"===t.key?(t.preventDefault(),t.stopPropagation(),void this.switchFullscreen()):"F1"===t.key||"Enter"===t.key&&t.ctrlKey?(t.preventDefault(),t.stopPropagation(),void this.executeCurrentCode()):void console.log("🚀 [index] evt.key =",t.key))),this.get("ERROR-BUTTON").addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation(),this.get("ERROR").removeAttribute("open")}))}get code(){return this.editor.state.doc.toString()}set code(t){this.editor.dispatch({changes:{from:0,to:this.code.length,insert:t}})}showRuntimeView(){globalThis.document.body.classList.remove("show")}get(t){const e=globalThis.document.getElementById(t);if(!e)throw new Error(`Unable to find an element with id #${t}!`);return e}}let Be=null;function Me(){if(!Be)throw new Error("Global state has not been initiliazed yet!");return Be}var Pe=n(72),Fe=n.n(Pe),Ne=n(825),Ue=n.n(Ne),Ie=n(659),De=n.n(Ie),ke=n(56),$e=n.n(ke),He=n(540),We=n.n(He),Ge=n(113),Xe=n.n(Ge),ze=n(165),je={};je.styleTagTransform=Xe(),je.setAttributes=$e(),je.insert=De().bind(null,"head"),je.domAPI=Ue(),je.insertStyleElement=We(),Fe()(ze.A,je),ze.A&&ze.A.locals&&ze.A.locals;var Ve=n(631),Ye={};Ye.styleTagTransform=Xe(),Ye.setAttributes=$e(),Ye.insert=De().bind(null,"head"),Ye.domAPI=Ue(),Ye.insertStyleElement=We(),Fe()(Ve.A,Ye),Ve.A&&Ve.A.locals&&Ve.A.locals;!function(){var t,e,n,i;t=this,e=void 0,i=function*(){const t=yield $t("assets/symbols/CPC6128.png");if(!t)throw new Error('Unable to load "assets/symbols.arr"!');!function(t){try{Be=new Oe(t)}catch(t){console.error("Initialization error:",t)}}({symbols:t}),function(){const t=document.getElementById("splash");t&&(t.classList.add("vanish"),window.setTimeout((()=>{const e=t.parentNode;e&&e.removeChild(t)}),900))}()},new((n=void 0)||(n=Promise))((function(s,r){function o(t){try{h(i.next(t))}catch(t){r(t)}}function a(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}))}()},631:(t,e,n)=>{n.d(e,{A:()=>d});var i=n(354),s=n.n(i),r=n(314),o=n.n(r),a=n(798),h=n.n(a),c=new URL(n(680),n.b),l=o()(s()),u=h()(c);l.push([t.id,`/* latin-ext */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(${u}) format('woff2');\n  unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(${u}) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;\n}\n`,"",{version:3,sources:["webpack://./src/font/josefin.css"],names:[],mappings:"AAAA,cAAc;AACd;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,yGAAoF;EACpF,2FAA2F;AAC7F;AACA,UAAU;AACV;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,yGAAoF;EACpF,4IAA4I;AAC9I",sourcesContent:["/* latin-ext */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(josefin.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: josefin-sans;\n  font-style: normal;\n  font-weight: 400;\n  src: local('Josefin Sans'), local('JosefinSans'), url(josefin.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;\n}\n"],sourceRoot:""}]);const d=l},680:(t,e,n)=>{t.exports=n.p+"fnt/josefin.867f564a4eb4c84b3181.woff2"}},n={};function i(t){var s=n[t];if(void 0!==s)return s.exports;var r=n[t]={id:t,exports:{}};return e[t](r,r.exports,i),r.exports}i.m=e,t=[],i.O=(e,n,s,r)=>{if(!n){var o=1/0;for(l=0;l<t.length;l++){for(var[n,s,r]=t[l],a=!0,h=0;h<n.length;h++)(!1&r||o>=r)&&Object.keys(i.O).every((t=>i.O[t](n[h])))?n.splice(h--,1):(a=!1,r<o&&(o=r));if(a){t.splice(l--,1);var c=s();void 0!==c&&(e=c)}}return e}r=r||0;for(var l=t.length;l>0&&t[l-1][2]>r;l--)t[l]=t[l-1];t[l]=[n,s,r]},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var s=n.length-1;s>-1&&(!t||!/^http(s?):/.test(t));)t=n[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t+"../"})(),(()=>{i.b=document.baseURI||self.location.href;var t={524:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var s,r,[o,a,h]=n,c=0;if(o.some((e=>0!==t[e]))){for(s in a)i.o(a,s)&&(i.m[s]=a[s]);if(h)var l=h(i)}for(e&&e(n);c<o.length;c++)r=o[c],i.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return i.O(l)},n=self.webpackChunkvintage_machine=self.webpackChunkvintage_machine||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),i.nc=void 0;var s=i.O(void 0,[672],(()=>i(299)));s=i.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,