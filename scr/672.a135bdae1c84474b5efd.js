"use strict";(self.webpackChunkvintage_machine=self.webpackChunkvintage_machine||[]).push([[672],{23:(t,e,n)=>{n.d(e,{xI:()=>ft});let i={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};function r(t){i=t}const s={exec:()=>null};function o(t,e=""){let n="string"==typeof t?t:t.source;const i={replace:(t,e)=>{let r="string"==typeof e?e:e.source;return r=r.replace(l.caret,"$1"),n=n.replace(t,r),i},getRegex:()=>new RegExp(n,e)};return i}const l={codeRemoveIndent:/^(?: {1,4}| {0,3}\t)/gm,outputLinkReplace:/\\([\[\]])/g,indentCodeCompensation:/^(\s+)(?:```)/,beginningSpace:/^\s+/,endingHash:/#$/,startingSpaceChar:/^ /,endingSpaceChar:/ $/,nonSpaceChar:/[^ ]/,newLineCharGlobal:/\n/g,tabCharGlobal:/\t/g,multipleSpaceGlobal:/\s+/g,blankLine:/^[ \t]*$/,doubleBlankLine:/\n[ \t]*\n[ \t]*$/,blockquoteStart:/^ {0,3}>/,blockquoteSetextReplace:/\n {0,3}((?:=+|-+) *)(?=\n|$)/g,blockquoteSetextReplace2:/^ {0,3}>[ \t]?/gm,listReplaceTabs:/^\t+/,listReplaceNesting:/^ {1,4}(?=( {4})*[^ ])/g,listIsTask:/^\[[ xX]\] /,listReplaceTask:/^\[[ xX]\] +/,anyLine:/\n.*\n/,hrefBrackets:/^<(.*)>$/,tableDelimiter:/[:|]/,tableAlignChars:/^\||\| *$/g,tableRowBlankLine:/\n[ \t]*$/,tableAlignRight:/^ *-+: *$/,tableAlignCenter:/^ *:-+: *$/,tableAlignLeft:/^ *:-+ *$/,startATag:/^<a /i,endATag:/^<\/a>/i,startPreScriptTag:/^<(pre|code|kbd|script)(\s|>)/i,endPreScriptTag:/^<\/(pre|code|kbd|script)(\s|>)/i,startAngleBracket:/^</,endAngleBracket:/>$/,pedanticHrefTitle:/^([^'"]*[^\s])\s+(['"])(.*)\2/,unicodeAlphaNumeric:/[\p{L}\p{N}]/u,escapeTest:/[&<>"']/,escapeReplace:/[&<>"']/g,escapeTestNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,escapeReplaceNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,unescapeTest:/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,caret:/(^|[^\[])\^/g,percentDecode:/%25/g,findPipe:/\|/g,splitPipe:/ \|/,slashPipe:/\\\|/g,carriageReturn:/\r\n|\r/g,spaceLine:/^ +$/gm,notSpaceStart:/^\S*/,endingNewline:/\n$/,listItemRegex:t=>new RegExp(`^( {0,3}${t})((?:[\t ][^\\n]*)?(?:\\n|$))`),nextBulletRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),hrRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),fencesBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}(?:\`\`\`|~~~)`),headingBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}#`),htmlBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}<(?:[a-z].*>|!--)`,"i")},h=/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,a=/(?:[*+-]|\d{1,9}[.)])/,c=/^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,u=o(c).replace(/bull/g,a).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/\|table/g,"").getRegex(),f=o(c).replace(/bull/g,a).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/table/g,/ {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex(),d=/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,p=/(?!\s*\])(?:\\.|[^\[\]\\])+/,g=o(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label",p).replace("title",/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(),m=o(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g,a).getRegex(),w="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",v=/<!--(?:-?>|[\s\S]*?(?:-->|$))/,y=o("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$))","i").replace("comment",v).replace("tag",w).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),b=o(d).replace("hr",h).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",w).getRegex(),x={blockquote:o(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph",b).getRegex(),code:/^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/,def:g,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,hr:h,html:y,lheading:u,list:m,newline:/^(?:[ \t]*(?:\n|$))+/,paragraph:b,table:s,text:/^[^\n]+/},k=o("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr",h).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("blockquote"," {0,3}>").replace("code","(?: {4}| {0,3}\t)[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",w).getRegex(),S={...x,lheading:f,table:k,paragraph:o(d).replace("hr",h).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("table",k).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",w).getRegex()},A={...x,html:o("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",v).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:s,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:o(d).replace("hr",h).replace("heading"," *#{1,6} *[^\n]").replace("lheading",u).replace("|table","").replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").replace("|tag","").getRegex()},M=/^( {2,}|\\)\n(?!\s*$)/,C=/[\p{P}\p{S}]/u,O=/[\s\p{P}\p{S}]/u,T=/[^\s\p{P}\p{S}]/u,E=o(/^((?![*_])punctSpace)/,"u").replace(/punctSpace/g,O).getRegex(),D=/(?!~)[\p{P}\p{S}]/u,R=/^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/,B=o(R,"u").replace(/punct/g,C).getRegex(),P=o(R,"u").replace(/punct/g,D).getRegex(),L="^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)",N=o(L,"gu").replace(/notPunctSpace/g,T).replace(/punctSpace/g,O).replace(/punct/g,C).getRegex(),I=o(L,"gu").replace(/notPunctSpace/g,/(?:[^\s\p{P}\p{S}]|~)/u).replace(/punctSpace/g,/(?!~)[\s\p{P}\p{S}]/u).replace(/punct/g,D).getRegex(),F=o("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)","gu").replace(/notPunctSpace/g,T).replace(/punctSpace/g,O).replace(/punct/g,C).getRegex(),$=o(/\\(punct)/,"gu").replace(/punct/g,C).getRegex(),z=o(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),H=o(v).replace("(?:--\x3e|$)","--\x3e").getRegex(),V=o("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment",H).replace("attribute",/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(),_=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,W=o(/^!?\[(label)\]\(\s*(href)(?:(?:[ \t]*(?:\n[ \t]*)?)(title))?\s*\)/).replace("label",_).replace("href",/<(?:\\.|[^\n<>\\])+>|[^ \t\n\x00-\x1f]*/).replace("title",/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(),j=o(/^!?\[(label)\]\[(ref)\]/).replace("label",_).replace("ref",p).getRegex(),q=o(/^!?\[(ref)\](?:\[\])?/).replace("ref",p).getRegex(),K={_backpedal:s,anyPunctuation:$,autolink:z,blockSkip:/\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g,br:M,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,del:s,emStrongLDelim:B,emStrongRDelimAst:N,emStrongRDelimUnd:F,escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,link:W,nolink:q,punctuation:E,reflink:j,reflinkSearch:o("reflink|nolink(?!\\()","g").replace("reflink",j).replace("nolink",q).getRegex(),tag:V,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,url:s},G={...K,link:o(/^!?\[(label)\]\((.*?)\)/).replace("label",_).getRegex(),reflink:o(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",_).getRegex()},U={...K,emStrongRDelimAst:I,emStrongLDelim:P,url:o(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,"i").replace("email",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},Y={...U,br:o(M).replace("{2,}","*").getRegex(),text:o(U.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()},J={normal:x,gfm:S,pedantic:A},X={normal:K,gfm:U,breaks:Y,pedantic:G},Z={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Q=t=>Z[t];function tt(t,e){if(e){if(l.escapeTest.test(t))return t.replace(l.escapeReplace,Q)}else if(l.escapeTestNoEncode.test(t))return t.replace(l.escapeReplaceNoEncode,Q);return t}function et(t){try{t=encodeURI(t).replace(l.percentDecode,"%")}catch{return null}return t}function nt(t,e){const n=t.replace(l.findPipe,((t,e,n)=>{let i=!1,r=e;for(;--r>=0&&"\\"===n[r];)i=!i;return i?"|":" |"})).split(l.splitPipe);let i=0;if(n[0].trim()||n.shift(),n.length>0&&!n.at(-1)?.trim()&&n.pop(),e)if(n.length>e)n.splice(e);else for(;n.length<e;)n.push("");for(;i<n.length;i++)n[i]=n[i].trim().replace(l.slashPipe,"|");return n}function it(t,e,n){const i=t.length;if(0===i)return"";let r=0;for(;r<i&&t.charAt(i-r-1)===e;)r++;return t.slice(0,i-r)}function rt(t,e,n,i,r){const s=e.href,o=e.title||null,l=t[1].replace(r.other.outputLinkReplace,"$1");i.state.inLink=!0;const h={type:"!"===t[0].charAt(0)?"image":"link",raw:n,href:s,title:o,text:l,tokens:i.inlineTokens(l)};return i.state.inLink=!1,h}class st{options;rules;lexer;constructor(t){this.options=t||i}space(t){const e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:"space",raw:e[0]}}code(t){const e=this.rules.block.code.exec(t);if(e){const t=e[0].replace(this.rules.other.codeRemoveIndent,"");return{type:"code",raw:e[0],codeBlockStyle:"indented",text:this.options.pedantic?t:it(t,"\n")}}}fences(t){const e=this.rules.block.fences.exec(t);if(e){const t=e[0],n=function(t,e,n){const i=t.match(n.other.indentCodeCompensation);if(null===i)return e;const r=i[1];return e.split("\n").map((t=>{const e=t.match(n.other.beginningSpace);if(null===e)return t;const[i]=e;return i.length>=r.length?t.slice(r.length):t})).join("\n")}(t,e[3]||"",this.rules);return{type:"code",raw:t,lang:e[2]?e[2].trim().replace(this.rules.inline.anyPunctuation,"$1"):e[2],text:n}}}heading(t){const e=this.rules.block.heading.exec(t);if(e){let t=e[2].trim();if(this.rules.other.endingHash.test(t)){const e=it(t,"#");this.options.pedantic?t=e.trim():e&&!this.rules.other.endingSpaceChar.test(e)||(t=e.trim())}return{type:"heading",raw:e[0],depth:e[1].length,text:t,tokens:this.lexer.inline(t)}}}hr(t){const e=this.rules.block.hr.exec(t);if(e)return{type:"hr",raw:it(e[0],"\n")}}blockquote(t){const e=this.rules.block.blockquote.exec(t);if(e){let t=it(e[0],"\n").split("\n"),n="",i="";const r=[];for(;t.length>0;){let e=!1;const s=[];let o;for(o=0;o<t.length;o++)if(this.rules.other.blockquoteStart.test(t[o]))s.push(t[o]),e=!0;else{if(e)break;s.push(t[o])}t=t.slice(o);const l=s.join("\n"),h=l.replace(this.rules.other.blockquoteSetextReplace,"\n    $1").replace(this.rules.other.blockquoteSetextReplace2,"");n=n?`${n}\n${l}`:l,i=i?`${i}\n${h}`:h;const a=this.lexer.state.top;if(this.lexer.state.top=!0,this.lexer.blockTokens(h,r,!0),this.lexer.state.top=a,0===t.length)break;const c=r.at(-1);if("code"===c?.type)break;if("blockquote"===c?.type){const e=c,s=e.raw+"\n"+t.join("\n"),o=this.blockquote(s);r[r.length-1]=o,n=n.substring(0,n.length-e.raw.length)+o.raw,i=i.substring(0,i.length-e.text.length)+o.text;break}if("list"!==c?.type);else{const e=c,s=e.raw+"\n"+t.join("\n"),o=this.list(s);r[r.length-1]=o,n=n.substring(0,n.length-c.raw.length)+o.raw,i=i.substring(0,i.length-e.raw.length)+o.raw,t=s.substring(r.at(-1).raw.length).split("\n")}}return{type:"blockquote",raw:n,tokens:r,text:i}}}list(t){let e=this.rules.block.list.exec(t);if(e){let n=e[1].trim();const i=n.length>1,r={type:"list",raw:"",ordered:i,start:i?+n.slice(0,-1):"",loose:!1,items:[]};n=i?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=i?n:"[*+-]");const s=this.rules.other.listItemRegex(n);let o=!1;for(;t;){let n=!1,i="",l="";if(!(e=s.exec(t)))break;if(this.rules.block.hr.test(t))break;i=e[0],t=t.substring(i.length);let h=e[2].split("\n",1)[0].replace(this.rules.other.listReplaceTabs,(t=>" ".repeat(3*t.length))),a=t.split("\n",1)[0],c=!h.trim(),u=0;if(this.options.pedantic?(u=2,l=h.trimStart()):c?u=e[1].length+1:(u=e[2].search(this.rules.other.nonSpaceChar),u=u>4?1:u,l=h.slice(u),u+=e[1].length),c&&this.rules.other.blankLine.test(a)&&(i+=a+"\n",t=t.substring(a.length+1),n=!0),!n){const e=this.rules.other.nextBulletRegex(u),n=this.rules.other.hrRegex(u),r=this.rules.other.fencesBeginRegex(u),s=this.rules.other.headingBeginRegex(u),o=this.rules.other.htmlBeginRegex(u);for(;t;){const f=t.split("\n",1)[0];let d;if(a=f,this.options.pedantic?(a=a.replace(this.rules.other.listReplaceNesting,"  "),d=a):d=a.replace(this.rules.other.tabCharGlobal,"    "),r.test(a))break;if(s.test(a))break;if(o.test(a))break;if(e.test(a))break;if(n.test(a))break;if(d.search(this.rules.other.nonSpaceChar)>=u||!a.trim())l+="\n"+d.slice(u);else{if(c)break;if(h.replace(this.rules.other.tabCharGlobal,"    ").search(this.rules.other.nonSpaceChar)>=4)break;if(r.test(h))break;if(s.test(h))break;if(n.test(h))break;l+="\n"+a}c||a.trim()||(c=!0),i+=f+"\n",t=t.substring(f.length+1),h=d.slice(u)}}r.loose||(o?r.loose=!0:this.rules.other.doubleBlankLine.test(i)&&(o=!0));let f,d=null;this.options.gfm&&(d=this.rules.other.listIsTask.exec(l),d&&(f="[ ] "!==d[0],l=l.replace(this.rules.other.listReplaceTask,""))),r.items.push({type:"list_item",raw:i,task:!!d,checked:f,loose:!1,text:l,tokens:[]}),r.raw+=i}const l=r.items.at(-1);if(!l)return;l.raw=l.raw.trimEnd(),l.text=l.text.trimEnd(),r.raw=r.raw.trimEnd();for(let t=0;t<r.items.length;t++)if(this.lexer.state.top=!1,r.items[t].tokens=this.lexer.blockTokens(r.items[t].text,[]),!r.loose){const e=r.items[t].tokens.filter((t=>"space"===t.type)),n=e.length>0&&e.some((t=>this.rules.other.anyLine.test(t.raw)));r.loose=n}if(r.loose)for(let t=0;t<r.items.length;t++)r.items[t].loose=!0;return r}}html(t){const e=this.rules.block.html.exec(t);if(e)return{type:"html",block:!0,raw:e[0],pre:"pre"===e[1]||"script"===e[1]||"style"===e[1],text:e[0]}}def(t){const e=this.rules.block.def.exec(t);if(e){const t=e[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal," "),n=e[2]?e[2].replace(this.rules.other.hrefBrackets,"$1").replace(this.rules.inline.anyPunctuation,"$1"):"",i=e[3]?e[3].substring(1,e[3].length-1).replace(this.rules.inline.anyPunctuation,"$1"):e[3];return{type:"def",tag:t,raw:e[0],href:n,title:i}}}table(t){const e=this.rules.block.table.exec(t);if(!e)return;if(!this.rules.other.tableDelimiter.test(e[2]))return;const n=nt(e[1]),i=e[2].replace(this.rules.other.tableAlignChars,"").split("|"),r=e[3]?.trim()?e[3].replace(this.rules.other.tableRowBlankLine,"").split("\n"):[],s={type:"table",raw:e[0],header:[],align:[],rows:[]};if(n.length===i.length){for(const t of i)this.rules.other.tableAlignRight.test(t)?s.align.push("right"):this.rules.other.tableAlignCenter.test(t)?s.align.push("center"):this.rules.other.tableAlignLeft.test(t)?s.align.push("left"):s.align.push(null);for(let t=0;t<n.length;t++)s.header.push({text:n[t],tokens:this.lexer.inline(n[t]),header:!0,align:s.align[t]});for(const t of r)s.rows.push(nt(t,s.header.length).map(((t,e)=>({text:t,tokens:this.lexer.inline(t),header:!1,align:s.align[e]}))));return s}}lheading(t){const e=this.rules.block.lheading.exec(t);if(e)return{type:"heading",raw:e[0],depth:"="===e[2].charAt(0)?1:2,text:e[1],tokens:this.lexer.inline(e[1])}}paragraph(t){const e=this.rules.block.paragraph.exec(t);if(e){const t="\n"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1];return{type:"paragraph",raw:e[0],text:t,tokens:this.lexer.inline(t)}}}text(t){const e=this.rules.block.text.exec(t);if(e)return{type:"text",raw:e[0],text:e[0],tokens:this.lexer.inline(e[0])}}escape(t){const e=this.rules.inline.escape.exec(t);if(e)return{type:"escape",raw:e[0],text:e[1]}}tag(t){const e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&this.rules.other.startATag.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&this.rules.other.endATag.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&this.rules.other.startPreScriptTag.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&this.rules.other.endPreScriptTag.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:"html",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:e[0]}}link(t){const e=this.rules.inline.link.exec(t);if(e){const t=e[2].trim();if(!this.options.pedantic&&this.rules.other.startAngleBracket.test(t)){if(!this.rules.other.endAngleBracket.test(t))return;const e=it(t.slice(0,-1),"\\");if((t.length-e.length)%2==0)return}else{const t=function(t,e){if(-1===t.indexOf(e[1]))return-1;let n=0;for(let i=0;i<t.length;i++)if("\\"===t[i])i++;else if(t[i]===e[0])n++;else if(t[i]===e[1]&&(n--,n<0))return i;return n>0?-2:-1}(e[2],"()");if(-2===t)return;if(t>-1){const n=(0===e[0].indexOf("!")?5:4)+e[1].length+t;e[2]=e[2].substring(0,t),e[0]=e[0].substring(0,n).trim(),e[3]=""}}let n=e[2],i="";if(this.options.pedantic){const t=this.rules.other.pedanticHrefTitle.exec(n);t&&(n=t[1],i=t[3])}else i=e[3]?e[3].slice(1,-1):"";return n=n.trim(),this.rules.other.startAngleBracket.test(n)&&(n=this.options.pedantic&&!this.rules.other.endAngleBracket.test(t)?n.slice(1):n.slice(1,-1)),rt(e,{href:n?n.replace(this.rules.inline.anyPunctuation,"$1"):n,title:i?i.replace(this.rules.inline.anyPunctuation,"$1"):i},e[0],this.lexer,this.rules)}}reflink(t,e){let n;if((n=this.rules.inline.reflink.exec(t))||(n=this.rules.inline.nolink.exec(t))){const t=e[(n[2]||n[1]).replace(this.rules.other.multipleSpaceGlobal," ").toLowerCase()];if(!t){const t=n[0].charAt(0);return{type:"text",raw:t,text:t}}return rt(n,t,n[0],this.lexer,this.rules)}}emStrong(t,e,n=""){let i=this.rules.inline.emStrongLDelim.exec(t);if(i&&(!i[3]||!n.match(this.rules.other.unicodeAlphaNumeric))&&(!i[1]&&!i[2]||!n||this.rules.inline.punctuation.exec(n))){const n=[...i[0]].length-1;let r,s,o=n,l=0;const h="*"===i[0][0]?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(h.lastIndex=0,e=e.slice(-1*t.length+n);null!=(i=h.exec(e));){if(r=i[1]||i[2]||i[3]||i[4]||i[5]||i[6],!r)continue;if(s=[...r].length,i[3]||i[4]){o+=s;continue}if((i[5]||i[6])&&n%3&&!((n+s)%3)){l+=s;continue}if(o-=s,o>0)continue;s=Math.min(s,s+o+l);const e=[...i[0]][0].length,h=t.slice(0,n+i.index+e+s);if(Math.min(n,s)%2){const t=h.slice(1,-1);return{type:"em",raw:h,text:t,tokens:this.lexer.inlineTokens(t)}}const a=h.slice(2,-2);return{type:"strong",raw:h,text:a,tokens:this.lexer.inlineTokens(a)}}}}codespan(t){const e=this.rules.inline.code.exec(t);if(e){let t=e[2].replace(this.rules.other.newLineCharGlobal," ");const n=this.rules.other.nonSpaceChar.test(t),i=this.rules.other.startingSpaceChar.test(t)&&this.rules.other.endingSpaceChar.test(t);return n&&i&&(t=t.substring(1,t.length-1)),{type:"codespan",raw:e[0],text:t}}}br(t){const e=this.rules.inline.br.exec(t);if(e)return{type:"br",raw:e[0]}}del(t){const e=this.rules.inline.del.exec(t);if(e)return{type:"del",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2])}}autolink(t){const e=this.rules.inline.autolink.exec(t);if(e){let t,n;return"@"===e[2]?(t=e[1],n="mailto:"+t):(t=e[1],n=t),{type:"link",raw:e[0],text:t,href:n,tokens:[{type:"text",raw:t,text:t}]}}}url(t){let e;if(e=this.rules.inline.url.exec(t)){let t,n;if("@"===e[2])t=e[0],n="mailto:"+t;else{let i;do{i=e[0],e[0]=this.rules.inline._backpedal.exec(e[0])?.[0]??""}while(i!==e[0]);t=e[0],n="www."===e[1]?"http://"+e[0]:e[0]}return{type:"link",raw:e[0],text:t,href:n,tokens:[{type:"text",raw:t,text:t}]}}}inlineText(t){const e=this.rules.inline.text.exec(t);if(e){const t=this.lexer.state.inRawBlock;return{type:"text",raw:e[0],text:e[0],escaped:t}}}}class ot{tokens;options;state;tokenizer;inlineQueue;constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||i,this.options.tokenizer=this.options.tokenizer||new st,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const e={other:l,block:J.normal,inline:X.normal};this.options.pedantic?(e.block=J.pedantic,e.inline=X.pedantic):this.options.gfm&&(e.block=J.gfm,this.options.breaks?e.inline=X.breaks:e.inline=X.gfm),this.tokenizer.rules=e}static get rules(){return{block:J,inline:X}}static lex(t,e){return new ot(e).lex(t)}static lexInline(t,e){return new ot(e).inlineTokens(t)}lex(t){t=t.replace(l.carriageReturn,"\n"),this.blockTokens(t,this.tokens);for(let t=0;t<this.inlineQueue.length;t++){const e=this.inlineQueue[t];this.inlineTokens(e.src,e.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(t,e=[],n=!1){for(this.options.pedantic&&(t=t.replace(l.tabCharGlobal,"    ").replace(l.spaceLine,""));t;){let i;if(this.options.extensions?.block?.some((n=>!!(i=n.call({lexer:this},t,e))&&(t=t.substring(i.raw.length),e.push(i),!0))))continue;if(i=this.tokenizer.space(t)){t=t.substring(i.raw.length);const n=e.at(-1);1===i.raw.length&&void 0!==n?n.raw+="\n":e.push(i);continue}if(i=this.tokenizer.code(t)){t=t.substring(i.raw.length);const n=e.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+i.raw,n.text+="\n"+i.text,this.inlineQueue.at(-1).src=n.text):e.push(i);continue}if(i=this.tokenizer.fences(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.heading(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.hr(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.blockquote(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.list(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.html(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.def(t)){t=t.substring(i.raw.length);const n=e.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+i.raw,n.text+="\n"+i.raw,this.inlineQueue.at(-1).src=n.text):this.tokens.links[i.tag]||(this.tokens.links[i.tag]={href:i.href,title:i.title});continue}if(i=this.tokenizer.table(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.lheading(t)){t=t.substring(i.raw.length),e.push(i);continue}let r=t;if(this.options.extensions?.startBlock){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startBlock.forEach((t=>{i=t.call({lexer:this},n),"number"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(r=t.substring(0,e+1))}if(this.state.top&&(i=this.tokenizer.paragraph(r))){const s=e.at(-1);n&&"paragraph"===s?.type?(s.raw+="\n"+i.raw,s.text+="\n"+i.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=s.text):e.push(i),n=r.length!==t.length,t=t.substring(i.raw.length)}else if(i=this.tokenizer.text(t)){t=t.substring(i.raw.length);const n=e.at(-1);"text"===n?.type?(n.raw+="\n"+i.raw,n.text+="\n"+i.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=n.text):e.push(i)}else if(t){const e="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return this.state.top=!0,e}inline(t,e=[]){return this.inlineQueue.push({src:t,tokens:e}),e}inlineTokens(t,e=[]){let n=t,i=null;if(this.tokens.links){const t=Object.keys(this.tokens.links);if(t.length>0)for(;null!=(i=this.tokenizer.rules.inline.reflinkSearch.exec(n));)t.includes(i[0].slice(i[0].lastIndexOf("[")+1,-1))&&(n=n.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(i=this.tokenizer.rules.inline.anyPunctuation.exec(n));)n=n.slice(0,i.index)+"++"+n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;null!=(i=this.tokenizer.rules.inline.blockSkip.exec(n));)n=n.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);let r=!1,s="";for(;t;){let i;if(r||(s=""),r=!1,this.options.extensions?.inline?.some((n=>!!(i=n.call({lexer:this},t,e))&&(t=t.substring(i.raw.length),e.push(i),!0))))continue;if(i=this.tokenizer.escape(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.tag(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.link(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.reflink(t,this.tokens.links)){t=t.substring(i.raw.length);const n=e.at(-1);"text"===i.type&&"text"===n?.type?(n.raw+=i.raw,n.text+=i.text):e.push(i);continue}if(i=this.tokenizer.emStrong(t,n,s)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.codespan(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.br(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.del(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.autolink(t)){t=t.substring(i.raw.length),e.push(i);continue}if(!this.state.inLink&&(i=this.tokenizer.url(t))){t=t.substring(i.raw.length),e.push(i);continue}let o=t;if(this.options.extensions?.startInline){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startInline.forEach((t=>{i=t.call({lexer:this},n),"number"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(o=t.substring(0,e+1))}if(i=this.tokenizer.inlineText(o)){t=t.substring(i.raw.length),"_"!==i.raw.slice(-1)&&(s=i.raw.slice(-1)),r=!0;const n=e.at(-1);"text"===n?.type?(n.raw+=i.raw,n.text+=i.text):e.push(i)}else if(t){const e="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return e}}class lt{options;parser;constructor(t){this.options=t||i}space(t){return""}code({text:t,lang:e,escaped:n}){const i=(e||"").match(l.notSpaceStart)?.[0],r=t.replace(l.endingNewline,"")+"\n";return i?'<pre><code class="language-'+tt(i)+'">'+(n?r:tt(r,!0))+"</code></pre>\n":"<pre><code>"+(n?r:tt(r,!0))+"</code></pre>\n"}blockquote({tokens:t}){return`<blockquote>\n${this.parser.parse(t)}</blockquote>\n`}html({text:t}){return t}heading({tokens:t,depth:e}){return`<h${e}>${this.parser.parseInline(t)}</h${e}>\n`}hr(t){return"<hr>\n"}list(t){const e=t.ordered,n=t.start;let i="";for(let e=0;e<t.items.length;e++){const n=t.items[e];i+=this.listitem(n)}const r=e?"ol":"ul";return"<"+r+(e&&1!==n?' start="'+n+'"':"")+">\n"+i+"</"+r+">\n"}listitem(t){let e="";if(t.task){const n=this.checkbox({checked:!!t.checked});t.loose?"paragraph"===t.tokens[0]?.type?(t.tokens[0].text=n+" "+t.tokens[0].text,t.tokens[0].tokens&&t.tokens[0].tokens.length>0&&"text"===t.tokens[0].tokens[0].type&&(t.tokens[0].tokens[0].text=n+" "+tt(t.tokens[0].tokens[0].text),t.tokens[0].tokens[0].escaped=!0)):t.tokens.unshift({type:"text",raw:n+" ",text:n+" ",escaped:!0}):e+=n+" "}return e+=this.parser.parse(t.tokens,!!t.loose),`<li>${e}</li>\n`}checkbox({checked:t}){return"<input "+(t?'checked="" ':"")+'disabled="" type="checkbox">'}paragraph({tokens:t}){return`<p>${this.parser.parseInline(t)}</p>\n`}table(t){let e="",n="";for(let e=0;e<t.header.length;e++)n+=this.tablecell(t.header[e]);e+=this.tablerow({text:n});let i="";for(let e=0;e<t.rows.length;e++){const r=t.rows[e];n="";for(let t=0;t<r.length;t++)n+=this.tablecell(r[t]);i+=this.tablerow({text:n})}return i&&(i=`<tbody>${i}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+i+"</table>\n"}tablerow({text:t}){return`<tr>\n${t}</tr>\n`}tablecell(t){const e=this.parser.parseInline(t.tokens),n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong({tokens:t}){return`<strong>${this.parser.parseInline(t)}</strong>`}em({tokens:t}){return`<em>${this.parser.parseInline(t)}</em>`}codespan({text:t}){return`<code>${tt(t,!0)}</code>`}br(t){return"<br>"}del({tokens:t}){return`<del>${this.parser.parseInline(t)}</del>`}link({href:t,title:e,tokens:n}){const i=this.parser.parseInline(n),r=et(t);if(null===r)return i;let s='<a href="'+(t=r)+'"';return e&&(s+=' title="'+tt(e)+'"'),s+=">"+i+"</a>",s}image({href:t,title:e,text:n,tokens:i}){i&&(n=this.parser.parseInline(i,this.parser.textRenderer));const r=et(t);if(null===r)return tt(n);let s=`<img src="${t=r}" alt="${n}"`;return e&&(s+=` title="${tt(e)}"`),s+=">",s}text(t){return"tokens"in t&&t.tokens?this.parser.parseInline(t.tokens):"escaped"in t&&t.escaped?t.text:tt(t.text)}}class ht{strong({text:t}){return t}em({text:t}){return t}codespan({text:t}){return t}del({text:t}){return t}html({text:t}){return t}text({text:t}){return t}link({text:t}){return""+t}image({text:t}){return""+t}br(){return""}}class at{options;renderer;textRenderer;constructor(t){this.options=t||i,this.options.renderer=this.options.renderer||new lt,this.renderer=this.options.renderer,this.renderer.options=this.options,this.renderer.parser=this,this.textRenderer=new ht}static parse(t,e){return new at(e).parse(t)}static parseInline(t,e){return new at(e).parseInline(t)}parse(t,e=!0){let n="";for(let i=0;i<t.length;i++){const r=t[i];if(this.options.extensions?.renderers?.[r.type]){const t=r,e=this.options.extensions.renderers[t.type].call({parser:this},t);if(!1!==e||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(t.type)){n+=e||"";continue}}const s=r;switch(s.type){case"space":n+=this.renderer.space(s);continue;case"hr":n+=this.renderer.hr(s);continue;case"heading":n+=this.renderer.heading(s);continue;case"code":n+=this.renderer.code(s);continue;case"table":n+=this.renderer.table(s);continue;case"blockquote":n+=this.renderer.blockquote(s);continue;case"list":n+=this.renderer.list(s);continue;case"html":n+=this.renderer.html(s);continue;case"paragraph":n+=this.renderer.paragraph(s);continue;case"text":{let r=s,o=this.renderer.text(r);for(;i+1<t.length&&"text"===t[i+1].type;)r=t[++i],o+="\n"+this.renderer.text(r);n+=e?this.renderer.paragraph({type:"paragraph",raw:o,text:o,tokens:[{type:"text",raw:o,text:o,escaped:!0}]}):o;continue}default:{const t='Token with "'+s.type+'" type was not found.';if(this.options.silent)return console.error(t),"";throw new Error(t)}}}return n}parseInline(t,e=this.renderer){let n="";for(let i=0;i<t.length;i++){const r=t[i];if(this.options.extensions?.renderers?.[r.type]){const t=this.options.extensions.renderers[r.type].call({parser:this},r);if(!1!==t||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)){n+=t||"";continue}}const s=r;switch(s.type){case"escape":case"text":n+=e.text(s);break;case"html":n+=e.html(s);break;case"link":n+=e.link(s);break;case"image":n+=e.image(s);break;case"strong":n+=e.strong(s);break;case"em":n+=e.em(s);break;case"codespan":n+=e.codespan(s);break;case"br":n+=e.br(s);break;case"del":n+=e.del(s);break;default:{const t='Token with "'+s.type+'" type was not found.';if(this.options.silent)return console.error(t),"";throw new Error(t)}}}return n}}class ct{options;block;constructor(t){this.options=t||i}static passThroughHooks=new Set(["preprocess","postprocess","processAllTokens"]);preprocess(t){return t}postprocess(t){return t}processAllTokens(t){return t}provideLexer(){return this.block?ot.lex:ot.lexInline}provideParser(){return this.block?at.parse:at.parseInline}}const ut=new class{defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};options=this.setOptions;parse=this.parseMarkdown(!0);parseInline=this.parseMarkdown(!1);Parser=at;Renderer=lt;TextRenderer=ht;Lexer=ot;Tokenizer=st;Hooks=ct;constructor(...t){this.use(...t)}walkTokens(t,e){let n=[];for(const i of t)switch(n=n.concat(e.call(this,i)),i.type){case"table":{const t=i;for(const i of t.header)n=n.concat(this.walkTokens(i.tokens,e));for(const i of t.rows)for(const t of i)n=n.concat(this.walkTokens(t.tokens,e));break}case"list":{const t=i;n=n.concat(this.walkTokens(t.items,e));break}default:{const t=i;this.defaults.extensions?.childTokens?.[t.type]?this.defaults.extensions.childTokens[t.type].forEach((i=>{const r=t[i].flat(1/0);n=n.concat(this.walkTokens(r,e))})):t.tokens&&(n=n.concat(this.walkTokens(t.tokens,e)))}}return n}use(...t){const e=this.defaults.extensions||{renderers:{},childTokens:{}};return t.forEach((t=>{const n={...t};if(n.async=this.defaults.async||n.async||!1,t.extensions&&(t.extensions.forEach((t=>{if(!t.name)throw new Error("extension name required");if("renderer"in t){const n=e.renderers[t.name];e.renderers[t.name]=n?function(...e){let i=t.renderer.apply(this,e);return!1===i&&(i=n.apply(this,e)),i}:t.renderer}if("tokenizer"in t){if(!t.level||"block"!==t.level&&"inline"!==t.level)throw new Error("extension level must be 'block' or 'inline'");const n=e[t.level];n?n.unshift(t.tokenizer):e[t.level]=[t.tokenizer],t.start&&("block"===t.level?e.startBlock?e.startBlock.push(t.start):e.startBlock=[t.start]:"inline"===t.level&&(e.startInline?e.startInline.push(t.start):e.startInline=[t.start]))}"childTokens"in t&&t.childTokens&&(e.childTokens[t.name]=t.childTokens)})),n.extensions=e),t.renderer){const e=this.defaults.renderer||new lt(this.defaults);for(const n in t.renderer){if(!(n in e))throw new Error(`renderer '${n}' does not exist`);if(["options","parser"].includes(n))continue;const i=n,r=t.renderer[i],s=e[i];e[i]=(...t)=>{let n=r.apply(e,t);return!1===n&&(n=s.apply(e,t)),n||""}}n.renderer=e}if(t.tokenizer){const e=this.defaults.tokenizer||new st(this.defaults);for(const n in t.tokenizer){if(!(n in e))throw new Error(`tokenizer '${n}' does not exist`);if(["options","rules","lexer"].includes(n))continue;const i=n,r=t.tokenizer[i],s=e[i];e[i]=(...t)=>{let n=r.apply(e,t);return!1===n&&(n=s.apply(e,t)),n}}n.tokenizer=e}if(t.hooks){const e=this.defaults.hooks||new ct;for(const n in t.hooks){if(!(n in e))throw new Error(`hook '${n}' does not exist`);if(["options","block"].includes(n))continue;const i=n,r=t.hooks[i],s=e[i];ct.passThroughHooks.has(n)?e[i]=t=>{if(this.defaults.async)return Promise.resolve(r.call(e,t)).then((t=>s.call(e,t)));const n=r.call(e,t);return s.call(e,n)}:e[i]=(...t)=>{let n=r.apply(e,t);return!1===n&&(n=s.apply(e,t)),n}}n.hooks=e}if(t.walkTokens){const e=this.defaults.walkTokens,i=t.walkTokens;n.walkTokens=function(t){let n=[];return n.push(i.call(this,t)),e&&(n=n.concat(e.call(this,t))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(t){return this.defaults={...this.defaults,...t},this}lexer(t,e){return ot.lex(t,e??this.defaults)}parser(t,e){return at.parse(t,e??this.defaults)}parseMarkdown(t){return(e,n)=>{const i={...n},r={...this.defaults,...i},s=this.onError(!!r.silent,!!r.async);if(!0===this.defaults.async&&!1===i.async)return s(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));if(null==e)return s(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof e)return s(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected"));r.hooks&&(r.hooks.options=r,r.hooks.block=t);const o=r.hooks?r.hooks.provideLexer():t?ot.lex:ot.lexInline,l=r.hooks?r.hooks.provideParser():t?at.parse:at.parseInline;if(r.async)return Promise.resolve(r.hooks?r.hooks.preprocess(e):e).then((t=>o(t,r))).then((t=>r.hooks?r.hooks.processAllTokens(t):t)).then((t=>r.walkTokens?Promise.all(this.walkTokens(t,r.walkTokens)).then((()=>t)):t)).then((t=>l(t,r))).then((t=>r.hooks?r.hooks.postprocess(t):t)).catch(s);try{r.hooks&&(e=r.hooks.preprocess(e));let t=o(e,r);r.hooks&&(t=r.hooks.processAllTokens(t)),r.walkTokens&&this.walkTokens(t,r.walkTokens);let n=l(t,r);return r.hooks&&(n=r.hooks.postprocess(n)),n}catch(t){return s(t)}}}onError(t,e){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",t){const t="<p>An error occurred:</p><pre>"+tt(n.message+"",!0)+"</pre>";return e?Promise.resolve(t):t}if(e)return Promise.reject(n);throw n}}};function ft(t,e){return ut.parse(t,e)}ft.options=ft.setOptions=function(t){return ut.setOptions(t),ft.defaults=ut.defaults,r(ft.defaults),ft},ft.getDefaults=function(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}},ft.defaults=i,ft.use=function(...t){return ut.use(...t),ft.defaults=ut.defaults,r(ft.defaults),ft},ft.walkTokens=function(t,e){return ut.walkTokens(t,e)},ft.parseInline=ut.parseInline,ft.Parser=at,ft.parser=at.parse,ft.Renderer=lt,ft.TextRenderer=ht,ft.Lexer=ot,ft.lexer=ot.lex,ft.Tokenizer=st,ft.Hooks=ct,ft.parse=ft,ft.options,ft.setOptions,ft.use,ft.walkTokens,ft.parseInline,at.parse,ot.lex},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},63:(t,e,n)=>{n.d(e,{pw:()=>mn,b6:()=>re,cL:()=>xe});var i=n(638),r=n(898);const s=1024;let o=0;class l{constructor(t,e){this.from=t,this.to=e}}class h{constructor(t={}){this.id=o++,this.perNode=!!t.perNode,this.deserialize=t.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(t){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof t&&(t=u.match(t)),e=>{let n=t(e);return void 0===n?null:[this,n]}}}h.closedBy=new h({deserialize:t=>t.split(" ")}),h.openedBy=new h({deserialize:t=>t.split(" ")}),h.group=new h({deserialize:t=>t.split(" ")}),h.isolate=new h({deserialize:t=>{if(t&&"rtl"!=t&&"ltr"!=t&&"auto"!=t)throw new RangeError("Invalid value for isolate: "+t);return t||"auto"}}),h.contextHash=new h({perNode:!0}),h.lookAhead=new h({perNode:!0}),h.mounted=new h({perNode:!0});class a{constructor(t,e,n){this.tree=t,this.overlay=e,this.parser=n}static get(t){return t&&t.props&&t.props[h.mounted.id]}}const c=Object.create(null);class u{constructor(t,e,n,i=0){this.name=t,this.props=e,this.id=n,this.flags=i}static define(t){let e=t.props&&t.props.length?Object.create(null):c,n=(t.top?1:0)|(t.skipped?2:0)|(t.error?4:0)|(null==t.name?8:0),i=new u(t.name||"",e,t.id,n);if(t.props)for(let n of t.props)if(Array.isArray(n)||(n=n(i)),n){if(n[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");e[n[0].id]=n[1]}return i}prop(t){return this.props[t.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(t){if("string"==typeof t){if(this.name==t)return!0;let e=this.prop(h.group);return!!e&&e.indexOf(t)>-1}return this.id==t}static match(t){let e=Object.create(null);for(let n in t)for(let i of n.split(" "))e[i]=t[n];return t=>{for(let n=t.prop(h.group),i=-1;i<(n?n.length:0);i++){let r=e[i<0?t.name:n[i]];if(r)return r}}}}u.none=new u("",Object.create(null),0,8);const f=new WeakMap,d=new WeakMap;var p;!function(t){t[t.ExcludeBuffers=1]="ExcludeBuffers",t[t.IncludeAnonymous=2]="IncludeAnonymous",t[t.IgnoreMounts=4]="IgnoreMounts",t[t.IgnoreOverlays=8]="IgnoreOverlays"}(p||(p={}));class g{constructor(t,e,n,i,r){if(this.type=t,this.children=e,this.positions=n,this.length=i,this.props=null,r&&r.length){this.props=Object.create(null);for(let[t,e]of r)this.props["number"==typeof t?t:t.id]=e}}toString(){let t=a.get(this);if(t&&!t.overlay)return t.tree.toString();let e="";for(let t of this.children){let n=t.toString();n&&(e&&(e+=","),e+=n)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(t=0){return new T(this.topNode,t)}cursorAt(t,e=0,n=0){let i=f.get(this)||this.topNode,r=new T(i);return r.moveTo(t,e),f.set(this,r._tree),r}get topNode(){return new x(this,0,0,null)}resolve(t,e=0){let n=y(f.get(this)||this.topNode,t,e,!1);return f.set(this,n),n}resolveInner(t,e=0){let n=y(d.get(this)||this.topNode,t,e,!0);return d.set(this,n),n}resolveStack(t,e=0){return function(t,e,n){let i=t.resolveInner(e,n),r=null;for(let t=i instanceof x?i:i.context.parent;t;t=t.parent)if(t.index<0){let s=t.parent;(r||(r=[i])).push(s.resolve(e,n)),t=s}else{let s=a.get(t.tree);if(s&&s.overlay&&s.overlay[0].from<=e&&s.overlay[s.overlay.length-1].to>=e){let o=new x(s.tree,s.overlay[0].from+t.from,-1,t);(r||(r=[i])).push(y(o,e,n,!1))}}return r?C(r):i}(this,t,e)}iterate(t){let{enter:e,leave:n,from:i=0,to:r=this.length}=t,s=t.mode||0,o=(s&p.IncludeAnonymous)>0;for(let t=this.cursor(s|p.IncludeAnonymous);;){let s=!1;if(t.from<=r&&t.to>=i&&(!o&&t.type.isAnonymous||!1!==e(t))){if(t.firstChild())continue;s=!0}for(;s&&n&&(o||!t.type.isAnonymous)&&n(t),!t.nextSibling();){if(!t.parent())return;s=!0}}}prop(t){return t.perNode?this.props?this.props[t.id]:void 0:this.type.prop(t)}get propValues(){let t=[];if(this.props)for(let e in this.props)t.push([+e,this.props[e]]);return t}balance(t={}){return this.children.length<=8?this:B(u.none,this.children,this.positions,0,this.children.length,0,this.length,((t,e,n)=>new g(this.type,t,e,n,this.propValues)),t.makeTree||((t,e,n)=>new g(u.none,t,e,n)))}static build(t){return function(t){var e;let{buffer:n,nodeSet:i,maxBufferLength:r=s,reused:o=[],minRepeatType:l=i.types.length}=t,a=Array.isArray(n)?new m(n,n.length):n,c=i.types,u=0,f=0;function d(t,e,n,s,m,x){let{id:k,start:S,end:A,size:M}=a,C=f,O=u;for(;M<0;){if(a.next(),-1==M){let e=o[k];return n.push(e),void s.push(S-t)}if(-3==M)return void(u=k);if(-4==M)return void(f=k);throw new RangeError(`Unrecognized record size: ${M}`)}let T,E,D=c[k],R=S-t;if(A-S<=r&&(E=function(t,e){let n=a.fork(),i=0,s=0,o=0,h=n.end-r,c={size:0,start:0,skip:0};t:for(let r=n.pos-t;n.pos>r;){let t=n.size;if(n.id==e&&t>=0){c.size=i,c.start=s,c.skip=o,o+=4,i+=4,n.next();continue}let a=n.pos-t;if(t<0||a<r||n.start<h)break;let u=n.id>=l?4:0,f=n.start;for(n.next();n.pos>a;){if(n.size<0){if(-3!=n.size)break t;u+=4}else n.id>=l&&(u+=4);n.next()}s=f,i+=t,o+=u}return(e<0||i==t)&&(c.size=i,c.start=s,c.skip=o),c.size>4?c:void 0}(a.pos-e,m))){let e=new Uint16Array(E.size-E.skip),n=a.pos-E.size,r=e.length;for(;a.pos>n;)r=b(E.start,e,r);T=new w(e,A-E.start,i),R=E.start-t}else{let t=a.pos-M;a.next();let e=[],n=[],i=k>=l?k:-1,s=0,o=A;for(;a.pos>t;)i>=0&&a.id==i&&a.size>=0?(a.end<=o-r&&(v(e,n,S,s,a.end,o,i,C,O),s=e.length,o=a.end),a.next()):x>2500?p(S,t,e,n):d(S,t,e,n,i,x+1);if(i>=0&&s>0&&s<e.length&&v(e,n,S,s,S,o,i,C,O),e.reverse(),n.reverse(),i>-1&&s>0){let t=function(t,e){return(n,i,r)=>{let s,o,l=0,a=n.length-1;if(a>=0&&(s=n[a])instanceof g){if(!a&&s.type==t&&s.length==r)return s;(o=s.prop(h.lookAhead))&&(l=i[a]+s.length+o)}return y(t,n,i,r,l,e)}}(D,O);T=B(D,e,n,0,e.length,0,A-S,t,t)}else T=y(D,e,n,A-S,C-A,O)}n.push(T),s.push(R)}function p(t,e,n,s){let o=[],l=0,h=-1;for(;a.pos>e;){let{id:t,start:e,end:n,size:i}=a;if(i>4)a.next();else{if(h>-1&&e<h)break;h<0&&(h=n-r),o.push(t,e,n),l++,a.next()}}if(l){let e=new Uint16Array(4*l),r=o[o.length-2];for(let t=o.length-3,n=0;t>=0;t-=3)e[n++]=o[t],e[n++]=o[t+1]-r,e[n++]=o[t+2]-r,e[n++]=n;n.push(new w(e,o[2]-r,i)),s.push(r-t)}}function v(t,e,n,r,s,o,l,h,a){let c=[],u=[];for(;t.length>r;)c.push(t.pop()),u.push(e.pop()+n-s);t.push(y(i.types[l],c,u,o-s,h-o,a)),e.push(s-n)}function y(t,e,n,i,r,s,o){if(s){let t=[h.contextHash,s];o=o?[t].concat(o):[t]}if(r>25){let t=[h.lookAhead,r];o=o?[t].concat(o):[t]}return new g(t,e,n,i,o)}function b(t,e,n){let{id:i,start:r,end:s,size:o}=a;if(a.next(),o>=0&&i<l){let l=n;if(o>4){let i=a.pos-(o-4);for(;a.pos>i;)n=b(t,e,n)}e[--n]=l,e[--n]=s-t,e[--n]=r-t,e[--n]=i}else-3==o?u=i:-4==o&&(f=i);return n}let x=[],k=[];for(;a.pos>0;)d(t.start||0,t.bufferStart||0,x,k,-1,0);let S=null!==(e=t.length)&&void 0!==e?e:x.length?k[0]+x[0].length:0;return new g(c[t.topID],x.reverse(),k.reverse(),S)}(t)}}g.empty=new g(u.none,[],[],0);class m{constructor(t,e){this.buffer=t,this.index=e}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new m(this.buffer,this.index)}}class w{constructor(t,e,n){this.buffer=t,this.length=e,this.set=n}get type(){return u.none}toString(){let t=[];for(let e=0;e<this.buffer.length;)t.push(this.childString(e)),e=this.buffer[e+3];return t.join(",")}childString(t){let e=this.buffer[t],n=this.buffer[t+3],i=this.set.types[e],r=i.name;if(/\W/.test(r)&&!i.isError&&(r=JSON.stringify(r)),n==(t+=4))return r;let s=[];for(;t<n;)s.push(this.childString(t)),t=this.buffer[t+3];return r+"("+s.join(",")+")"}findChild(t,e,n,i,r){let{buffer:s}=this,o=-1;for(let l=t;l!=e&&!(v(r,i,s[l+1],s[l+2])&&(o=l,n>0));l=s[l+3]);return o}slice(t,e,n){let i=this.buffer,r=new Uint16Array(e-t),s=0;for(let o=t,l=0;o<e;){r[l++]=i[o++],r[l++]=i[o++]-n;let e=r[l++]=i[o++]-n;r[l++]=i[o++]-t,s=Math.max(s,e)}return new w(r,s,this.set)}}function v(t,e,n,i){switch(t){case-2:return n<e;case-1:return i>=e&&n<e;case 0:return n<e&&i>e;case 1:return n<=e&&i>e;case 2:return i>e;case 4:return!0}}function y(t,e,n,i){for(var r;t.from==t.to||(n<1?t.from>=e:t.from>e)||(n>-1?t.to<=e:t.to<e);){let e=!i&&t instanceof x&&t.index<0?null:t.parent;if(!e)return t;t=e}let s=i?0:p.IgnoreOverlays;if(i)for(let i=t,o=i.parent;o;i=o,o=i.parent)i instanceof x&&i.index<0&&(null===(r=o.enter(e,n,s))||void 0===r?void 0:r.from)!=i.from&&(t=o);for(;;){let i=t.enter(e,n,s);if(!i)return t;t=i}}class b{cursor(t=0){return new T(this,t)}getChild(t,e=null,n=null){let i=k(this,t,e,n);return i.length?i[0]:null}getChildren(t,e=null,n=null){return k(this,t,e,n)}resolve(t,e=0){return y(this,t,e,!1)}resolveInner(t,e=0){return y(this,t,e,!0)}matchContext(t){return S(this.parent,t)}enterUnfinishedNodesBefore(t){let e=this.childBefore(t),n=this;for(;e;){let t=e.lastChild;if(!t||t.to!=e.to)break;t.type.isError&&t.from==t.to?(n=e,e=t.prevSibling):e=t}return n}get node(){return this}get next(){return this.parent}}class x extends b{constructor(t,e,n,i){super(),this._tree=t,this.from=e,this.index=n,this._parent=i}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(t,e,n,i,r=0){for(let s=this;;){for(let{children:o,positions:l}=s._tree,h=e>0?o.length:-1;t!=h;t+=e){let h=o[t],c=l[t]+s.from;if(v(i,n,c,c+h.length))if(h instanceof w){if(r&p.ExcludeBuffers)continue;let o=h.findChild(0,h.buffer.length,e,n-c,i);if(o>-1)return new M(new A(s,h,t,c),null,o)}else if(r&p.IncludeAnonymous||!h.type.isAnonymous||E(h)){let o;if(!(r&p.IgnoreMounts)&&(o=a.get(h))&&!o.overlay)return new x(o.tree,c,t,s);let l=new x(h,c,t,s);return r&p.IncludeAnonymous||!l.type.isAnonymous?l:l.nextChild(e<0?h.children.length-1:0,e,n,i)}}if(r&p.IncludeAnonymous||!s.type.isAnonymous)return null;if(t=s.index>=0?s.index+e:e<0?-1:s._parent._tree.children.length,s=s._parent,!s)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(t){return this.nextChild(0,1,t,2)}childBefore(t){return this.nextChild(this._tree.children.length-1,-1,t,-2)}enter(t,e,n=0){let i;if(!(n&p.IgnoreOverlays)&&(i=a.get(this._tree))&&i.overlay){let n=t-this.from;for(let{from:t,to:r}of i.overlay)if((e>0?t<=n:t<n)&&(e<0?r>=n:r>n))return new x(i.tree,i.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,t,e,n)}nextSignificantParent(){let t=this;for(;t.type.isAnonymous&&t._parent;)t=t._parent;return t}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function k(t,e,n,i){let r=t.cursor(),s=[];if(!r.firstChild())return s;if(null!=n)for(let t=!1;!t;)if(t=r.type.is(n),!r.nextSibling())return s;for(;;){if(null!=i&&r.type.is(i))return s;if(r.type.is(e)&&s.push(r.node),!r.nextSibling())return null==i?s:[]}}function S(t,e,n=e.length-1){for(let i=t;n>=0;i=i.parent){if(!i)return!1;if(!i.type.isAnonymous){if(e[n]&&e[n]!=i.name)return!1;n--}}return!0}class A{constructor(t,e,n,i){this.parent=t,this.buffer=e,this.index=n,this.start=i}}class M extends b{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(t,e,n){super(),this.context=t,this._parent=e,this.index=n,this.type=t.buffer.set.types[t.buffer.buffer[n]]}child(t,e,n){let{buffer:i}=this.context,r=i.findChild(this.index+4,i.buffer[this.index+3],t,e-this.context.start,n);return r<0?null:new M(this.context,this,r)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(t){return this.child(1,t,2)}childBefore(t){return this.child(-1,t,-2)}enter(t,e,n=0){if(n&p.ExcludeBuffers)return null;let{buffer:i}=this.context,r=i.findChild(this.index+4,i.buffer[this.index+3],e>0?1:-1,t-this.context.start,e);return r<0?null:new M(this.context,this,r)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(t){return this._parent?null:this.context.parent.nextChild(this.context.index+t,t,0,4)}get nextSibling(){let{buffer:t}=this.context,e=t.buffer[this.index+3];return e<(this._parent?t.buffer[this._parent.index+3]:t.buffer.length)?new M(this.context,this._parent,e):this.externalSibling(1)}get prevSibling(){let{buffer:t}=this.context,e=this._parent?this._parent.index+4:0;return this.index==e?this.externalSibling(-1):new M(this.context,this._parent,t.findChild(e,this.index,-1,0,4))}get tree(){return null}toTree(){let t=[],e=[],{buffer:n}=this.context,i=this.index+4,r=n.buffer[this.index+3];if(r>i){let s=n.buffer[this.index+1];t.push(n.slice(i,r,s)),e.push(0)}return new g(this.type,t,e,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function C(t){if(!t.length)return null;let e=0,n=t[0];for(let i=1;i<t.length;i++){let r=t[i];(r.from>n.from||r.to<n.to)&&(n=r,e=i)}let i=n instanceof x&&n.index<0?null:n.parent,r=t.slice();return i?r[e]=i:r.splice(e,1),new O(r,n)}class O{constructor(t,e){this.heads=t,this.node=e}get next(){return C(this.heads)}}class T{get name(){return this.type.name}constructor(t,e=0){if(this.mode=e,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,t instanceof x)this.yieldNode(t);else{this._tree=t.context.parent,this.buffer=t.context;for(let e=t._parent;e;e=e._parent)this.stack.unshift(e.index);this.bufferNode=t,this.yieldBuf(t.index)}}yieldNode(t){return!!t&&(this._tree=t,this.type=t.type,this.from=t.from,this.to=t.to,!0)}yieldBuf(t,e){this.index=t;let{start:n,buffer:i}=this.buffer;return this.type=e||i.set.types[i.buffer[t]],this.from=n+i.buffer[t+1],this.to=n+i.buffer[t+2],!0}yield(t){return!!t&&(t instanceof x?(this.buffer=null,this.yieldNode(t)):(this.buffer=t.context,this.yieldBuf(t.index,t.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(t,e,n){if(!this.buffer)return this.yield(this._tree.nextChild(t<0?this._tree._tree.children.length-1:0,t,e,n,this.mode));let{buffer:i}=this.buffer,r=i.findChild(this.index+4,i.buffer[this.index+3],t,e-this.buffer.start,n);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(t){return this.enterChild(1,t,2)}childBefore(t){return this.enterChild(-1,t,-2)}enter(t,e,n=this.mode){return this.buffer?!(n&p.ExcludeBuffers)&&this.enterChild(1,t,e):this.yield(this._tree.enter(t,e,n))}parent(){if(!this.buffer)return this.yieldNode(this.mode&p.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let t=this.mode&p.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(t)}sibling(t){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+t,t,0,4,this.mode));let{buffer:e}=this.buffer,n=this.stack.length-1;if(t<0){let t=n<0?0:this.stack[n]+4;if(this.index!=t)return this.yieldBuf(e.findChild(t,this.index,-1,0,4))}else{let t=e.buffer[this.index+3];if(t<(n<0?e.buffer.length:e.buffer[this.stack[n]+3]))return this.yieldBuf(t)}return n<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+t,t,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(t){let e,n,{buffer:i}=this;if(i){if(t>0){if(this.index<i.buffer.buffer.length)return!1}else for(let t=0;t<this.index;t++)if(i.buffer.buffer[t+3]<this.index)return!1;({index:e,parent:n}=i)}else({index:e,_parent:n}=this._tree);for(;n;({index:e,_parent:n}=n))if(e>-1)for(let i=e+t,r=t<0?-1:n._tree.children.length;i!=r;i+=t){let t=n._tree.children[i];if(this.mode&p.IncludeAnonymous||t instanceof w||!t.type.isAnonymous||E(t))return!1}return!0}move(t,e){if(e&&this.enterChild(t,0,4))return!0;for(;;){if(this.sibling(t))return!0;if(this.atLastNode(t)||!this.parent())return!1}}next(t=!0){return this.move(1,t)}prev(t=!0){return this.move(-1,t)}moveTo(t,e=0){for(;(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t))&&this.parent(););for(;this.enterChild(1,t,e););return this}get node(){if(!this.buffer)return this._tree;let t=this.bufferNode,e=null,n=0;if(t&&t.context==this.buffer)t:for(let i=this.index,r=this.stack.length;r>=0;){for(let s=t;s;s=s._parent)if(s.index==i){if(i==this.index)return s;e=s,n=r+1;break t}i=this.stack[--r]}for(let t=n;t<this.stack.length;t++)e=new M(this.buffer,e,this.stack[t]);return this.bufferNode=new M(this.buffer,e,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(t,e){for(let n=0;;){let i=!1;if(this.type.isAnonymous||!1!==t(this)){if(this.firstChild()){n++;continue}this.type.isAnonymous||(i=!0)}for(;;){if(i&&e&&e(this),i=this.type.isAnonymous,!n)return;if(this.nextSibling())break;this.parent(),n--,i=!0}}}matchContext(t){if(!this.buffer)return S(this.node.parent,t);let{buffer:e}=this.buffer,{types:n}=e.set;for(let i=t.length-1,r=this.stack.length-1;i>=0;r--){if(r<0)return S(this._tree,t,i);let s=n[e.buffer[this.stack[r]]];if(!s.isAnonymous){if(t[i]&&t[i]!=s.name)return!1;i--}}return!0}}function E(t){return t.children.some((t=>t instanceof w||!t.type.isAnonymous||E(t)))}const D=new WeakMap;function R(t,e){if(!t.isAnonymous||e instanceof w||e.type!=t)return 1;let n=D.get(e);if(null==n){n=1;for(let i of e.children){if(i.type!=t||!(i instanceof g)){n=1;break}n+=R(t,i)}D.set(e,n)}return n}function B(t,e,n,i,r,s,o,l,h){let a=0;for(let n=i;n<r;n++)a+=R(t,e[n]);let c=Math.ceil(1.5*a/8),u=[],f=[];return function e(n,i,r,o,l){for(let a=r;a<o;){let r=a,d=i[a],p=R(t,n[a]);for(a++;a<o;a++){let e=R(t,n[a]);if(p+e>=c)break;p+=e}if(a==r+1){if(p>c){let t=n[r];e(t.children,t.positions,0,t.children.length,i[r]+l);continue}u.push(n[r])}else{let e=i[a-1]+n[a-1].length-d;u.push(B(t,n,i,r,a,d,e,null,h))}f.push(d+l-s)}}(e,n,i,r,0),(l||h)(u,f,o)}class P{constructor(t,e,n,i,r=!1,s=!1){this.from=t,this.to=e,this.tree=n,this.offset=i,this.open=(r?1:0)|(s?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(t,e=[],n=!1){let i=[new P(0,t.length,t,0,!1,n)];for(let n of e)n.to>t.length&&i.push(n);return i}static applyChanges(t,e,n=128){if(!e.length)return t;let i=[],r=1,s=t.length?t[0]:null;for(let o=0,l=0,h=0;;o++){let a=o<e.length?e[o]:null,c=a?a.fromA:1e9;if(c-l>=n)for(;s&&s.from<c;){let e=s;if(l>=e.from||c<=e.to||h){let t=Math.max(e.from,l)-h,n=Math.min(e.to,c)-h;e=t>=n?null:new P(t,n,e.tree,e.offset+h,o>0,!!a)}if(e&&i.push(e),s.to>c)break;s=r<t.length?t[r++]:null}if(!a)break;l=a.toA,h=a.toA-a.toB}return i}}class L{startParse(t,e,n){return"string"==typeof t&&(t=new N(t)),n=n?n.length?n.map((t=>new l(t.from,t.to))):[new l(0,0)]:[new l(0,t.length)],this.createParse(t,e||[],n)}parse(t,e,n){let i=this.startParse(t,e,n);for(;;){let t=i.advance();if(t)return t}}}class N{constructor(t){this.string=t}get length(){return this.string.length}chunk(t){return this.string.slice(t)}get lineChunks(){return!1}read(t,e){return this.string.slice(t,e)}}new h({perNode:!0});let I=0;class F{constructor(t,e,n,i){this.name=t,this.set=e,this.base=n,this.modified=i,this.id=I++}toString(){let{name:t}=this;for(let e of this.modified)e.name&&(t=`${e.name}(${t})`);return t}static define(t,e){let n="string"==typeof t?t:"?";if(t instanceof F&&(e=t),null==e?void 0:e.base)throw new Error("Can not derive from a modified tag");let i=new F(n,[],null,[]);if(i.set.push(i),e)for(let t of e.set)i.set.push(t);return i}static defineModifier(t){let e=new z(t);return t=>t.modified.indexOf(e)>-1?t:z.get(t.base||t,t.modified.concat(e).sort(((t,e)=>t.id-e.id)))}}let $=0;class z{constructor(t){this.name=t,this.instances=[],this.id=$++}static get(t,e){if(!e.length)return t;let n=e[0].instances.find((n=>{return n.base==t&&(i=e,r=n.modified,i.length==r.length&&i.every(((t,e)=>t==r[e])));var i,r}));if(n)return n;let i=[],r=new F(t.name,i,t,e);for(let t of e)t.instances.push(r);let s=function(t){let e=[[]];for(let n=0;n<t.length;n++)for(let i=0,r=e.length;i<r;i++)e.push(e[i].concat(t[n]));return e.sort(((t,e)=>e.length-t.length))}(e);for(let e of t.set)if(!e.modified.length)for(let t of s)i.push(z.get(e,t));return r}}function H(t){let e=Object.create(null);for(let n in t){let i=t[n];Array.isArray(i)||(i=[i]);for(let t of n.split(" "))if(t){let n=[],r=2,s=t;for(let e=0;;){if("..."==s&&e>0&&e+3==t.length){r=1;break}let i=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(s);if(!i)throw new RangeError("Invalid path: "+t);if(n.push("*"==i[0]?"":'"'==i[0][0]?JSON.parse(i[0]):i[0]),e+=i[0].length,e==t.length)break;let o=t[e++];if(e==t.length&&"!"==o){r=0;break}if("/"!=o)throw new RangeError("Invalid path: "+t);s=t.slice(e)}let o=n.length-1,l=n[o];if(!l)throw new RangeError("Invalid path: "+t);let h=new _(i,r,o>0?n.slice(0,o):null);e[l]=h.sort(e[l])}}return V.add(e)}const V=new h;class _{constructor(t,e,n,i){this.tags=t,this.mode=e,this.context=n,this.next=i}get opaque(){return 0==this.mode}get inherit(){return 1==this.mode}sort(t){return!t||t.depth<this.depth?(this.next=t,this):(t.next=this.sort(t.next),t)}get depth(){return this.context?this.context.length:0}}function W(t,e){let n=Object.create(null);for(let e of t)if(Array.isArray(e.tag))for(let t of e.tag)n[t.id]=e.class;else n[e.tag.id]=e.class;let{scope:i,all:r=null}=e||{};return{style:t=>{let e=r;for(let i of t)for(let t of i.set){let i=n[t.id];if(i){e=e?e+" "+i:i;break}}return e},scope:i}}_.empty=new _([],2,null);const j=F.define,q=j(),K=j(),G=j(K),U=j(K),Y=j(),J=j(Y),X=j(Y),Z=j(),Q=j(Z),tt=j(),et=j(),nt=j(),it=j(nt),rt=j(),st={comment:q,lineComment:j(q),blockComment:j(q),docComment:j(q),name:K,variableName:j(K),typeName:G,tagName:j(G),propertyName:U,attributeName:j(U),className:j(K),labelName:j(K),namespace:j(K),macroName:j(K),literal:Y,string:J,docString:j(J),character:j(J),attributeValue:j(J),number:X,integer:j(X),float:j(X),bool:j(Y),regexp:j(Y),escape:j(Y),color:j(Y),url:j(Y),keyword:tt,self:j(tt),null:j(tt),atom:j(tt),unit:j(tt),modifier:j(tt),operatorKeyword:j(tt),controlKeyword:j(tt),definitionKeyword:j(tt),moduleKeyword:j(tt),operator:et,derefOperator:j(et),arithmeticOperator:j(et),logicOperator:j(et),bitwiseOperator:j(et),compareOperator:j(et),updateOperator:j(et),definitionOperator:j(et),typeOperator:j(et),controlOperator:j(et),punctuation:nt,separator:j(nt),bracket:it,angleBracket:j(it),squareBracket:j(it),paren:j(it),brace:j(it),content:Z,heading:Q,heading1:j(Q),heading2:j(Q),heading3:j(Q),heading4:j(Q),heading5:j(Q),heading6:j(Q),contentSeparator:j(Z),list:j(Z),quote:j(Z),emphasis:j(Z),strong:j(Z),link:j(Z),monospace:j(Z),strikethrough:j(Z),inserted:j(),deleted:j(),changed:j(),invalid:j(),meta:rt,documentMeta:j(rt),annotation:j(rt),processingInstruction:j(rt),definition:F.defineModifier("definition"),constant:F.defineModifier("constant"),function:F.defineModifier("function"),standard:F.defineModifier("standard"),local:F.defineModifier("local"),special:F.defineModifier("special")};for(let t in st){let e=st[t];e instanceof F&&(e.name=t)}W([{tag:st.link,class:"tok-link"},{tag:st.heading,class:"tok-heading"},{tag:st.emphasis,class:"tok-emphasis"},{tag:st.strong,class:"tok-strong"},{tag:st.keyword,class:"tok-keyword"},{tag:st.atom,class:"tok-atom"},{tag:st.bool,class:"tok-bool"},{tag:st.url,class:"tok-url"},{tag:st.labelName,class:"tok-labelName"},{tag:st.inserted,class:"tok-inserted"},{tag:st.deleted,class:"tok-deleted"},{tag:st.literal,class:"tok-literal"},{tag:st.string,class:"tok-string"},{tag:st.number,class:"tok-number"},{tag:[st.regexp,st.escape,st.special(st.string)],class:"tok-string2"},{tag:st.variableName,class:"tok-variableName"},{tag:st.local(st.variableName),class:"tok-variableName tok-local"},{tag:st.definition(st.variableName),class:"tok-variableName tok-definition"},{tag:st.special(st.variableName),class:"tok-variableName2"},{tag:st.definition(st.propertyName),class:"tok-propertyName tok-definition"},{tag:st.typeName,class:"tok-typeName"},{tag:st.namespace,class:"tok-namespace"},{tag:st.className,class:"tok-className"},{tag:st.macroName,class:"tok-macroName"},{tag:st.propertyName,class:"tok-propertyName"},{tag:st.operator,class:"tok-operator"},{tag:st.comment,class:"tok-comment"},{tag:st.meta,class:"tok-meta"},{tag:st.invalid,class:"tok-invalid"},{tag:st.punctuation,class:"tok-punctuation"}]);var ot;n(417);const lt=new h,ht=new h;class at{constructor(t,e,n=[],r=""){this.data=t,this.name=r,i.$t.prototype.hasOwnProperty("tree")||Object.defineProperty(i.$t.prototype,"tree",{get(){return ut(this)}}),this.parser=e,this.extension=[bt.of(this),i.$t.languageData.of(((t,e,n)=>{let i=ct(t,e,n),r=i.type.prop(lt);if(!r)return[];let s=t.facet(r),o=i.type.prop(ht);if(o){let r=i.resolve(e-i.from,n);for(let e of o)if(e.test(r,t)){let n=t.facet(e.facet);return"replace"==e.type?n:n.concat(s)}}return s}))].concat(n)}isActiveAt(t,e,n=-1){return ct(t,e,n).type.prop(lt)==this.data}findRegions(t){let e=t.facet(bt);if((null==e?void 0:e.data)==this.data)return[{from:0,to:t.doc.length}];if(!e||!e.allowsNesting)return[];let n=[],i=(t,e)=>{if(t.prop(lt)==this.data)return void n.push({from:e,to:e+t.length});let r=t.prop(h.mounted);if(r){if(r.tree.prop(lt)==this.data){if(r.overlay)for(let t of r.overlay)n.push({from:t.from+e,to:t.to+e});else n.push({from:e,to:e+t.length});return}if(r.overlay){let t=n.length;if(i(r.tree,r.overlay[0].from+e),n.length>t)return}}for(let n=0;n<t.children.length;n++){let r=t.children[n];r instanceof g&&i(r,t.positions[n]+e)}};return i(ut(t),0),n}get allowsNesting(){return!0}}function ct(t,e,n){let i=t.facet(bt),r=ut(t).topNode;if(!i||i.allowsNesting)for(let t=r;t;t=t.enter(e,n,p.ExcludeBuffers))t.type.isTop&&(r=t);return r}function ut(t){let e=t.field(at.state,!1);return e?e.tree:g.empty}at.setState=i.Pe.define();class ft{constructor(t){this.doc=t,this.cursorPos=0,this.string="",this.cursor=t.iter()}get length(){return this.doc.length}syncTo(t){return this.string=this.cursor.next(t-this.cursorPos).value,this.cursorPos=t+this.string.length,this.cursorPos-this.string.length}chunk(t){return this.syncTo(t),this.string}get lineChunks(){return!0}read(t,e){let n=this.cursorPos-this.string.length;return t<n||e>=this.cursorPos?this.doc.sliceString(t,e):this.string.slice(t-n,e-n)}}let dt=null;class pt{constructor(t,e,n=[],i,r,s,o,l){this.parser=t,this.state=e,this.fragments=n,this.tree=i,this.treeLen=r,this.viewport=s,this.skipped=o,this.scheduleOn=l,this.parse=null,this.tempSkipped=[]}static create(t,e,n){return new pt(t,e,[],g.empty,0,n,[],null)}startParse(){return this.parser.startParse(new ft(this.state.doc),this.fragments)}work(t,e){return null!=e&&e>=this.state.doc.length&&(e=void 0),this.tree!=g.empty&&this.isDone(null!=e?e:this.state.doc.length)?(this.takeTree(),!0):this.withContext((()=>{var n;if("number"==typeof t){let e=Date.now()+t;t=()=>Date.now()>e}for(this.parse||(this.parse=this.startParse()),null!=e&&(null==this.parse.stoppedAt||this.parse.stoppedAt>e)&&e<this.state.doc.length&&this.parse.stopAt(e);;){let i=this.parse.advance();if(i){if(this.fragments=this.withoutTempSkipped(P.addTree(i,this.fragments,null!=this.parse.stoppedAt)),this.treeLen=null!==(n=this.parse.stoppedAt)&&void 0!==n?n:this.state.doc.length,this.tree=i,this.parse=null,!(this.treeLen<(null!=e?e:this.state.doc.length)))return!0;this.parse=this.startParse()}if(t())return!1}}))}takeTree(){let t,e;this.parse&&(t=this.parse.parsedPos)>=this.treeLen&&((null==this.parse.stoppedAt||this.parse.stoppedAt>t)&&this.parse.stopAt(t),this.withContext((()=>{for(;!(e=this.parse.advance()););})),this.treeLen=t,this.tree=e,this.fragments=this.withoutTempSkipped(P.addTree(this.tree,this.fragments,!0)),this.parse=null)}withContext(t){let e=dt;dt=this;try{return t()}finally{dt=e}}withoutTempSkipped(t){for(let e;e=this.tempSkipped.pop();)t=gt(t,e.from,e.to);return t}changes(t,e){let{fragments:n,tree:i,treeLen:r,viewport:s,skipped:o}=this;if(this.takeTree(),!t.empty){let e=[];if(t.iterChangedRanges(((t,n,i,r)=>e.push({fromA:t,toA:n,fromB:i,toB:r}))),n=P.applyChanges(n,e),i=g.empty,r=0,s={from:t.mapPos(s.from,-1),to:t.mapPos(s.to,1)},this.skipped.length){o=[];for(let e of this.skipped){let n=t.mapPos(e.from,1),i=t.mapPos(e.to,-1);n<i&&o.push({from:n,to:i})}}}return new pt(this.parser,e,n,i,r,s,o,this.scheduleOn)}updateViewport(t){if(this.viewport.from==t.from&&this.viewport.to==t.to)return!1;this.viewport=t;let e=this.skipped.length;for(let e=0;e<this.skipped.length;e++){let{from:n,to:i}=this.skipped[e];n<t.to&&i>t.from&&(this.fragments=gt(this.fragments,n,i),this.skipped.splice(e--,1))}return!(this.skipped.length>=e||(this.reset(),0))}reset(){this.parse&&(this.takeTree(),this.parse=null)}skipUntilInView(t,e){this.skipped.push({from:t,to:e})}static getSkippingParser(t){return new class extends L{createParse(e,n,i){let r=i[0].from,s=i[i.length-1].to;return{parsedPos:r,advance(){let e=dt;if(e){for(let t of i)e.tempSkipped.push(t);t&&(e.scheduleOn=e.scheduleOn?Promise.all([e.scheduleOn,t]):t)}return this.parsedPos=s,new g(u.none,[],[],s-r)},stoppedAt:null,stopAt(){}}}}}isDone(t){t=Math.min(t,this.state.doc.length);let e=this.fragments;return this.treeLen>=t&&e.length&&0==e[0].from&&e[0].to>=t}static get(){return dt}}function gt(t,e,n){return P.applyChanges(t,[{fromA:e,toA:n,fromB:e,toB:n}])}class mt{constructor(t){this.context=t,this.tree=t.tree}apply(t){if(!t.docChanged&&this.tree==this.context.tree)return this;let e=this.context.changes(t.changes,t.state),n=this.context.treeLen==t.startState.doc.length?void 0:Math.max(t.changes.mapPos(this.context.treeLen),e.viewport.to);return e.work(20,n)||e.takeTree(),new mt(e)}static init(t){let e=Math.min(3e3,t.doc.length),n=pt.create(t.facet(bt).parser,t,{from:0,to:e});return n.work(20,e)||n.takeTree(),new mt(n)}}at.state=i.sU.define({create:mt.init,update(t,e){for(let t of e.effects)if(t.is(at.setState))return t.value;return e.startState.facet(bt)!=e.state.facet(bt)?mt.init(e.state):t.apply(e)}});let wt=t=>{let e=setTimeout((()=>t()),500);return()=>clearTimeout(e)};"undefined"!=typeof requestIdleCallback&&(wt=t=>{let e=-1,n=setTimeout((()=>{e=requestIdleCallback(t,{timeout:400})}),100);return()=>e<0?clearTimeout(n):cancelIdleCallback(e)});const vt="undefined"!=typeof navigator&&(null===(ot=navigator.scheduling)||void 0===ot?void 0:ot.isInputPending)?()=>navigator.scheduling.isInputPending():null,yt=r.Z9.fromClass(class{constructor(t){this.view=t,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(t){let e=this.view.state.field(at.state).context;(e.updateViewport(t.view.viewport)||this.view.viewport.to>e.treeLen)&&this.scheduleWork(),(t.docChanged||t.selectionSet)&&(this.view.hasFocus&&(this.chunkBudget+=50),this.scheduleWork()),this.checkAsyncSchedule(e)}scheduleWork(){if(this.working)return;let{state:t}=this.view,e=t.field(at.state);e.tree==e.context.tree&&e.context.isDone(t.doc.length)||(this.working=wt(this.work))}work(t){this.working=null;let e=Date.now();if(this.chunkEnd<e&&(this.chunkEnd<0||this.view.hasFocus)&&(this.chunkEnd=e+3e4,this.chunkBudget=3e3),this.chunkBudget<=0)return;let{state:n,viewport:{to:i}}=this.view,r=n.field(at.state);if(r.tree==r.context.tree&&r.context.isDone(i+1e5))return;let s=Date.now()+Math.min(this.chunkBudget,100,t&&!vt?Math.max(25,t.timeRemaining()-5):1e9),o=r.context.treeLen<i&&n.doc.length>i+1e3,l=r.context.work((()=>vt&&vt()||Date.now()>s),i+(o?0:1e5));this.chunkBudget-=Date.now()-e,(l||this.chunkBudget<=0)&&(r.context.takeTree(),this.view.dispatch({effects:at.setState.of(new mt(r.context))})),this.chunkBudget>0&&(!l||o)&&this.scheduleWork(),this.checkAsyncSchedule(r.context)}checkAsyncSchedule(t){t.scheduleOn&&(this.workScheduled++,t.scheduleOn.then((()=>this.scheduleWork())).catch((t=>(0,r.c_)(this.view.state,t))).then((()=>this.workScheduled--)),t.scheduleOn=null)}destroy(){this.working&&this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),bt=i.sj.define({combine:t=>t.length?t[0]:null,enables:t=>[at.state,yt,r.Lz.contentAttributes.compute([t],(e=>{let n=e.facet(t);return n&&n.name?{"data-language":n.name}:{}}))]}),xt=i.sj.define(),kt=i.sj.define({combine:t=>{if(!t.length)return"  ";let e=t[0];if(!e||/\S/.test(e)||Array.from(e).some((t=>t!=e[0])))throw new Error("Invalid indent unit: "+JSON.stringify(t[0]));return e}});function St(t){let e=t.facet(kt);return 9==e.charCodeAt(0)?t.tabSize*e.length:e.length}function At(t,e){let n="",i=t.tabSize,r=t.facet(kt)[0];if("\t"==r){for(;e>=i;)n+="\t",e-=i;r=" "}for(let t=0;t<e;t++)n+=r;return n}function Mt(t,e){t instanceof i.$t&&(t=new Ct(t));for(let n of t.state.facet(xt)){let i=n(t,e);if(void 0!==i)return i}let n=ut(t.state);return n.length>=e?function(t,e,n){let i=e.resolveStack(n),r=e.resolveInner(n,-1).resolve(n,0).enterUnfinishedNodesBefore(n);if(r!=i.node){let t=[];for(let e=r;e&&(e.from!=i.node.from||e.type!=i.node.type);e=e.parent)t.push(e);for(let e=t.length-1;e>=0;e--)i={node:t[e],next:i}}return Tt(i,t,n)}(t,n,e):null}class Ct{constructor(t,e={}){this.state=t,this.options=e,this.unit=St(t)}lineAt(t,e=1){let n=this.state.doc.lineAt(t),{simulateBreak:i,simulateDoubleBreak:r}=this.options;return null!=i&&i>=n.from&&i<=n.to?r&&i==t?{text:"",from:t}:(e<0?i<t:i<=t)?{text:n.text.slice(i-n.from),from:i}:{text:n.text.slice(0,i-n.from),from:n.from}:n}textAfterPos(t,e=1){if(this.options.simulateDoubleBreak&&t==this.options.simulateBreak)return"";let{text:n,from:i}=this.lineAt(t,e);return n.slice(t-i,Math.min(n.length,t+100-i))}column(t,e=1){let{text:n,from:i}=this.lineAt(t,e),r=this.countColumn(n,t-i),s=this.options.overrideIndentation?this.options.overrideIndentation(i):-1;return s>-1&&(r+=s-this.countColumn(n,n.search(/\S|$/))),r}countColumn(t,e=t.length){return(0,i.y$)(t,this.state.tabSize,e)}lineIndent(t,e=1){let{text:n,from:i}=this.lineAt(t,e),r=this.options.overrideIndentation;if(r){let t=r(i);if(t>-1)return t}return this.countColumn(n,n.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}const Ot=new h;function Tt(t,e,n){for(let i=t;i;i=i.next){let t=Et(i.node);if(t)return t(Rt.create(e,n,i))}return 0}function Et(t){let e=t.type.prop(Ot);if(e)return e;let n,i=t.firstChild;if(i&&(n=i.type.prop(h.closedBy))){let e=t.lastChild,i=e&&n.indexOf(e.name)>-1;return t=>function(t,e,n,i,r){let s=t.textAfter,o=s.match(/^\s*/)[0].length,l=i&&s.slice(o,o+i.length)==i||r==t.pos+o,h=e?function(t){let e=t.node,n=e.childAfter(e.from),i=e.lastChild;if(!n)return null;let r=t.options.simulateBreak,s=t.state.doc.lineAt(n.from),o=null==r||r<=s.from?s.to:Math.min(s.to,r);for(let t=n.to;;){let r=e.childAfter(t);if(!r||r==i)return null;if(!r.type.isSkipped){if(r.from>=o)return null;let t=/^ */.exec(s.text.slice(n.to-s.from))[0].length;return{from:n.from,to:n.to+t}}t=r.to}}(t):null;return h?l?t.column(h.from):t.column(h.to):t.baseIndent+(l?0:t.unit*n)}(t,!0,1,void 0,i&&!function(t){return t.pos==t.options.simulateBreak&&t.options.simulateDoubleBreak}(t)?e.from:void 0)}return null==t.parent?Dt:null}function Dt(){return 0}class Rt extends Ct{constructor(t,e,n){super(t.state,t.options),this.base=t,this.pos=e,this.context=n}get node(){return this.context.node}static create(t,e,n){return new Rt(t,e,n)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(t){let e=this.state.doc.lineAt(t.from);for(;;){let n=t.resolve(e.from);for(;n.parent&&n.parent.from==n.from;)n=n.parent;if(Bt(n,t))break;e=this.state.doc.lineAt(n.from)}return this.lineIndent(e.from)}continue(){return Tt(this.context.next,this.base,this.pos)}}function Bt(t,e){for(let n=e;n;n=n.parent)if(t==n)return!0;return!1}r.xO,r.wJ;st.meta,st.link,st.heading,st.emphasis,st.strong,st.strikethrough,st.keyword,st.atom,st.bool,st.url,st.contentSeparator,st.labelName,st.literal,st.inserted,st.string,st.deleted,st.regexp,st.escape,st.string,st.variableName,st.variableName,st.typeName,st.namespace,st.className,st.variableName,st.macroName,st.propertyName,st.comment,st.invalid;const Pt=new h;function Lt(t,e,n){let i=t.prop(e<0?h.openedBy:h.closedBy);if(i)return i;if(1==t.name.length){let i=n.indexOf(t.name);if(i>-1&&i%2==(e<0?1:0))return[n[i+e]]}return null}function Nt(t){let e=t.type.prop(Pt);return e?e(t.node):t}function It(t,e,n,i={}){let r=i.maxScanDistance||1e4,s=i.brackets||"()[]{}",o=ut(t),l=o.resolveInner(e,n);for(let t=l;t;t=t.parent){let i=Lt(t.type,n,s);if(i&&t.from<t.to){let r=Nt(t);if(r&&(n>0?e>=r.from&&e<r.to:e>r.from&&e<=r.to))return Ft(0,0,n,t,r,i,s)}}return function(t,e,n,i,r,s,o){let l=n<0?t.sliceDoc(e-1,e):t.sliceDoc(e,e+1),h=o.indexOf(l);if(h<0||h%2==0!=n>0)return null;let a={from:n<0?e-1:e,to:n>0?e+1:e},c=t.doc.iterRange(e,n>0?t.doc.length:0),u=0;for(let t=0;!c.next().done&&t<=s;){let s=c.value;n<0&&(t+=s.length);let l=e+t*n;for(let t=n>0?0:s.length-1,e=n>0?s.length:-1;t!=e;t+=n){let e=o.indexOf(s[t]);if(!(e<0||i.resolveInner(l+t,1).type!=r))if(e%2==0==n>0)u++;else{if(1==u)return{start:a,end:{from:l+t,to:l+t+1},matched:e>>1==h>>1};u--}}n>0&&(t+=s.length)}return c.done?{start:a,matched:!1}:null}(t,e,n,o,l.type,r,s)}function Ft(t,e,n,i,r,s,o){let l=i.parent,h={from:r.from,to:r.to},a=0,c=null==l?void 0:l.cursor();if(c&&(n<0?c.childBefore(i.from):c.childAfter(i.to)))do{if(n<0?c.to<=i.from:c.from>=i.to){if(0==a&&s.indexOf(c.type.name)>-1&&c.from<c.to){let t=Nt(c);return{start:h,end:t?{from:t.from,to:t.to}:void 0,matched:!0}}if(Lt(c.type,n,o))a++;else if(Lt(c.type,-n,o)){if(0==a){let t=Nt(c);return{start:h,end:t&&t.from<t.to?{from:t.from,to:t.to}:void 0,matched:!1}}a--}}}while(n<0?c.prevSibling():c.nextSibling());return{start:h,matched:!1}}const $t=Object.create(null),zt=[u.none],Ht=[],Vt=Object.create(null),_t=Object.create(null);for(let[t,e]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])_t[t]=jt($t,e);function Wt(t,e){Ht.indexOf(t)>-1||(Ht.push(t),console.warn(e))}function jt(t,e){let n=[];for(let i of e.split(" ")){let e=[];for(let n of i.split(".")){let i=t[n]||st[n];i?"function"==typeof i?e.length?e=e.map(i):Wt(n,`Modifier ${n} used at start of tag`):e.length?Wt(n,`Tag ${n} used as modifier`):e=Array.isArray(i)?i:[i]:Wt(n,`Unknown highlighting tag ${n}`)}for(let t of e)n.push(t)}if(!n.length)return 0;let i=e.replace(/ /g,"_"),r=i+" "+n.map((t=>t.id)),s=Vt[r];if(s)return s.id;let o=Vt[r]=u.define({id:zt.length,name:i,props:[H({[i]:n})]});return zt.push(o),o.id}function qt(t,e){return({state:n,dispatch:i})=>{if(n.readOnly)return!1;let r=t(e,n);return!!r&&(i(n.update(r)),!0)}}r.OP.RTL,r.OP.LTR;const Kt=qt(Zt,0),Gt=qt(Xt,0),Ut=qt(((t,e)=>Xt(t,e,function(t){let e=[];for(let n of t.selection.ranges){let i=t.doc.lineAt(n.from),r=n.to<=i.to?i:t.doc.lineAt(n.to);r.from>i.from&&r.from==n.to&&(r=n.to==i.to+1?i:t.doc.lineAt(n.to-1));let s=e.length-1;s>=0&&e[s].to>i.from?e[s].to=r.to:e.push({from:i.from+/^\s*/.exec(i.text)[0].length,to:r.to})}return e}(e))),0);function Yt(t,e){let n=t.languageDataAt("commentTokens",e,1);return n.length?n[0]:{}}const Jt=50;function Xt(t,e,n=e.selection.ranges){let i=n.map((t=>Yt(e,t.from).block));if(!i.every((t=>t)))return null;let r=n.map(((t,n)=>function(t,{open:e,close:n},i,r){let s,o,l=t.sliceDoc(i-Jt,i),h=t.sliceDoc(r,r+Jt),a=/\s*$/.exec(l)[0].length,c=/^\s*/.exec(h)[0].length,u=l.length-a;if(l.slice(u-e.length,u)==e&&h.slice(c,c+n.length)==n)return{open:{pos:i-a,margin:a&&1},close:{pos:r+c,margin:c&&1}};r-i<=2*Jt?s=o=t.sliceDoc(i,r):(s=t.sliceDoc(i,i+Jt),o=t.sliceDoc(r-Jt,r));let f=/^\s*/.exec(s)[0].length,d=/\s*$/.exec(o)[0].length,p=o.length-d-n.length;return s.slice(f,f+e.length)==e&&o.slice(p,p+n.length)==n?{open:{pos:i+f+e.length,margin:/\s/.test(s.charAt(f+e.length))?1:0},close:{pos:r-d-n.length,margin:/\s/.test(o.charAt(p-1))?1:0}}:null}(e,i[n],t.from,t.to)));if(2!=t&&!r.every((t=>t)))return{changes:e.changes(n.map(((t,e)=>r[e]?[]:[{from:t.from,insert:i[e].open+" "},{from:t.to,insert:" "+i[e].close}])))};if(1!=t&&r.some((t=>t))){let t=[];for(let e,n=0;n<r.length;n++)if(e=r[n]){let r=i[n],{open:s,close:o}=e;t.push({from:s.pos-r.open.length,to:s.pos+s.margin},{from:o.pos-o.margin,to:o.pos+r.close.length})}return{changes:t}}return null}function Zt(t,e,n=e.selection.ranges){let i=[],r=-1;for(let{from:t,to:s}of n){let n=i.length,o=1e9,l=Yt(e,t).line;if(l){for(let n=t;n<=s;){let h=e.doc.lineAt(n);if(h.from>r&&(t==s||s>h.from)){r=h.from;let t=/^\s*/.exec(h.text)[0].length,e=t==h.length,n=h.text.slice(t,t+l.length)==l?t:-1;t<h.text.length&&t<o&&(o=t),i.push({line:h,comment:n,token:l,indent:t,empty:e,single:!1})}n=h.to+1}if(o<1e9)for(let t=n;t<i.length;t++)i[t].indent<i[t].line.text.length&&(i[t].indent=o);i.length==n+1&&(i[n].single=!0)}}if(2!=t&&i.some((t=>t.comment<0&&(!t.empty||t.single)))){let t=[];for(let{line:e,token:n,indent:r,empty:s,single:o}of i)!o&&s||t.push({from:e.from+r,insert:n+" "});let n=e.changes(t);return{changes:n,selection:e.selection.map(n,1)}}if(1!=t&&i.some((t=>t.comment>=0))){let t=[];for(let{line:e,comment:n,token:r}of i)if(n>=0){let i=e.from+n,s=i+r.length;" "==e.text[s-e.from]&&s++,t.push({from:i,to:s})}return{changes:t}}return null}const Qt=i.YH.define(),te=i.YH.define(),ee=i.sj.define(),ne=i.sj.define({combine:t=>(0,i.QR)(t,{minDepth:100,newGroupDelay:500,joinToEvent:(t,e)=>e},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:(t,e)=>(n,i)=>t(n,i)||e(n,i)})}),ie=i.sU.define({create:()=>be.empty,update(t,e){let n=e.state.facet(ne),r=e.annotation(Qt);if(r){let i=ce.fromTransaction(e,r.selection),s=r.side,o=0==s?t.undone:t.done;return o=i?ue(o,o.length,n.minDepth,i):ge(o,e.startState.selection),new be(0==s?r.rest:o,0==s?o:r.rest)}let s=e.annotation(te);if("full"!=s&&"before"!=s||(t=t.isolate()),!1===e.annotation(i.ZX.addToHistory))return e.changes.empty?t:t.addMapping(e.changes.desc);let o=ce.fromTransaction(e),l=e.annotation(i.ZX.time),h=e.annotation(i.ZX.userEvent);return o?t=t.addChanges(o,l,h,n,e):e.selection&&(t=t.addSelection(e.startState.selection,l,h,n.newGroupDelay)),"full"!=s&&"after"!=s||(t=t.isolate()),t},toJSON:t=>({done:t.done.map((t=>t.toJSON())),undone:t.undone.map((t=>t.toJSON()))}),fromJSON:t=>new be(t.done.map(ce.fromJSON),t.undone.map(ce.fromJSON))});function re(t={}){return[ie,ne.of(t),r.Lz.domEventHandlers({beforeinput(t,e){let n="historyUndo"==t.inputType?oe:"historyRedo"==t.inputType?le:null;return!!n&&(t.preventDefault(),n(e))}})]}function se(t,e){return function({state:n,dispatch:i}){if(!e&&n.readOnly)return!1;let r=n.field(ie,!1);if(!r)return!1;let s=r.pop(t,n,e);return!!s&&(i(s),!0)}}const oe=se(0,!1),le=se(1,!1),he=se(0,!0),ae=se(1,!0);class ce{constructor(t,e,n,i,r){this.changes=t,this.effects=e,this.mapped=n,this.startSelection=i,this.selectionsAfter=r}setSelAfter(t){return new ce(this.changes,this.effects,this.mapped,this.startSelection,t)}toJSON(){var t,e,n;return{changes:null===(t=this.changes)||void 0===t?void 0:t.toJSON(),mapped:null===(e=this.mapped)||void 0===e?void 0:e.toJSON(),startSelection:null===(n=this.startSelection)||void 0===n?void 0:n.toJSON(),selectionsAfter:this.selectionsAfter.map((t=>t.toJSON()))}}static fromJSON(t){return new ce(t.changes&&i.VR.fromJSON(t.changes),[],t.mapped&&i.Gu.fromJSON(t.mapped),t.startSelection&&i.OF.fromJSON(t.startSelection),t.selectionsAfter.map(i.OF.fromJSON))}static fromTransaction(t,e){let n=de;for(let e of t.startState.facet(ee)){let i=e(t);i.length&&(n=n.concat(i))}return!n.length&&t.changes.empty?null:new ce(t.changes.invert(t.startState.doc),n,void 0,e||t.startState.selection,de)}static selection(t){return new ce(void 0,de,void 0,void 0,t)}}function ue(t,e,n,i){let r=e+1>n+20?e-n-1:0,s=t.slice(r,e);return s.push(i),s}function fe(t,e){return t.length?e.length?t.concat(e):t:e}const de=[],pe=200;function ge(t,e){if(t.length){let n=t[t.length-1],i=n.selectionsAfter.slice(Math.max(0,n.selectionsAfter.length-pe));return i.length&&i[i.length-1].eq(e)?t:(i.push(e),ue(t,t.length-1,1e9,n.setSelAfter(i)))}return[ce.selection([e])]}function me(t){let e=t[t.length-1],n=t.slice();return n[t.length-1]=e.setSelAfter(e.selectionsAfter.slice(0,e.selectionsAfter.length-1)),n}function we(t,e){if(!t.length)return t;let n=t.length,i=de;for(;n;){let r=ve(t[n-1],e,i);if(r.changes&&!r.changes.empty||r.effects.length){let e=t.slice(0,n);return e[n-1]=r,e}e=r.mapped,n--,i=r.selectionsAfter}return i.length?[ce.selection(i)]:de}function ve(t,e,n){let r=fe(t.selectionsAfter.length?t.selectionsAfter.map((t=>t.map(e))):de,n);if(!t.changes)return ce.selection(r);let s=t.changes.map(e),o=e.mapDesc(t.changes,!0),l=t.mapped?t.mapped.composeDesc(o):o;return new ce(s,i.Pe.mapEffects(t.effects,e),l,t.startSelection.map(o),r)}const ye=/^(input\.type|delete)($|\.)/;class be{constructor(t,e,n=0,i=void 0){this.done=t,this.undone=e,this.prevTime=n,this.prevUserEvent=i}isolate(){return this.prevTime?new be(this.done,this.undone):this}addChanges(t,e,n,r,s){let o=this.done,l=o[o.length-1];return o=l&&l.changes&&!l.changes.empty&&t.changes&&(!n||ye.test(n))&&(!l.selectionsAfter.length&&e-this.prevTime<r.newGroupDelay&&r.joinToEvent(s,function(t,e){let n=[],i=!1;return t.iterChangedRanges(((t,e)=>n.push(t,e))),e.iterChangedRanges(((t,e,r,s)=>{for(let t=0;t<n.length;){let e=n[t++],o=n[t++];s>=e&&r<=o&&(i=!0)}})),i}(l.changes,t.changes))||"input.type.compose"==n)?ue(o,o.length-1,r.minDepth,new ce(t.changes.compose(l.changes),fe(i.Pe.mapEffects(t.effects,l.changes),l.effects),l.mapped,l.startSelection,de)):ue(o,o.length,r.minDepth,t),new be(o,de,e,n)}addSelection(t,e,n,i){let r=this.done.length?this.done[this.done.length-1].selectionsAfter:de;return r.length>0&&e-this.prevTime<i&&n==this.prevUserEvent&&n&&/^select($|\.)/.test(n)&&(s=r[r.length-1],o=t,s.ranges.length==o.ranges.length&&0===s.ranges.filter(((t,e)=>t.empty!=o.ranges[e].empty)).length)?this:new be(ge(this.done,t),this.undone,e,n);var s,o}addMapping(t){return new be(we(this.done,t),we(this.undone,t),this.prevTime,this.prevUserEvent)}pop(t,e,n){let i=0==t?this.done:this.undone;if(0==i.length)return null;let r=i[i.length-1],s=r.selectionsAfter[0]||e.selection;if(n&&r.selectionsAfter.length)return e.update({selection:r.selectionsAfter[r.selectionsAfter.length-1],annotations:Qt.of({side:t,rest:me(i),selection:s}),userEvent:0==t?"select.undo":"select.redo",scrollIntoView:!0});if(r.changes){let n=1==i.length?de:i.slice(0,i.length-1);return r.mapped&&(n=we(n,r.mapped)),e.update({changes:r.changes,selection:r.startSelection,effects:r.effects,annotations:Qt.of({side:t,rest:n,selection:s}),filter:!1,userEvent:0==t?"undo":"redo",scrollIntoView:!0})}return null}}be.empty=new be(de,de);const xe=[{key:"Mod-z",run:oe,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:le,preventDefault:!0},{linux:"Ctrl-Shift-z",run:le,preventDefault:!0},{key:"Mod-u",run:he,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:ae,preventDefault:!0}];function ke(t,e){return i.OF.create(t.ranges.map(e),t.mainIndex)}function Se(t,e){return t.update({selection:e,scrollIntoView:!0,userEvent:"select"})}function Ae({state:t,dispatch:e},n){let i=ke(t.selection,n);return!i.eq(t.selection,!0)&&(e(Se(t,i)),!0)}function Me(t,e){return i.OF.cursor(e?t.to:t.from)}function Ce(t,e){return Ae(t,(n=>n.empty?t.moveByChar(n,e):Me(n,e)))}function Oe(t){return t.textDirectionAt(t.state.selection.main.head)==r.OP.LTR}const Te=t=>Ce(t,!Oe(t)),Ee=t=>Ce(t,Oe(t));function De(t,e){return Ae(t,(n=>n.empty?t.moveByGroup(n,e):Me(n,e)))}function Re(t,e,n){if(e.type.prop(n))return!0;let i=e.to-e.from;return i&&(i>2||/[^\s,.;:]/.test(t.sliceDoc(e.from,e.to)))||e.firstChild}function Be(t,e,n){let r,s,o=ut(t).resolveInner(e.head),l=n?h.closedBy:h.openedBy;for(let i=e.head;;){let e=n?o.childAfter(i):o.childBefore(i);if(!e)break;Re(t,e,l)?o=e:i=n?e.to:e.from}return s=o.type.prop(l)&&(r=n?It(t,o.from,1):It(t,o.to,-1))&&r.matched?n?r.end.to:r.end.from:n?o.to:o.from,i.OF.cursor(s,n?-1:1)}function Pe(t,e){return Ae(t,(n=>{if(!n.empty)return Me(n,e);let i=t.moveVertically(n,e);return i.head!=n.head?i:t.moveToLineBoundary(n,e)}))}"undefined"!=typeof Intl&&Intl.Segmenter;const Le=t=>Pe(t,!1),Ne=t=>Pe(t,!0);function Ie(t){let e,n=t.scrollDOM.clientHeight<t.scrollDOM.scrollHeight-2,i=0,s=0;if(n){for(let e of t.state.facet(r.Lz.scrollMargins)){let n=e(t);(null==n?void 0:n.top)&&(i=Math.max(null==n?void 0:n.top,i)),(null==n?void 0:n.bottom)&&(s=Math.max(null==n?void 0:n.bottom,s))}e=t.scrollDOM.clientHeight-i-s}else e=(t.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:i,marginBottom:s,selfScroll:n,height:Math.max(t.defaultLineHeight,e-5)}}function Fe(t,e){let n,i=Ie(t),{state:s}=t,o=ke(s.selection,(n=>n.empty?t.moveVertically(n,e,i.height):Me(n,e)));if(o.eq(s.selection))return!1;if(i.selfScroll){let e=t.coordsAtPos(s.selection.main.head),l=t.scrollDOM.getBoundingClientRect(),h=l.top+i.marginTop,a=l.bottom-i.marginBottom;e&&e.top>h&&e.bottom<a&&(n=r.Lz.scrollIntoView(o.main.head,{y:"start",yMargin:e.top-h}))}return t.dispatch(Se(s,o),{effects:n}),!0}const $e=t=>Fe(t,!1),ze=t=>Fe(t,!0);function He(t,e,n){let r=t.lineBlockAt(e.head),s=t.moveToLineBoundary(e,n);if(s.head==e.head&&s.head!=(n?r.to:r.from)&&(s=t.moveToLineBoundary(e,n,!1)),!n&&s.head==r.from&&r.length){let n=/^\s*/.exec(t.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;n&&e.head!=r.from+n&&(s=i.OF.cursor(r.from+n))}return s}function Ve(t,e){let n=ke(t.state.selection,(t=>{let n=e(t);return i.OF.range(t.anchor,n.head,n.goalColumn,n.bidiLevel||void 0)}));return!n.eq(t.state.selection)&&(t.dispatch(Se(t.state,n)),!0)}function _e(t,e){return Ve(t,(n=>t.moveByChar(n,e)))}const We=t=>_e(t,!Oe(t)),je=t=>_e(t,Oe(t));function qe(t,e){return Ve(t,(n=>t.moveByGroup(n,e)))}function Ke(t,e){return Ve(t,(n=>t.moveVertically(n,e)))}const Ge=t=>Ke(t,!1),Ue=t=>Ke(t,!0);function Ye(t,e){return Ve(t,(n=>t.moveVertically(n,e,Ie(t).height)))}const Je=t=>Ye(t,!1),Xe=t=>Ye(t,!0),Ze=({state:t,dispatch:e})=>(e(Se(t,{anchor:0})),!0),Qe=({state:t,dispatch:e})=>(e(Se(t,{anchor:t.doc.length})),!0),tn=({state:t,dispatch:e})=>(e(Se(t,{anchor:t.selection.main.anchor,head:0})),!0),en=({state:t,dispatch:e})=>(e(Se(t,{anchor:t.selection.main.anchor,head:t.doc.length})),!0);function nn(t,e){if(t.state.readOnly)return!1;let n="delete.selection",{state:s}=t,o=s.changeByRange((r=>{let{from:s,to:o}=r;if(s==o){let i=e(r);i<s?(n="delete.backward",i=rn(t,i,!1)):i>s&&(n="delete.forward",i=rn(t,i,!0)),s=Math.min(s,i),o=Math.max(o,i)}else s=rn(t,s,!1),o=rn(t,o,!0);return s==o?{range:r}:{changes:{from:s,to:o},range:i.OF.cursor(s,s<r.head?-1:1)}}));return!o.changes.empty&&(t.dispatch(s.update(o,{scrollIntoView:!0,userEvent:n,effects:"delete.selection"==n?r.Lz.announce.of(s.phrase("Selection deleted")):void 0})),!0)}function rn(t,e,n){if(t instanceof r.Lz)for(let i of t.state.facet(r.Lz.atomicRanges).map((e=>e(t))))i.between(e,e,((t,i)=>{t<e&&i>e&&(e=n?i:t)}));return e}const sn=(t,e,n)=>nn(t,(r=>{let s,o,l=r.from,{state:h}=t,a=h.doc.lineAt(l);if(n&&!e&&l>a.from&&l<a.from+200&&!/[^ \t]/.test(s=a.text.slice(0,l-a.from))){if("\t"==s[s.length-1])return l-1;let t=(0,i.y$)(s,h.tabSize)%St(h)||St(h);for(let e=0;e<t&&" "==s[s.length-1-e];e++)l--;o=l}else o=(0,i.zK)(a.text,l-a.from,e,e)+a.from,o==l&&a.number!=(e?h.doc.lines:1)?o+=e?1:-1:!e&&/[\ufe00-\ufe0f]/.test(a.text.slice(o-a.from,l-a.from))&&(o=(0,i.zK)(a.text,o-a.from,!1,!1)+a.from);return o})),on=t=>sn(t,!1,!0),ln=t=>sn(t,!0,!1),hn=(t,e)=>nn(t,(n=>{let r=n.head,{state:s}=t,o=s.doc.lineAt(r),l=s.charCategorizer(r);for(let t=null;;){if(r==(e?o.to:o.from)){r==n.head&&o.number!=(e?s.doc.lines:1)&&(r+=e?1:-1);break}let h=(0,i.zK)(o.text,r-o.from,e)+o.from,a=o.text.slice(Math.min(r,h)-o.from,Math.max(r,h)-o.from),c=l(a);if(null!=t&&c!=t)break;" "==a&&r==n.head||(t=c),r=h}return r})),an=t=>hn(t,!1);function cn(t){let e=[],n=-1;for(let i of t.selection.ranges){let r=t.doc.lineAt(i.from),s=t.doc.lineAt(i.to);if(i.empty||i.to!=s.from||(s=t.doc.lineAt(i.to-1)),n>=r.number){let t=e[e.length-1];t.to=s.to,t.ranges.push(i)}else e.push({from:r.from,to:s.to,ranges:[i]});n=s.number+1}return e}function un(t,e,n){if(t.readOnly)return!1;let r=[],s=[];for(let e of cn(t)){if(n?e.to==t.doc.length:0==e.from)continue;let o=t.doc.lineAt(n?e.to+1:e.from-1),l=o.length+1;if(n){r.push({from:e.to,to:o.to},{from:e.from,insert:o.text+t.lineBreak});for(let n of e.ranges)s.push(i.OF.range(Math.min(t.doc.length,n.anchor+l),Math.min(t.doc.length,n.head+l)))}else{r.push({from:o.from,to:e.from},{from:e.to,insert:t.lineBreak+o.text});for(let t of e.ranges)s.push(i.OF.range(t.anchor-l,t.head-l))}}return!!r.length&&(e(t.update({changes:r,scrollIntoView:!0,selection:i.OF.create(s,t.selection.mainIndex),userEvent:"move.line"})),!0)}function fn(t,e,n){if(t.readOnly)return!1;let i=[];for(let e of cn(t))n?i.push({from:e.from,insert:t.doc.slice(e.from,e.to)+t.lineBreak}):i.push({from:e.to,insert:t.lineBreak+t.doc.slice(e.from,e.to)});return e(t.update({changes:i,scrollIntoView:!0,userEvent:"input.copyline"})),!0}const dn=pn(!1);function pn(t){return({state:e,dispatch:n})=>{if(e.readOnly)return!1;let r=e.changeByRange((n=>{let{from:r,to:s}=n,o=e.doc.lineAt(r),l=!t&&r==s&&function(t,e){if(/\(\)|\[\]|\{\}/.test(t.sliceDoc(e-1,e+1)))return{from:e,to:e};let n,i=ut(t).resolveInner(e),r=i.childBefore(e),s=i.childAfter(e);return r&&s&&r.to<=e&&s.from>=e&&(n=r.type.prop(h.closedBy))&&n.indexOf(s.name)>-1&&t.doc.lineAt(r.to).from==t.doc.lineAt(s.from).from&&!/\S/.test(t.sliceDoc(r.to,s.from))?{from:r.to,to:s.from}:null}(e,r);t&&(r=s=(s<=o.to?o:e.doc.lineAt(s)).to);let a=new Ct(e,{simulateBreak:r,simulateDoubleBreak:!!l}),c=Mt(a,r);for(null==c&&(c=(0,i.y$)(/^\s*/.exec(e.doc.lineAt(r).text)[0],e.tabSize));s<o.to&&/\s/.test(o.text[s-o.from]);)s++;l?({from:r,to:s}=l):r>o.from&&r<o.from+100&&!/\S/.test(o.text.slice(0,r))&&(r=o.from);let u=["",At(e,c)];return l&&u.push(At(e,a.lineIndent(o.from,-1))),{changes:{from:r,to:s,insert:i.EY.of(u)},range:i.OF.cursor(r+1+u[1].length)}}));return n(e.update(r,{scrollIntoView:!0,userEvent:"input"})),!0}}function gn(t,e){let n=-1;return t.changeByRange((r=>{let s=[];for(let i=r.from;i<=r.to;){let o=t.doc.lineAt(i);o.number>n&&(r.empty||r.to>o.from)&&(e(o,s,r),n=o.number),i=o.to+1}let o=t.changes(s);return{changes:s,range:i.OF.range(o.mapPos(r.anchor,1),o.mapPos(r.head,1))}}))}const mn=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:t=>Ae(t,(e=>Be(t.state,e,!Oe(t)))),shift:t=>Ve(t,(e=>Be(t.state,e,!Oe(t))))},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:t=>Ae(t,(e=>Be(t.state,e,Oe(t)))),shift:t=>Ve(t,(e=>Be(t.state,e,Oe(t))))},{key:"Alt-ArrowUp",run:({state:t,dispatch:e})=>un(t,e,!1)},{key:"Shift-Alt-ArrowUp",run:({state:t,dispatch:e})=>fn(t,e,!1)},{key:"Alt-ArrowDown",run:({state:t,dispatch:e})=>un(t,e,!0)},{key:"Shift-Alt-ArrowDown",run:({state:t,dispatch:e})=>fn(t,e,!0)},{key:"Escape",run:({state:t,dispatch:e})=>{let n=t.selection,r=null;return n.ranges.length>1?r=i.OF.create([n.main]):n.main.empty||(r=i.OF.create([i.OF.cursor(n.main.head)])),!!r&&(e(Se(t,r)),!0)}},{key:"Mod-Enter",run:pn(!0)},{key:"Alt-l",mac:"Ctrl-l",run:({state:t,dispatch:e})=>{let n=cn(t).map((({from:e,to:n})=>i.OF.range(e,Math.min(n+1,t.doc.length))));return e(t.update({selection:i.OF.create(n),userEvent:"select"})),!0}},{key:"Mod-i",run:({state:t,dispatch:e})=>{let n=ke(t.selection,(e=>{let n=ut(t),r=n.resolveStack(e.from,1);if(e.empty){let t=n.resolveStack(e.from,-1);t.node.from>=r.node.from&&t.node.to<=r.node.to&&(r=t)}for(let t=r;t;t=t.next){let{node:n}=t;if((n.from<e.from&&n.to>=e.to||n.to>e.to&&n.from<=e.from)&&t.next)return i.OF.range(n.to,n.from)}return e}));return!n.eq(t.selection)&&(e(Se(t,n)),!0)},preventDefault:!0},{key:"Mod-[",run:({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(gn(t,((e,n)=>{let r=/^\s*/.exec(e.text)[0];if(!r)return;let s=(0,i.y$)(r,t.tabSize),o=0,l=At(t,Math.max(0,s-St(t)));for(;o<r.length&&o<l.length&&r.charCodeAt(o)==l.charCodeAt(o);)o++;n.push({from:e.from+o,to:e.from+r.length,insert:l.slice(o)})})),{userEvent:"delete.dedent"})),!0)},{key:"Mod-]",run:({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(gn(t,((e,n)=>{n.push({from:e.from,insert:t.facet(kt)})})),{userEvent:"input.indent"})),!0)},{key:"Mod-Alt-\\",run:({state:t,dispatch:e})=>{if(t.readOnly)return!1;let n=Object.create(null),i=new Ct(t,{overrideIndentation:t=>{let e=n[t];return null==e?-1:e}}),r=gn(t,((e,r,s)=>{let o=Mt(i,e.from);if(null==o)return;/\S/.test(e.text)||(o=0);let l=/^\s*/.exec(e.text)[0],h=At(t,o);(l!=h||s.from<e.from+l.length)&&(n[e.from]=o,r.push({from:e.from,to:e.from+l.length,insert:h}))}));return r.changes.empty||e(t.update(r,{userEvent:"indent"})),!0}},{key:"Shift-Mod-k",run:t=>{if(t.state.readOnly)return!1;let{state:e}=t,n=e.changes(cn(e).map((({from:t,to:n})=>(t>0?t--:n<e.doc.length&&n++,{from:t,to:n})))),i=ke(e.selection,(e=>{let n;if(t.lineWrapping){let i=t.lineBlockAt(e.head),r=t.coordsAtPos(e.head,e.assoc||1);r&&(n=i.bottom+t.documentTop-r.bottom+t.defaultLineHeight/2)}return t.moveVertically(e,!0,n)})).map(n);return t.dispatch({changes:n,selection:i,scrollIntoView:!0,userEvent:"delete.line"}),!0}},{key:"Shift-Mod-\\",run:({state:t,dispatch:e})=>function(t,e,n){let r=!1,s=ke(t.selection,(e=>{let s=It(t,e.head,-1)||It(t,e.head,1)||e.head>0&&It(t,e.head-1,1)||e.head<t.doc.length&&It(t,e.head+1,-1);if(!s||!s.end)return e;r=!0;let o=s.start.from==e.head?s.end.to:s.end.from;return n?i.OF.range(e.anchor,o):i.OF.cursor(o)}));return!!r&&(e(Se(t,s)),!0)}(t,e,!1)},{key:"Mod-/",run:t=>{let{state:e}=t,n=e.doc.lineAt(e.selection.main.from),i=Yt(t.state,n.from);return i.line?Kt(t):!!i.block&&Ut(t)}},{key:"Alt-A",run:Gt},{key:"Ctrl-m",mac:"Shift-Alt-m",run:t=>(t.setTabFocusMode(),!0)}].concat([{key:"ArrowLeft",run:Te,shift:We,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:t=>De(t,!Oe(t)),shift:t=>qe(t,!Oe(t)),preventDefault:!0},{mac:"Cmd-ArrowLeft",run:t=>Ae(t,(e=>He(t,e,!Oe(t)))),shift:t=>Ve(t,(e=>He(t,e,!Oe(t)))),preventDefault:!0},{key:"ArrowRight",run:Ee,shift:je,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:t=>De(t,Oe(t)),shift:t=>qe(t,Oe(t)),preventDefault:!0},{mac:"Cmd-ArrowRight",run:t=>Ae(t,(e=>He(t,e,Oe(t)))),shift:t=>Ve(t,(e=>He(t,e,Oe(t)))),preventDefault:!0},{key:"ArrowUp",run:Le,shift:Ge,preventDefault:!0},{mac:"Cmd-ArrowUp",run:Ze,shift:tn},{mac:"Ctrl-ArrowUp",run:$e,shift:Je},{key:"ArrowDown",run:Ne,shift:Ue,preventDefault:!0},{mac:"Cmd-ArrowDown",run:Qe,shift:en},{mac:"Ctrl-ArrowDown",run:ze,shift:Xe},{key:"PageUp",run:$e,shift:Je},{key:"PageDown",run:ze,shift:Xe},{key:"Home",run:t=>Ae(t,(e=>He(t,e,!1))),shift:t=>Ve(t,(e=>He(t,e,!1))),preventDefault:!0},{key:"Mod-Home",run:Ze,shift:tn},{key:"End",run:t=>Ae(t,(e=>He(t,e,!0))),shift:t=>Ve(t,(e=>He(t,e,!0))),preventDefault:!0},{key:"Mod-End",run:Qe,shift:en},{key:"Enter",run:dn,shift:dn},{key:"Mod-a",run:({state:t,dispatch:e})=>(e(t.update({selection:{anchor:0,head:t.doc.length},userEvent:"select"})),!0)},{key:"Backspace",run:on,shift:on},{key:"Delete",run:ln},{key:"Mod-Backspace",mac:"Alt-Backspace",run:an},{key:"Mod-Delete",mac:"Alt-Delete",run:t=>hn(t,!0)},{mac:"Mod-Backspace",run:t=>nn(t,(e=>{let n=t.moveToLineBoundary(e,!1).head;return e.head>n?n:Math.max(0,e.head-1)}))},{mac:"Mod-Delete",run:t=>nn(t,(e=>{let n=t.moveToLineBoundary(e,!0).head;return e.head<n?n:Math.min(t.state.doc.length,e.head+1)}))}].concat([{key:"Ctrl-b",run:Te,shift:We,preventDefault:!0},{key:"Ctrl-f",run:Ee,shift:je},{key:"Ctrl-p",run:Le,shift:Ge},{key:"Ctrl-n",run:Ne,shift:Ue},{key:"Ctrl-a",run:t=>Ae(t,(e=>i.OF.cursor(t.lineBlockAt(e.head).from,1))),shift:t=>Ve(t,(e=>i.OF.cursor(t.lineBlockAt(e.head).from)))},{key:"Ctrl-e",run:t=>Ae(t,(e=>i.OF.cursor(t.lineBlockAt(e.head).to,-1))),shift:t=>Ve(t,(e=>i.OF.cursor(t.lineBlockAt(e.head).to)))},{key:"Ctrl-d",run:ln},{key:"Ctrl-h",run:on},{key:"Ctrl-k",run:t=>nn(t,(e=>{let n=t.lineBlockAt(e.head).to;return e.head<n?n:Math.min(t.state.doc.length,e.head+1)}))},{key:"Ctrl-Alt-h",run:an},{key:"Ctrl-o",run:({state:t,dispatch:e})=>{if(t.readOnly)return!1;let n=t.changeByRange((t=>({changes:{from:t.from,to:t.to,insert:i.EY.of(["",""])},range:i.OF.cursor(t.from)})));return e(t.update(n,{scrollIntoView:!0,userEvent:"input"})),!0}},{key:"Ctrl-t",run:({state:t,dispatch:e})=>{if(t.readOnly)return!1;let n=t.changeByRange((e=>{if(!e.empty||0==e.from||e.from==t.doc.length)return{range:e};let n=e.from,r=t.doc.lineAt(n),s=n==r.from?n-1:(0,i.zK)(r.text,n-r.from,!1)+r.from,o=n==r.to?n+1:(0,i.zK)(r.text,n-r.from,!0)+r.from;return{changes:{from:s,to:o,insert:t.doc.slice(n,o).append(t.doc.slice(s,n))},range:i.OF.cursor(o)}}));return!n.changes.empty&&(e(t.update(n,{scrollIntoView:!0,userEvent:"move.character"})),!0)}},{key:"Ctrl-v",run:ze}].map((t=>({mac:t.key,run:t.run,shift:t.shift})))))},72:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var s={},o=[],l=0;l<t.length;l++){var h=t[l],a=i.base?h[0]+i.base:h[0],c=s[a]||0,u="".concat(a," ").concat(c);s[a]=c+1;var f=n(u),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=r(d,i);i.byIndex=l,e.splice(l,0,{identifier:u,updater:p,references:1})}o.push(u)}return o}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var s=i(t=t||[],r=r||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var l=n(s[o]);e[l].references--}for(var h=i(t,r),a=0;a<s.length;a++){var c=n(s[a]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}s=h}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},156:(t,e,n)=>{n.d(e,{A6:()=>u,Gn:()=>c,B8:()=>a,lw:()=>h,ml:()=>d});var i,r=n(642),s=n(304),o=n(848);function l(){var t=new r.tb(4);return r.tb!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function h(t,e,n){var i=e[0],r=e[1],s=e[2],o=e[3],l=n[0],h=n[1],a=n[2],c=n[3];return t[0]=i*c+o*l+r*a-s*h,t[1]=r*c+o*h+s*l-i*a,t[2]=s*c+o*a+i*h-r*l,t[3]=o*c-i*l-r*h-s*a,t}function a(t,e){var n=e[0],i=e[1],r=e[2],s=e[3],o=n*n+i*i+r*r+s*s,l=o?1/o:0;return t[0]=-n*l,t[1]=-i*l,t[2]=-r*l,t[3]=s*l,t}function c(t,e){var n,i=e[0]+e[4]+e[8];if(i>0)n=Math.sqrt(i+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);var s=(r+1)%3,o=(r+2)%3;n=Math.sqrt(e[3*r+r]-e[3*s+s]-e[3*o+o]+1),t[r]=.5*n,n=.5/n,t[3]=(e[3*s+o]-e[3*o+s])*n,t[s]=(e[3*s+r]+e[3*r+s])*n,t[o]=(e[3*o+r]+e[3*r+o])*n}return t}function u(t,e,n,i){var r=.5*Math.PI/180;e*=r,n*=r,i*=r;var s=Math.sin(e),o=Math.cos(e),l=Math.sin(n),h=Math.cos(n),a=Math.sin(i),c=Math.cos(i);return t[0]=s*h*c-o*l*a,t[1]=o*l*c+s*h*a,t[2]=o*h*a-s*l*c,t[3]=o*h*c+s*l*a,t}i=new r.tb(4),r.tb!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[3]=0);var f,d=(o.vt(),o.fA(1,0,0),o.fA(0,1,0),l(),l(),f=s.vt(),function(t,e,n,i){return f[0]=n[0],f[3]=n[1],f[6]=n[2],f[1]=i[0],f[4]=i[1],f[7]=i[2],f[2]=-e[0],f[5]=-e[1],f[8]=-e[2],function(t,e){var n=e[0],i=e[1],r=e[2],s=e[3],o=n*n+i*i+r*r+s*s;return o>0&&(o=1/Math.sqrt(o)),t[0]=n*o,t[1]=i*o,t[2]=r*o,t[3]=s*o,t}(t,c(t,f))})},157:(t,e,n)=>{function i(t,e){var n=e[0],i=e[1],r=e[2],s=e[3],o=e[4],l=e[5],h=e[6],a=e[7],c=e[8],u=e[9],f=e[10],d=e[11],p=e[12],g=e[13],m=e[14],w=e[15],v=n*l-i*o,y=n*h-r*o,b=n*a-s*o,x=i*h-r*l,k=i*a-s*l,S=r*a-s*h,A=c*g-u*p,M=c*m-f*p,C=c*w-d*p,O=u*m-f*g,T=u*w-d*g,E=f*w-d*m,D=v*E-y*T+b*O+x*C-k*M+S*A;return D?(D=1/D,t[0]=(l*E-h*T+a*O)*D,t[1]=(r*T-i*E-s*O)*D,t[2]=(g*S-m*k+w*x)*D,t[3]=(f*k-u*S-d*x)*D,t[4]=(h*C-o*E-a*M)*D,t[5]=(n*E-r*C+s*M)*D,t[6]=(m*b-p*S-w*y)*D,t[7]=(c*S-f*b+d*y)*D,t[8]=(o*T-l*C+a*A)*D,t[9]=(i*C-n*T-s*A)*D,t[10]=(p*k-g*b+w*v)*D,t[11]=(u*b-c*k-d*v)*D,t[12]=(l*M-o*O-h*A)*D,t[13]=(n*O-i*M+r*A)*D,t[14]=(g*y-p*x-m*v)*D,t[15]=(c*x-u*y+f*v)*D,t):null}function r(t,e,n){var i=e[0],r=e[1],s=e[2],o=e[3],l=e[4],h=e[5],a=e[6],c=e[7],u=e[8],f=e[9],d=e[10],p=e[11],g=e[12],m=e[13],w=e[14],v=e[15],y=n[0],b=n[1],x=n[2],k=n[3];return t[0]=y*i+b*l+x*u+k*g,t[1]=y*r+b*h+x*f+k*m,t[2]=y*s+b*a+x*d+k*w,t[3]=y*o+b*c+x*p+k*v,y=n[4],b=n[5],x=n[6],k=n[7],t[4]=y*i+b*l+x*u+k*g,t[5]=y*r+b*h+x*f+k*m,t[6]=y*s+b*a+x*d+k*w,t[7]=y*o+b*c+x*p+k*v,y=n[8],b=n[9],x=n[10],k=n[11],t[8]=y*i+b*l+x*u+k*g,t[9]=y*r+b*h+x*f+k*m,t[10]=y*s+b*a+x*d+k*w,t[11]=y*o+b*c+x*p+k*v,y=n[12],b=n[13],x=n[14],k=n[15],t[12]=y*i+b*l+x*u+k*g,t[13]=y*r+b*h+x*f+k*m,t[14]=y*s+b*a+x*d+k*w,t[15]=y*o+b*c+x*p+k*v,t}function s(t,e,n,i){var r=e[0],s=e[1],o=e[2],l=e[3],h=r+r,a=s+s,c=o+o,u=r*h,f=r*a,d=r*c,p=s*a,g=s*c,m=o*c,w=l*h,v=l*a,y=l*c,b=i[0],x=i[1],k=i[2];return t[0]=(1-(p+m))*b,t[1]=(f+y)*b,t[2]=(d-v)*b,t[3]=0,t[4]=(f-y)*x,t[5]=(1-(u+m))*x,t[6]=(g+w)*x,t[7]=0,t[8]=(d+v)*k,t[9]=(g-w)*k,t[10]=(1-(u+p))*k,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function o(t,e){var n=e[0],i=e[1],r=e[2],s=e[3],o=n+n,l=i+i,h=r+r,a=n*o,c=i*o,u=i*l,f=r*o,d=r*l,p=r*h,g=s*o,m=s*l,w=s*h;return t[0]=1-u-p,t[1]=c+w,t[2]=f-m,t[3]=0,t[4]=c-w,t[5]=1-a-p,t[6]=d+g,t[7]=0,t[8]=f+m,t[9]=d-g,t[10]=1-a-u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}n.d(e,{B8:()=>i,I0:()=>o,fN:()=>l,lw:()=>r,o1:()=>s});var l=function(t,e,n,i,r){var s,o=1/Math.tan(e/2);return t[0]=o/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=r&&r!==1/0?(s=1/(i-r),t[10]=(r+i)*s,t[14]=2*r*i*s):(t[10]=-1,t[14]=-2*i),t}},197:(t,e,n)=>{function i(t){return!!t&&!Array.isArray(t)&&"object"==typeof t}function r(t){return"string"==typeof t}function s(t){return"number"==typeof t}function o(t){return"function"==typeof t}function l(t,e,n=null){try{return h(t,e),!0}catch(e){return n&&(console.error("[Invalid type]",n),console.error(t),console.debug(e)),!1}}function h(t,e,n="data"){if("function"==typeof e)return h(t,e(),n);if("unknown"===e)return;if("null"===e){if(null!==t)throw console.log("🚀 [index] data = ",t,typeof t),Error(`Expected ${n} to be a null and not a ${c(t)}!`);return}if("string"==typeof e){if(typeof t!==e)throw Error(`Expected ${n} to be a ${e} and not a ${c(t)}!`);return}if(Array.isArray(e)){const[r]=e;switch(r){case"array":return void function(t,e,n){if(!Array.isArray(t))throw Error(`Expected ${e} to be an array and not a ${c(t)}!`);const[,i,r]=n;if(r){const n=t.length;if(s(r)){if(n!==r)throw Error(`Expected ${e}'s length to be ${r} and not ${n}!`)}else{const{min:t,max:i}=r;if(s(t)&&n<t)throw Error(`Expected ${e}'s MIN length to be ${t} and not ${n}!`);if(s(i)&&n>i)throw Error(`Expected ${e}'s MAX length to be ${i} and not ${n}!`)}}for(let n=0;n<t.length;n+=1)h(t[n],i,`${e}[${n}]`)}(t,n,e);case"map":return void function(t,e,n){if(!i(t))throw Error(`Expected ${e} to be an object and not a ${c(t)}!`);const[,r]=n;for(const n of Object.keys(t))"string"==typeof n&&h(t[n],r,`${e}[${n}]`)}(t,n,e);case"?":return void function(t,e,n){if(void 0===t)return;const[,i]=n;h(t,i,e)}(t,n,e);case"|":return void function(t,e,n){const[,...i]=n;if(0===i.length)throw Error(`No type has been defined for this alternative: ${JSON.stringify(n)}!`);const r=[];for(const n of i)try{return void h(t,n,e)}catch(t){t instanceof Error&&r.push(t)}throw new Error(`All alternatives failed!${r.map((t=>`\n${t.message}`))}`)}(t,n,e);case"tuple":return void a(t,n,e);case"tuple...":return void function(t,e,[,...n]){const i=n.length-1;a(t,e,["tuple",...n.slice(0,i)]);const r=n[i];for(let n=i;n<t.length;n++)h(t[n],r,`${e}[${n}]`)}(t,n,e);case"partial":return void function(t,e,[,n]){!function(t,e="data"){if(!i(t))throw Error(`${e} was expected to be an object but we got ${typeof t}!`)}(t,e);for(const i of Object.keys(n)){if("string"!=typeof i)continue;const r=t[i];void 0!==r&&h(r,n[i],`${e}.${i}`)}}(t,n,e);case"literal":return void function(t,e,n){const[,...i]=n;for(const e of i)if(t===e)return;throw Error(`Expected ${e} to be a literal (${i.map((t=>`"${t}"`)).join(" | ")}) and not a ${c(t)}!`)}(t,n,e);case"custom":return void function(t,e,[,n]){if(!n(t))throw Error(`Expected ${n.name}(${e}) to return true!`)}(t,n,e);default:throw Error(`Don't know how to create a type guard for this kind of type: ${JSON.stringify(e)}`)}}if("object"!=typeof t)throw Error(`Expected ${n} to be an object and not a ${c(t)}!`);const r=t;for(const t of Object.keys(e))"string"==typeof t&&h(r[t],e[t],`${n}.${t}`)}function a(t,e,[,...n]){if(function(t,e="data"){if(!Array.isArray(t))throw Error(`${e} was expected to be an Array but we got ${typeof t}!`)}(t),n.length>t.length)throw Error(`Expected ${e}'s length to be at least ${n.length} and not ${t.length}!`);for(let i=0;i<n.length;i++){const r=n[i];h(t[i],r,`${e}[${i}]`)}}function c(t){var e;return null===t?"null":"function"==typeof t?`function ${null!==(e=t.name)&&void 0!==e?e:""}()`:typeof t}n.d(e,{Et:()=>s,Kg:()=>r,Tn:()=>o,Xj:()=>l})},304:(t,e,n)=>{n.d(e,{I0:()=>o,lw:()=>s,vt:()=>r});var i=n(642);function r(){var t=new i.tb(9);return i.tb!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function s(t,e,n){var i=e[0],r=e[1],s=e[2],o=e[3],l=e[4],h=e[5],a=e[6],c=e[7],u=e[8],f=n[0],d=n[1],p=n[2],g=n[3],m=n[4],w=n[5],v=n[6],y=n[7],b=n[8];return t[0]=f*i+d*o+p*a,t[1]=f*r+d*l+p*c,t[2]=f*s+d*h+p*u,t[3]=g*i+m*o+w*a,t[4]=g*r+m*l+w*c,t[5]=g*s+m*h+w*u,t[6]=v*i+y*o+b*a,t[7]=v*r+y*l+b*c,t[8]=v*s+y*h+b*u,t}function o(t,e){var n=e[0],i=e[1],r=e[2],s=e[3],o=n+n,l=i+i,h=r+r,a=n*o,c=i*o,u=i*l,f=r*o,d=r*l,p=r*h,g=s*o,m=s*l,w=s*h;return t[0]=1-u-p,t[3]=c-w,t[6]=f+m,t[1]=c+w,t[4]=1-a-p,t[7]=d-g,t[2]=f-m,t[5]=d+g,t[8]=1-a-u,t}},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var l=0;l<this.length;l++){var h=this[l][0];null!=h&&(o[h]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&o[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},417:(t,e,n)=>{n.d(e,{G:()=>o});const i="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),r="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{};class o{constructor(t,e){this.rules=[];let{finish:n}=e||{};function i(t){return/^@/.test(t)?[t]:t.split(/,\s*/)}function r(t,e,s,o){let l=[],h=/^@(\w+)\b/.exec(t[0]),a=h&&"keyframes"==h[1];if(h&&null==e)return s.push(t[0]+";");for(let n in e){let o=e[n];if(/&/.test(n))r(n.split(/,\s*/).map((e=>t.map((t=>e.replace(/&/,t))))).reduce(((t,e)=>t.concat(e))),o,s);else if(o&&"object"==typeof o){if(!h)throw new RangeError("The value of a property ("+n+") should be a primitive value.");r(i(n),o,l,a)}else null!=o&&l.push(n.replace(/_.*/,"").replace(/[A-Z]/g,(t=>"-"+t.toLowerCase()))+": "+o+";")}(l.length||a)&&s.push((!n||h||o?t:t.map(n)).join(", ")+" {"+l.join(" ")+"}")}for(let e in t)r(i(e),t[e],this.rules)}getRules(){return this.rules.join("\n")}static newName(){let t=s[i]||1;return s[i]=t+1,"ͼ"+t.toString(36)}static mount(t,e,n){let i=t[r],s=n&&n.nonce;i?s&&i.setNonce(s):i=new h(t,s),i.mount(Array.isArray(e)?e:[e],t)}}let l=new Map;class h{constructor(t,e){let n=t.ownerDocument||t,i=n.defaultView;if(!t.head&&t.adoptedStyleSheets&&i.CSSStyleSheet){let e=l.get(n);if(e)return t[r]=e;this.sheet=new i.CSSStyleSheet,l.set(n,this)}else this.styleTag=n.createElement("style"),e&&this.styleTag.setAttribute("nonce",e);this.modules=[],t[r]=this}mount(t,e){let n=this.sheet,i=0,r=0;for(let e=0;e<t.length;e++){let s=t[e],o=this.modules.indexOf(s);if(o<r&&o>-1&&(this.modules.splice(o,1),r--,o=-1),-1==o){if(this.modules.splice(r++,0,s),n)for(let t=0;t<s.rules.length;t++)n.insertRule(s.rules[t],i++)}else{for(;r<o;)i+=this.modules[r++].rules.length;i+=s.rules.length,r++}}if(n)e.adoptedStyleSheets.indexOf(this.sheet)<0&&(e.adoptedStyleSheets=[this.sheet,...e.adoptedStyleSheets]);else{let t="";for(let e=0;e<this.modules.length;e++)t+=this.modules[e].getRules()+"\n";this.styleTag.textContent=t;let n=e.head||e;this.styleTag.parentNode!=n&&n.insertBefore(this.styleTag,n.firstChild)}}setNonce(t){this.styleTag&&this.styleTag.getAttribute("nonce")!=t&&this.styleTag.setAttribute("nonce",t)}}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},638:(t,e,n)=>{n.d(e,{YH:()=>ut,Gu:()=>D,VR:()=>R,Je:()=>kt,OF:()=>z,$t:()=>Mt,sj:()=>_,iR:()=>E,Nb:()=>X,om:()=>Rt,vB:()=>Bt,FB:()=>Ot,Pe:()=>pt,sU:()=>Y,EY:()=>g,ZX:()=>gt,vS:()=>C,Fh:()=>O,QR:()=>Ct,y$:()=>Wt,zK:()=>M,kn:()=>jt});let i=[],r=[];function s(t){if(t<768)return!1;for(let e=0,n=i.length;;){let s=e+n>>1;if(t<i[s])n=s;else{if(!(t>=r[s]))return!0;e=s+1}if(e==n)return!1}}function o(t){return t>=127462&&t<=127487}(()=>{let t="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((t=>t?parseInt(t,36):1));for(let e=0,n=0;e<t.length;e++)(e%2?r:i).push(n+=t[e])})();const l=8205;function h(t,e,n=!0,i=!0){return(n?a:c)(t,e,i)}function a(t,e,n){if(e==t.length)return e;e&&f(t.charCodeAt(e))&&d(t.charCodeAt(e-1))&&e--;let i=u(t,e);for(e+=p(i);e<t.length;){let r=u(t,e);if(i==l||r==l||n&&s(r))e+=p(r),i=r;else{if(!o(r))break;{let n=0,i=e-2;for(;i>=0&&o(u(t,i));)n++,i-=2;if(n%2==0)break;e+=2}}}return e}function c(t,e,n){for(;e>0;){let i=a(t,e-2,n);if(i<e)return i;e--}return 0}function u(t,e){let n=t.charCodeAt(e);if(!d(n)||e+1==t.length)return n;let i=t.charCodeAt(e+1);return f(i)?i-56320+(n-55296<<10)+65536:n}function f(t){return t>=56320&&t<57344}function d(t){return t>=55296&&t<56320}function p(t){return t<65536?1:2}class g{lineAt(t){if(t<0||t>this.length)throw new RangeError(`Invalid position ${t} in document of length ${this.length}`);return this.lineInner(t,!1,1,0)}line(t){if(t<1||t>this.lines)throw new RangeError(`Invalid line number ${t} in ${this.lines}-line document`);return this.lineInner(t,!0,1,0)}replace(t,e,n){[t,e]=A(this,t,e);let i=[];return this.decompose(0,t,i,2),n.length&&n.decompose(0,n.length,i,3),this.decompose(e,this.length,i,1),w.from(i,this.length-(e-t)+n.length)}append(t){return this.replace(this.length,this.length,t)}slice(t,e=this.length){[t,e]=A(this,t,e);let n=[];return this.decompose(t,e,n,0),w.from(n,e-t)}eq(t){if(t==this)return!0;if(t.length!=this.length||t.lines!=this.lines)return!1;let e=this.scanIdentical(t,1),n=this.length-this.scanIdentical(t,-1),i=new b(this),r=new b(t);for(let t=e,s=e;;){if(i.next(t),r.next(t),t=0,i.lineBreak!=r.lineBreak||i.done!=r.done||i.value!=r.value)return!1;if(s+=i.value.length,i.done||s>=n)return!0}}iter(t=1){return new b(this,t)}iterRange(t,e=this.length){return new x(this,t,e)}iterLines(t,e){let n;if(null==t)n=this.iter();else{null==e&&(e=this.lines+1);let i=this.line(t).from;n=this.iterRange(i,Math.max(i,e==this.lines+1?this.length:e<=1?0:this.line(e-1).to))}return new k(n)}toString(){return this.sliceString(0)}toJSON(){let t=[];return this.flatten(t),t}constructor(){}static of(t){if(0==t.length)throw new RangeError("A document must have at least one line");return 1!=t.length||t[0]?t.length<=32?new m(t):w.from(m.split(t,[])):g.empty}}class m extends g{constructor(t,e=function(t){let e=-1;for(let n of t)e+=n.length+1;return e}(t)){super(),this.text=t,this.length=e}get lines(){return this.text.length}get children(){return null}lineInner(t,e,n,i){for(let r=0;;r++){let s=this.text[r],o=i+s.length;if((e?n:o)>=t)return new S(i,o,n,s);i=o+1,n++}}decompose(t,e,n,i){let r=t<=0&&e>=this.length?this:new m(y(this.text,t,e),Math.min(e,this.length)-Math.max(0,t));if(1&i){let t=n.pop(),e=v(r.text,t.text.slice(),0,r.length);if(e.length<=32)n.push(new m(e,t.length+r.length));else{let t=e.length>>1;n.push(new m(e.slice(0,t)),new m(e.slice(t)))}}else n.push(r)}replace(t,e,n){if(!(n instanceof m))return super.replace(t,e,n);[t,e]=A(this,t,e);let i=v(this.text,v(n.text,y(this.text,0,t)),e),r=this.length+n.length-(e-t);return i.length<=32?new m(i,r):w.from(m.split(i,[]),r)}sliceString(t,e=this.length,n="\n"){[t,e]=A(this,t,e);let i="";for(let r=0,s=0;r<=e&&s<this.text.length;s++){let o=this.text[s],l=r+o.length;r>t&&s&&(i+=n),t<l&&e>r&&(i+=o.slice(Math.max(0,t-r),e-r)),r=l+1}return i}flatten(t){for(let e of this.text)t.push(e)}scanIdentical(){return 0}static split(t,e){let n=[],i=-1;for(let r of t)n.push(r),i+=r.length+1,32==n.length&&(e.push(new m(n,i)),n=[],i=-1);return i>-1&&e.push(new m(n,i)),e}}class w extends g{constructor(t,e){super(),this.children=t,this.length=e,this.lines=0;for(let e of t)this.lines+=e.lines}lineInner(t,e,n,i){for(let r=0;;r++){let s=this.children[r],o=i+s.length,l=n+s.lines-1;if((e?l:o)>=t)return s.lineInner(t,e,n,i);i=o+1,n=l+1}}decompose(t,e,n,i){for(let r=0,s=0;s<=e&&r<this.children.length;r++){let o=this.children[r],l=s+o.length;if(t<=l&&e>=s){let r=i&((s<=t?1:0)|(l>=e?2:0));s>=t&&l<=e&&!r?n.push(o):o.decompose(t-s,e-s,n,r)}s=l+1}}replace(t,e,n){if([t,e]=A(this,t,e),n.lines<this.lines)for(let i=0,r=0;i<this.children.length;i++){let s=this.children[i],o=r+s.length;if(t>=r&&e<=o){let l=s.replace(t-r,e-r,n),h=this.lines-s.lines+l.lines;if(l.lines<h>>4&&l.lines>h>>6){let r=this.children.slice();return r[i]=l,new w(r,this.length-(e-t)+n.length)}return super.replace(r,o,l)}r=o+1}return super.replace(t,e,n)}sliceString(t,e=this.length,n="\n"){[t,e]=A(this,t,e);let i="";for(let r=0,s=0;r<this.children.length&&s<=e;r++){let o=this.children[r],l=s+o.length;s>t&&r&&(i+=n),t<l&&e>s&&(i+=o.sliceString(t-s,e-s,n)),s=l+1}return i}flatten(t){for(let e of this.children)e.flatten(t)}scanIdentical(t,e){if(!(t instanceof w))return 0;let n=0,[i,r,s,o]=e>0?[0,0,this.children.length,t.children.length]:[this.children.length-1,t.children.length-1,-1,-1];for(;;i+=e,r+=e){if(i==s||r==o)return n;let l=this.children[i],h=t.children[r];if(l!=h)return n+l.scanIdentical(h,e);n+=l.length+1}}static from(t,e=t.reduce(((t,e)=>t+e.length+1),-1)){let n=0;for(let e of t)n+=e.lines;if(n<32){let n=[];for(let e of t)e.flatten(n);return new m(n,e)}let i=Math.max(32,n>>5),r=i<<1,s=i>>1,o=[],l=0,h=-1,a=[];function c(t){let e;if(t.lines>r&&t instanceof w)for(let e of t.children)c(e);else t.lines>s&&(l>s||!l)?(u(),o.push(t)):t instanceof m&&l&&(e=a[a.length-1])instanceof m&&t.lines+e.lines<=32?(l+=t.lines,h+=t.length+1,a[a.length-1]=new m(e.text.concat(t.text),e.length+1+t.length)):(l+t.lines>i&&u(),l+=t.lines,h+=t.length+1,a.push(t))}function u(){0!=l&&(o.push(1==a.length?a[0]:w.from(a,h)),h=-1,l=a.length=0)}for(let e of t)c(e);return u(),1==o.length?o[0]:new w(o,e)}}function v(t,e,n=0,i=1e9){for(let r=0,s=0,o=!0;s<t.length&&r<=i;s++){let l=t[s],h=r+l.length;h>=n&&(h>i&&(l=l.slice(0,i-r)),r<n&&(l=l.slice(n-r)),o?(e[e.length-1]+=l,o=!1):e.push(l)),r=h+1}return e}function y(t,e,n){return v(t,[""],e,n)}g.empty=new m([""],0);class b{constructor(t,e=1){this.dir=e,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[t],this.offsets=[e>0?1:(t instanceof m?t.text.length:t.children.length)<<1]}nextInner(t,e){for(this.done=this.lineBreak=!1;;){let n=this.nodes.length-1,i=this.nodes[n],r=this.offsets[n],s=r>>1,o=i instanceof m?i.text.length:i.children.length;if(s==(e>0?o:0)){if(0==n)return this.done=!0,this.value="",this;e>0&&this.offsets[n-1]++,this.nodes.pop(),this.offsets.pop()}else if((1&r)==(e>0?0:1)){if(this.offsets[n]+=e,0==t)return this.lineBreak=!0,this.value="\n",this;t--}else if(i instanceof m){let r=i.text[s+(e<0?-1:0)];if(this.offsets[n]+=e,r.length>Math.max(0,t))return this.value=0==t?r:e>0?r.slice(t):r.slice(0,r.length-t),this;t-=r.length}else{let r=i.children[s+(e<0?-1:0)];t>r.length?(t-=r.length,this.offsets[n]+=e):(e<0&&this.offsets[n]--,this.nodes.push(r),this.offsets.push(e>0?1:(r instanceof m?r.text.length:r.children.length)<<1))}}}next(t=0){return t<0&&(this.nextInner(-t,-this.dir),t=this.value.length),this.nextInner(t,this.dir)}}class x{constructor(t,e,n){this.value="",this.done=!1,this.cursor=new b(t,e>n?-1:1),this.pos=e>n?t.length:0,this.from=Math.min(e,n),this.to=Math.max(e,n)}nextInner(t,e){if(e<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;t+=Math.max(0,e<0?this.pos-this.to:this.from-this.pos);let n=e<0?this.pos-this.from:this.to-this.pos;t>n&&(t=n),n-=t;let{value:i}=this.cursor.next(t);return this.pos+=(i.length+t)*e,this.value=i.length<=n?i:e<0?i.slice(i.length-n):i.slice(0,n),this.done=!this.value,this}next(t=0){return t<0?t=Math.max(t,this.from-this.pos):t>0&&(t=Math.min(t,this.to-this.pos)),this.nextInner(t,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&""!=this.value}}class k{constructor(t){this.inner=t,this.afterBreak=!0,this.value="",this.done=!1}next(t=0){let{done:e,lineBreak:n,value:i}=this.inner.next(t);return e&&this.afterBreak?(this.value="",this.afterBreak=!1):e?(this.done=!0,this.value=""):n?this.afterBreak?this.value="":(this.afterBreak=!0,this.next()):(this.value=i,this.afterBreak=!1),this}get lineBreak(){return!1}}"undefined"!=typeof Symbol&&(g.prototype[Symbol.iterator]=function(){return this.iter()},b.prototype[Symbol.iterator]=x.prototype[Symbol.iterator]=k.prototype[Symbol.iterator]=function(){return this});class S{constructor(t,e,n,i){this.from=t,this.to=e,this.number=n,this.text=i}get length(){return this.to-this.from}}function A(t,e,n){return[e=Math.max(0,Math.min(t.length,e)),Math.max(e,Math.min(t.length,n))]}function M(t,e,n=!0,i=!0){return h(t,e,n,i)}function C(t,e){let n=t.charCodeAt(e);if(!((i=n)>=55296&&i<56320&&e+1!=t.length))return n;var i;let r=t.charCodeAt(e+1);return function(t){return t>=56320&&t<57344}(r)?r-56320+(n-55296<<10)+65536:n}function O(t){return t<65536?1:2}const T=/\r\n?|\n/;var E=function(t){return t[t.Simple=0]="Simple",t[t.TrackDel=1]="TrackDel",t[t.TrackBefore=2]="TrackBefore",t[t.TrackAfter=3]="TrackAfter",t}(E||(E={}));class D{constructor(t){this.sections=t}get length(){let t=0;for(let e=0;e<this.sections.length;e+=2)t+=this.sections[e];return t}get newLength(){let t=0;for(let e=0;e<this.sections.length;e+=2){let n=this.sections[e+1];t+=n<0?this.sections[e]:n}return t}get empty(){return 0==this.sections.length||2==this.sections.length&&this.sections[1]<0}iterGaps(t){for(let e=0,n=0,i=0;e<this.sections.length;){let r=this.sections[e++],s=this.sections[e++];s<0?(t(n,i,r),i+=r):i+=s,n+=r}}iterChangedRanges(t,e=!1){L(this,t,e)}get invertedDesc(){let t=[];for(let e=0;e<this.sections.length;){let n=this.sections[e++],i=this.sections[e++];i<0?t.push(n,i):t.push(i,n)}return new D(t)}composeDesc(t){return this.empty?t:t.empty?this:I(this,t)}mapDesc(t,e=!1){return t.empty?this:N(this,t,e)}mapPos(t,e=-1,n=E.Simple){let i=0,r=0;for(let s=0;s<this.sections.length;){let o=this.sections[s++],l=this.sections[s++],h=i+o;if(l<0){if(h>t)return r+(t-i);r+=o}else{if(n!=E.Simple&&h>=t&&(n==E.TrackDel&&i<t&&h>t||n==E.TrackBefore&&i<t||n==E.TrackAfter&&h>t))return null;if(h>t||h==t&&e<0&&!o)return t==i||e<0?r:r+l;r+=l}i=h}if(t>i)throw new RangeError(`Position ${t} is out of range for changeset of length ${i}`);return r}touchesRange(t,e=t){for(let n=0,i=0;n<this.sections.length&&i<=e;){let r=i+this.sections[n++];if(this.sections[n++]>=0&&i<=e&&r>=t)return!(i<t&&r>e)||"cover";i=r}return!1}toString(){let t="";for(let e=0;e<this.sections.length;){let n=this.sections[e++],i=this.sections[e++];t+=(t?" ":"")+n+(i>=0?":"+i:"")}return t}toJSON(){return this.sections}static fromJSON(t){if(!Array.isArray(t)||t.length%2||t.some((t=>"number"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeDesc");return new D(t)}static create(t){return new D(t)}}class R extends D{constructor(t,e){super(t),this.inserted=e}apply(t){if(this.length!=t.length)throw new RangeError("Applying change set to a document with the wrong length");return L(this,((e,n,i,r,s)=>t=t.replace(i,i+(n-e),s)),!1),t}mapDesc(t,e=!1){return N(this,t,e,!0)}invert(t){let e=this.sections.slice(),n=[];for(let i=0,r=0;i<e.length;i+=2){let s=e[i],o=e[i+1];if(o>=0){e[i]=o,e[i+1]=s;let l=i>>1;for(;n.length<l;)n.push(g.empty);n.push(s?t.slice(r,r+s):g.empty)}r+=s}return new R(e,n)}compose(t){return this.empty?t:t.empty?this:I(this,t,!0)}map(t,e=!1){return t.empty?this:N(this,t,e,!0)}iterChanges(t,e=!1){L(this,t,e)}get desc(){return D.create(this.sections)}filter(t){let e=[],n=[],i=[],r=new F(this);t:for(let s=0,o=0;;){let l=s==t.length?1e9:t[s++];for(;o<l||o==l&&0==r.len;){if(r.done)break t;let t=Math.min(r.len,l-o);B(i,t,-1);let s=-1==r.ins?-1:0==r.off?r.ins:0;B(e,t,s),s>0&&P(n,e,r.text),r.forward(t),o+=t}let h=t[s++];for(;o<h;){if(r.done)break t;let t=Math.min(r.len,h-o);B(e,t,-1),B(i,t,-1==r.ins?-1:0==r.off?r.ins:0),r.forward(t),o+=t}}return{changes:new R(e,n),filtered:D.create(i)}}toJSON(){let t=[];for(let e=0;e<this.sections.length;e+=2){let n=this.sections[e],i=this.sections[e+1];i<0?t.push(n):0==i?t.push([n]):t.push([n].concat(this.inserted[e>>1].toJSON()))}return t}static of(t,e,n){let i=[],r=[],s=0,o=null;function l(t=!1){if(!t&&!i.length)return;s<e&&B(i,e-s,-1);let n=new R(i,r);o=o?o.compose(n.map(o)):n,i=[],r=[],s=0}return function t(h){if(Array.isArray(h))for(let e of h)t(e);else if(h instanceof R){if(h.length!=e)throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${e})`);l(),o=o?o.compose(h.map(o)):h}else{let{from:t,to:o=t,insert:a}=h;if(t>o||t<0||o>e)throw new RangeError(`Invalid change range ${t} to ${o} (in doc of length ${e})`);let c=a?"string"==typeof a?g.of(a.split(n||T)):a:g.empty,u=c.length;if(t==o&&0==u)return;t<s&&l(),t>s&&B(i,t-s,-1),B(i,o-t,u),P(r,i,c),s=o}}(t),l(!o),o}static empty(t){return new R(t?[t,-1]:[],[])}static fromJSON(t){if(!Array.isArray(t))throw new RangeError("Invalid JSON representation of ChangeSet");let e=[],n=[];for(let i=0;i<t.length;i++){let r=t[i];if("number"==typeof r)e.push(r,-1);else{if(!Array.isArray(r)||"number"!=typeof r[0]||r.some(((t,e)=>e&&"string"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeSet");if(1==r.length)e.push(r[0],0);else{for(;n.length<i;)n.push(g.empty);n[i]=g.of(r.slice(1)),e.push(r[0],n[i].length)}}}return new R(e,n)}static createSet(t,e){return new R(t,e)}}function B(t,e,n,i=!1){if(0==e&&n<=0)return;let r=t.length-2;r>=0&&n<=0&&n==t[r+1]?t[r]+=e:r>=0&&0==e&&0==t[r]?t[r+1]+=n:i?(t[r]+=e,t[r+1]+=n):t.push(e,n)}function P(t,e,n){if(0==n.length)return;let i=e.length-2>>1;if(i<t.length)t[t.length-1]=t[t.length-1].append(n);else{for(;t.length<i;)t.push(g.empty);t.push(n)}}function L(t,e,n){let i=t.inserted;for(let r=0,s=0,o=0;o<t.sections.length;){let l=t.sections[o++],h=t.sections[o++];if(h<0)r+=l,s+=l;else{let a=r,c=s,u=g.empty;for(;a+=l,c+=h,h&&i&&(u=u.append(i[o-2>>1])),!(n||o==t.sections.length||t.sections[o+1]<0);)l=t.sections[o++],h=t.sections[o++];e(r,a,s,c,u),r=a,s=c}}}function N(t,e,n,i=!1){let r=[],s=i?[]:null,o=new F(t),l=new F(e);for(let t=-1;;){if(o.done&&l.len||l.done&&o.len)throw new Error("Mismatched change set lengths");if(-1==o.ins&&-1==l.ins){let t=Math.min(o.len,l.len);B(r,t,-1),o.forward(t),l.forward(t)}else if(l.ins>=0&&(o.ins<0||t==o.i||0==o.off&&(l.len<o.len||l.len==o.len&&!n))){let e=l.len;for(B(r,l.ins,-1);e;){let n=Math.min(o.len,e);o.ins>=0&&t<o.i&&o.len<=n&&(B(r,0,o.ins),s&&P(s,r,o.text),t=o.i),o.forward(n),e-=n}l.next()}else{if(!(o.ins>=0)){if(o.done&&l.done)return s?R.createSet(r,s):D.create(r);throw new Error("Mismatched change set lengths")}{let e=0,n=o.len;for(;n;)if(-1==l.ins){let t=Math.min(n,l.len);e+=t,n-=t,l.forward(t)}else{if(!(0==l.ins&&l.len<n))break;n-=l.len,l.next()}B(r,e,t<o.i?o.ins:0),s&&t<o.i&&P(s,r,o.text),t=o.i,o.forward(o.len-n)}}}}function I(t,e,n=!1){let i=[],r=n?[]:null,s=new F(t),o=new F(e);for(let t=!1;;){if(s.done&&o.done)return r?R.createSet(i,r):D.create(i);if(0==s.ins)B(i,s.len,0,t),s.next();else if(0!=o.len||o.done){if(s.done||o.done)throw new Error("Mismatched change set lengths");{let e=Math.min(s.len2,o.len),n=i.length;if(-1==s.ins){let n=-1==o.ins?-1:o.off?0:o.ins;B(i,e,n,t),r&&n&&P(r,i,o.text)}else-1==o.ins?(B(i,s.off?0:s.len,e,t),r&&P(r,i,s.textBit(e))):(B(i,s.off?0:s.len,o.off?0:o.ins,t),r&&!o.off&&P(r,i,o.text));t=(s.ins>e||o.ins>=0&&o.len>e)&&(t||i.length>n),s.forward2(e),o.forward(e)}}else B(i,0,o.ins,t),r&&P(r,i,o.text),o.next()}}class F{constructor(t){this.set=t,this.i=0,this.next()}next(){let{sections:t}=this.set;this.i<t.length?(this.len=t[this.i++],this.ins=t[this.i++]):(this.len=0,this.ins=-2),this.off=0}get done(){return-2==this.ins}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:t}=this.set,e=this.i-2>>1;return e>=t.length?g.empty:t[e]}textBit(t){let{inserted:e}=this.set,n=this.i-2>>1;return n>=e.length&&!t?g.empty:e[n].slice(this.off,null==t?void 0:this.off+t)}forward(t){t==this.len?this.next():(this.len-=t,this.off+=t)}forward2(t){-1==this.ins?this.forward(t):t==this.ins?this.next():(this.ins-=t,this.off+=t)}}class ${constructor(t,e,n){this.from=t,this.to=e,this.flags=n}get anchor(){return 32&this.flags?this.to:this.from}get head(){return 32&this.flags?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return 8&this.flags?-1:16&this.flags?1:0}get bidiLevel(){let t=7&this.flags;return 7==t?null:t}get goalColumn(){let t=this.flags>>6;return 16777215==t?void 0:t}map(t,e=-1){let n,i;return this.empty?n=i=t.mapPos(this.from,e):(n=t.mapPos(this.from,1),i=t.mapPos(this.to,-1)),n==this.from&&i==this.to?this:new $(n,i,this.flags)}extend(t,e=t){if(t<=this.anchor&&e>=this.anchor)return z.range(t,e);let n=Math.abs(t-this.anchor)>Math.abs(e-this.anchor)?t:e;return z.range(this.anchor,n)}eq(t,e=!1){return!(this.anchor!=t.anchor||this.head!=t.head||e&&this.empty&&this.assoc!=t.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(t){if(!t||"number"!=typeof t.anchor||"number"!=typeof t.head)throw new RangeError("Invalid JSON representation for SelectionRange");return z.range(t.anchor,t.head)}static create(t,e,n){return new $(t,e,n)}}class z{constructor(t,e){this.ranges=t,this.mainIndex=e}map(t,e=-1){return t.empty?this:z.create(this.ranges.map((n=>n.map(t,e))),this.mainIndex)}eq(t,e=!1){if(this.ranges.length!=t.ranges.length||this.mainIndex!=t.mainIndex)return!1;for(let n=0;n<this.ranges.length;n++)if(!this.ranges[n].eq(t.ranges[n],e))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return 1==this.ranges.length?this:new z([this.main],0)}addRange(t,e=!0){return z.create([t].concat(this.ranges),e?0:this.mainIndex+1)}replaceRange(t,e=this.mainIndex){let n=this.ranges.slice();return n[e]=t,z.create(n,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((t=>t.toJSON())),main:this.mainIndex}}static fromJSON(t){if(!t||!Array.isArray(t.ranges)||"number"!=typeof t.main||t.main>=t.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new z(t.ranges.map((t=>$.fromJSON(t))),t.main)}static single(t,e=t){return new z([z.range(t,e)],0)}static create(t,e=0){if(0==t.length)throw new RangeError("A selection needs at least one range");for(let n=0,i=0;i<t.length;i++){let r=t[i];if(r.empty?r.from<=n:r.from<n)return z.normalized(t.slice(),e);n=r.to}return new z(t,e)}static cursor(t,e=0,n,i){return $.create(t,t,(0==e?0:e<0?8:16)|(null==n?7:Math.min(6,n))|(null!=i?i:16777215)<<6)}static range(t,e,n,i){let r=(null!=n?n:16777215)<<6|(null==i?7:Math.min(6,i));return e<t?$.create(e,t,48|r):$.create(t,e,(e>t?8:0)|r)}static normalized(t,e=0){let n=t[e];t.sort(((t,e)=>t.from-e.from)),e=t.indexOf(n);for(let n=1;n<t.length;n++){let i=t[n],r=t[n-1];if(i.empty?i.from<=r.to:i.from<r.to){let s=r.from,o=Math.max(i.to,r.to);n<=e&&e--,t.splice(--n,2,i.anchor>i.head?z.range(o,s):z.range(s,o))}}return new z(t,e)}}function H(t,e){for(let n of t.ranges)if(n.to>e)throw new RangeError("Selection points outside of document")}let V=0;class _{constructor(t,e,n,i,r){this.combine=t,this.compareInput=e,this.compare=n,this.isStatic=i,this.id=V++,this.default=t([]),this.extensions="function"==typeof r?r(this):r}get reader(){return this}static define(t={}){return new _(t.combine||(t=>t),t.compareInput||((t,e)=>t===e),t.compare||(t.combine?(t,e)=>t===e:W),!!t.static,t.enables)}of(t){return new j([],this,0,t)}compute(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new j(t,this,1,e)}computeN(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new j(t,this,2,e)}from(t,e){return e||(e=t=>t),this.compute([t],(n=>e(n.field(t))))}}function W(t,e){return t==e||t.length==e.length&&t.every(((t,n)=>t===e[n]))}class j{constructor(t,e,n,i){this.dependencies=t,this.facet=e,this.type=n,this.value=i,this.id=V++}dynamicSlot(t){var e;let n=this.value,i=this.facet.compareInput,r=this.id,s=t[r]>>1,o=2==this.type,l=!1,h=!1,a=[];for(let n of this.dependencies)"doc"==n?l=!0:"selection"==n?h=!0:1&(null!==(e=t[n.id])&&void 0!==e?e:1)||a.push(t[n.id]);return{create:t=>(t.values[s]=n(t),1),update(t,e){if(l&&e.docChanged||h&&(e.docChanged||e.selection)||K(t,a)){let e=n(t);if(o?!q(e,t.values[s],i):!i(e,t.values[s]))return t.values[s]=e,1}return 0},reconfigure:(t,e)=>{let l,h=e.config.address[r];if(null!=h){let r=it(e,h);if(this.dependencies.every((n=>n instanceof _?e.facet(n)===t.facet(n):!(n instanceof Y)||e.field(n,!1)==t.field(n,!1)))||(o?q(l=n(t),r,i):i(l=n(t),r)))return t.values[s]=r,0}else l=n(t);return t.values[s]=l,1}}}}function q(t,e,n){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++)if(!n(t[i],e[i]))return!1;return!0}function K(t,e){let n=!1;for(let i of e)1&nt(t,i)&&(n=!0);return n}function G(t,e,n){let i=n.map((e=>t[e.id])),r=n.map((t=>t.type)),s=i.filter((t=>!(1&t))),o=t[e.id]>>1;function l(t){let n=[];for(let e=0;e<i.length;e++){let s=it(t,i[e]);if(2==r[e])for(let t of s)n.push(t);else n.push(s)}return e.combine(n)}return{create(t){for(let e of i)nt(t,e);return t.values[o]=l(t),1},update(t,n){if(!K(t,s))return 0;let i=l(t);return e.compare(i,t.values[o])?0:(t.values[o]=i,1)},reconfigure(t,r){let s=K(t,i),h=r.config.facets[e.id],a=r.facet(e);if(h&&!s&&W(n,h))return t.values[o]=a,0;let c=l(t);return e.compare(c,a)?(t.values[o]=a,0):(t.values[o]=c,1)}}}const U=_.define({static:!0});class Y{constructor(t,e,n,i,r){this.id=t,this.createF=e,this.updateF=n,this.compareF=i,this.spec=r,this.provides=void 0}static define(t){let e=new Y(V++,t.create,t.update,t.compare||((t,e)=>t===e),t);return t.provide&&(e.provides=t.provide(e)),e}create(t){let e=t.facet(U).find((t=>t.field==this));return((null==e?void 0:e.create)||this.createF)(t)}slot(t){let e=t[this.id]>>1;return{create:t=>(t.values[e]=this.create(t),1),update:(t,n)=>{let i=t.values[e],r=this.updateF(i,n);return this.compareF(i,r)?0:(t.values[e]=r,1)},reconfigure:(t,n)=>{let i,r=t.facet(U),s=n.facet(U);return(i=r.find((t=>t.field==this)))&&i!=s.find((t=>t.field==this))?(t.values[e]=i.create(t),1):null!=n.config.address[this.id]?(t.values[e]=n.field(this),0):(t.values[e]=this.create(t),1)}}}init(t){return[this,U.of({field:this,create:t})]}get extension(){return this}}function J(t){return e=>new Z(e,t)}const X={highest:J(0),high:J(1),default:J(2),low:J(3),lowest:J(4)};class Z{constructor(t,e){this.inner=t,this.prec=e}}class Q{of(t){return new tt(this,t)}reconfigure(t){return Q.reconfigure.of({compartment:this,extension:t})}get(t){return t.config.compartments.get(this)}}class tt{constructor(t,e){this.compartment=t,this.inner=e}}class et{constructor(t,e,n,i,r,s){for(this.base=t,this.compartments=e,this.dynamicSlots=n,this.address=i,this.staticValues=r,this.facets=s,this.statusTemplate=[];this.statusTemplate.length<n.length;)this.statusTemplate.push(0)}staticFacet(t){let e=this.address[t.id];return null==e?t.default:this.staticValues[e>>1]}static resolve(t,e,n){let i=[],r=Object.create(null),s=new Map;for(let n of function(t,e,n){let i=[[],[],[],[],[]],r=new Map;return function t(s,o){let l=r.get(s);if(null!=l){if(l<=o)return;let t=i[l].indexOf(s);t>-1&&i[l].splice(t,1),s instanceof tt&&n.delete(s.compartment)}if(r.set(s,o),Array.isArray(s))for(let e of s)t(e,o);else if(s instanceof tt){if(n.has(s.compartment))throw new RangeError("Duplicate use of compartment in extensions");let i=e.get(s.compartment)||s.inner;n.set(s.compartment,i),t(i,o)}else if(s instanceof Z)t(s.inner,s.prec);else if(s instanceof Y)i[o].push(s),s.provides&&t(s.provides,o);else if(s instanceof j)i[o].push(s),s.facet.extensions&&t(s.facet.extensions,2);else{let e=s.extension;if(!e)throw new Error(`Unrecognized extension value in extension set (${s}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);t(e,o)}}(t,2),i.reduce(((t,e)=>t.concat(e)))}(t,e,s))n instanceof Y?i.push(n):(r[n.facet.id]||(r[n.facet.id]=[])).push(n);let o=Object.create(null),l=[],h=[];for(let t of i)o[t.id]=h.length<<1,h.push((e=>t.slot(e)));let a=null==n?void 0:n.config.facets;for(let t in r){let e=r[t],i=e[0].facet,s=a&&a[t]||[];if(e.every((t=>0==t.type)))if(o[i.id]=l.length<<1|1,W(s,e))l.push(n.facet(i));else{let t=i.combine(e.map((t=>t.value)));l.push(n&&i.compare(t,n.facet(i))?n.facet(i):t)}else{for(let t of e)0==t.type?(o[t.id]=l.length<<1|1,l.push(t.value)):(o[t.id]=h.length<<1,h.push((e=>t.dynamicSlot(e))));o[i.id]=h.length<<1,h.push((t=>G(t,i,e)))}}let c=h.map((t=>t(o)));return new et(t,s,c,o,l,r)}}function nt(t,e){if(1&e)return 2;let n=e>>1,i=t.status[n];if(4==i)throw new Error("Cyclic dependency between fields and/or facets");if(2&i)return i;t.status[n]=4;let r=t.computeSlot(t,t.config.dynamicSlots[n]);return t.status[n]=2|r}function it(t,e){return 1&e?t.config.staticValues[e>>1]:t.values[e>>1]}const rt=_.define(),st=_.define({combine:t=>t.some((t=>t)),static:!0}),ot=_.define({combine:t=>t.length?t[0]:void 0,static:!0}),lt=_.define(),ht=_.define(),at=_.define(),ct=_.define({combine:t=>!!t.length&&t[0]});class ut{constructor(t,e){this.type=t,this.value=e}static define(){return new ft}}class ft{of(t){return new ut(this,t)}}class dt{constructor(t){this.map=t}of(t){return new pt(this,t)}}class pt{constructor(t,e){this.type=t,this.value=e}map(t){let e=this.type.map(this.value,t);return void 0===e?void 0:e==this.value?this:new pt(this.type,e)}is(t){return this.type==t}static define(t={}){return new dt(t.map||(t=>t))}static mapEffects(t,e){if(!t.length)return t;let n=[];for(let i of t){let t=i.map(e);t&&n.push(t)}return n}}pt.reconfigure=pt.define(),pt.appendConfig=pt.define();class gt{constructor(t,e,n,i,r,s){this.startState=t,this.changes=e,this.selection=n,this.effects=i,this.annotations=r,this.scrollIntoView=s,this._doc=null,this._state=null,n&&H(n,e.newLength),r.some((t=>t.type==gt.time))||(this.annotations=r.concat(gt.time.of(Date.now())))}static create(t,e,n,i,r,s){return new gt(t,e,n,i,r,s)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){return this._state||this.startState.applyTransaction(this),this._state}annotation(t){for(let e of this.annotations)if(e.type==t)return e.value}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(t){let e=this.annotation(gt.userEvent);return!(!e||!(e==t||e.length>t.length&&e.slice(0,t.length)==t&&"."==e[t.length]))}}function mt(t,e){let n=[];for(let i=0,r=0;;){let s,o;if(i<t.length&&(r==e.length||e[r]>=t[i]))s=t[i++],o=t[i++];else{if(!(r<e.length))return n;s=e[r++],o=e[r++]}!n.length||n[n.length-1]<s?n.push(s,o):n[n.length-1]<o&&(n[n.length-1]=o)}}function wt(t,e,n){var i;let r,s,o;return n?(r=e.changes,s=R.empty(e.changes.length),o=t.changes.compose(e.changes)):(r=e.changes.map(t.changes),s=t.changes.mapDesc(e.changes,!0),o=t.changes.compose(r)),{changes:o,selection:e.selection?e.selection.map(s):null===(i=t.selection)||void 0===i?void 0:i.map(r),effects:pt.mapEffects(t.effects,r).concat(pt.mapEffects(e.effects,s)),annotations:t.annotations.length?t.annotations.concat(e.annotations):e.annotations,scrollIntoView:t.scrollIntoView||e.scrollIntoView}}function vt(t,e,n){let i=e.selection,r=xt(e.annotations);return e.userEvent&&(r=r.concat(gt.userEvent.of(e.userEvent))),{changes:e.changes instanceof R?e.changes:R.of(e.changes||[],n,t.facet(ot)),selection:i&&(i instanceof z?i:z.single(i.anchor,i.head)),effects:xt(e.effects),annotations:r,scrollIntoView:!!e.scrollIntoView}}function yt(t,e,n){let i=vt(t,e.length?e[0]:{},t.doc.length);e.length&&!1===e[0].filter&&(n=!1);for(let r=1;r<e.length;r++){!1===e[r].filter&&(n=!1);let s=!!e[r].sequential;i=wt(i,vt(t,e[r],s?i.changes.newLength:t.doc.length),s)}let r=gt.create(t,i.changes,i.selection,i.effects,i.annotations,i.scrollIntoView);return function(t){let e=t.startState,n=e.facet(at),i=t;for(let r=n.length-1;r>=0;r--){let s=n[r](t);s&&Object.keys(s).length&&(i=wt(i,vt(e,s,t.changes.newLength),!0))}return i==t?t:gt.create(e,t.changes,t.selection,i.effects,i.annotations,i.scrollIntoView)}(n?function(t){let e=t.startState,n=!0;for(let i of e.facet(lt)){let e=i(t);if(!1===e){n=!1;break}Array.isArray(e)&&(n=!0===n?e:mt(n,e))}if(!0!==n){let i,r;if(!1===n)r=t.changes.invertedDesc,i=R.empty(e.doc.length);else{let e=t.changes.filter(n);i=e.changes,r=e.filtered.mapDesc(e.changes).invertedDesc}t=gt.create(e,i,t.selection&&t.selection.map(r),pt.mapEffects(t.effects,r),t.annotations,t.scrollIntoView)}let i=e.facet(ht);for(let n=i.length-1;n>=0;n--){let r=i[n](t);t=r instanceof gt?r:Array.isArray(r)&&1==r.length&&r[0]instanceof gt?r[0]:yt(e,xt(r),!1)}return t}(r):r)}gt.time=ut.define(),gt.userEvent=ut.define(),gt.addToHistory=ut.define(),gt.remote=ut.define();const bt=[];function xt(t){return null==t?bt:Array.isArray(t)?t:[t]}var kt=function(t){return t[t.Word=0]="Word",t[t.Space=1]="Space",t[t.Other=2]="Other",t}(kt||(kt={}));const St=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;let At;try{At=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(t){}class Mt{constructor(t,e,n,i,r,s){this.config=t,this.doc=e,this.selection=n,this.values=i,this.status=t.statusTemplate.slice(),this.computeSlot=r,s&&(s._state=this);for(let t=0;t<this.config.dynamicSlots.length;t++)nt(this,t<<1);this.computeSlot=null}field(t,e=!0){let n=this.config.address[t.id];if(null!=n)return nt(this,n),it(this,n);if(e)throw new RangeError("Field is not present in this state")}update(...t){return yt(this,t,!0)}applyTransaction(t){let e,n=this.config,{base:i,compartments:r}=n;for(let e of t.effects)e.is(Q.reconfigure)?(n&&(r=new Map,n.compartments.forEach(((t,e)=>r.set(e,t))),n=null),r.set(e.value.compartment,e.value.extension)):e.is(pt.reconfigure)?(n=null,i=e.value):e.is(pt.appendConfig)&&(n=null,i=xt(i).concat(e.value));n?e=t.startState.values.slice():(n=et.resolve(i,r,this),e=new Mt(n,this.doc,this.selection,n.dynamicSlots.map((()=>null)),((t,e)=>e.reconfigure(t,this)),null).values);let s=t.startState.facet(st)?t.newSelection:t.newSelection.asSingle();new Mt(n,t.newDoc,s,e,((e,n)=>n.update(e,t)),t)}replaceSelection(t){return"string"==typeof t&&(t=this.toText(t)),this.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:t},range:z.cursor(e.from+t.length)})))}changeByRange(t){let e=this.selection,n=t(e.ranges[0]),i=this.changes(n.changes),r=[n.range],s=xt(n.effects);for(let n=1;n<e.ranges.length;n++){let o=t(e.ranges[n]),l=this.changes(o.changes),h=l.map(i);for(let t=0;t<n;t++)r[t]=r[t].map(h);let a=i.mapDesc(l,!0);r.push(o.range.map(a)),i=i.compose(h),s=pt.mapEffects(s,h).concat(pt.mapEffects(xt(o.effects),a))}return{changes:i,selection:z.create(r,e.mainIndex),effects:s}}changes(t=[]){return t instanceof R?t:R.of(t,this.doc.length,this.facet(Mt.lineSeparator))}toText(t){return g.of(t.split(this.facet(Mt.lineSeparator)||T))}sliceDoc(t=0,e=this.doc.length){return this.doc.sliceString(t,e,this.lineBreak)}facet(t){let e=this.config.address[t.id];return null==e?t.default:(nt(this,e),it(this,e))}toJSON(t){let e={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(t)for(let n in t){let i=t[n];i instanceof Y&&null!=this.config.address[i.id]&&(e[n]=i.spec.toJSON(this.field(t[n]),this))}return e}static fromJSON(t,e={},n){if(!t||"string"!=typeof t.doc)throw new RangeError("Invalid JSON representation for EditorState");let i=[];if(n)for(let e in n)if(Object.prototype.hasOwnProperty.call(t,e)){let r=n[e],s=t[e];i.push(r.init((t=>r.spec.fromJSON(s,t))))}return Mt.create({doc:t.doc,selection:z.fromJSON(t.selection),extensions:e.extensions?i.concat([e.extensions]):i})}static create(t={}){let e=et.resolve(t.extensions||[],new Map),n=t.doc instanceof g?t.doc:g.of((t.doc||"").split(e.staticFacet(Mt.lineSeparator)||T)),i=t.selection?t.selection instanceof z?t.selection:z.single(t.selection.anchor,t.selection.head):z.single(0);return H(i,n.length),e.staticFacet(st)||(i=i.asSingle()),new Mt(e,n,i,e.dynamicSlots.map((()=>null)),((t,e)=>e.create(t)),null)}get tabSize(){return this.facet(Mt.tabSize)}get lineBreak(){return this.facet(Mt.lineSeparator)||"\n"}get readOnly(){return this.facet(ct)}phrase(t,...e){for(let e of this.facet(Mt.phrases))if(Object.prototype.hasOwnProperty.call(e,t)){t=e[t];break}return e.length&&(t=t.replace(/\$(\$|\d*)/g,((t,n)=>{if("$"==n)return"$";let i=+(n||1);return!i||i>e.length?t:e[i-1]}))),t}languageDataAt(t,e,n=-1){let i=[];for(let r of this.facet(rt))for(let s of r(this,e,n))Object.prototype.hasOwnProperty.call(s,t)&&i.push(s[t]);return i}charCategorizer(t){return e=this.languageDataAt("wordChars",t).join(""),t=>{if(!/\S/.test(t))return kt.Space;if(function(t){if(At)return At.test(t);for(let e=0;e<t.length;e++){let n=t[e];if(/\w/.test(n)||n>""&&(n.toUpperCase()!=n.toLowerCase()||St.test(n)))return!0}return!1}(t))return kt.Word;for(let n=0;n<e.length;n++)if(t.indexOf(e[n])>-1)return kt.Word;return kt.Other};var e}wordAt(t){let{text:e,from:n,length:i}=this.doc.lineAt(t),r=this.charCategorizer(t),s=t-n,o=t-n;for(;s>0;){let t=M(e,s,!1);if(r(e.slice(t,s))!=kt.Word)break;s=t}for(;o<i;){let t=M(e,o);if(r(e.slice(o,t))!=kt.Word)break;o=t}return s==o?null:z.range(s+n,o+n)}}function Ct(t,e,n={}){let i={};for(let e of t)for(let t of Object.keys(e)){let r=e[t],s=i[t];if(void 0===s)i[t]=r;else if(s===r||void 0===r);else{if(!Object.hasOwnProperty.call(n,t))throw new Error("Config merge conflict for field "+t);i[t]=n[t](s,r)}}for(let t in e)void 0===i[t]&&(i[t]=e[t]);return i}Mt.allowMultipleSelections=st,Mt.tabSize=_.define({combine:t=>t.length?t[0]:4}),Mt.lineSeparator=ot,Mt.readOnly=ct,Mt.phrases=_.define({compare(t,e){let n=Object.keys(t),i=Object.keys(e);return n.length==i.length&&n.every((n=>t[n]==e[n]))}}),Mt.languageData=rt,Mt.changeFilter=lt,Mt.transactionFilter=ht,Mt.transactionExtender=at,Q.reconfigure=pt.define();class Ot{eq(t){return this==t}range(t,e=t){return Tt.create(t,e,this)}}Ot.prototype.startSide=Ot.prototype.endSide=0,Ot.prototype.point=!1,Ot.prototype.mapMode=E.TrackDel;class Tt{constructor(t,e,n){this.from=t,this.to=e,this.value=n}static create(t,e,n){return new Tt(t,e,n)}}function Et(t,e){return t.from-e.from||t.value.startSide-e.value.startSide}class Dt{constructor(t,e,n,i){this.from=t,this.to=e,this.value=n,this.maxPoint=i}get length(){return this.to[this.to.length-1]}findIndex(t,e,n,i=0){let r=n?this.to:this.from;for(let s=i,o=r.length;;){if(s==o)return s;let i=s+o>>1,l=r[i]-t||(n?this.value[i].endSide:this.value[i].startSide)-e;if(i==s)return l>=0?s:o;l>=0?o=i:s=i+1}}between(t,e,n,i){for(let r=this.findIndex(e,-1e9,!0),s=this.findIndex(n,1e9,!1,r);r<s;r++)if(!1===i(this.from[r]+t,this.to[r]+t,this.value[r]))return!1}map(t,e){let n=[],i=[],r=[],s=-1,o=-1;for(let l=0;l<this.value.length;l++){let h,a,c=this.value[l],u=this.from[l]+t,f=this.to[l]+t;if(u==f){let t=e.mapPos(u,c.startSide,c.mapMode);if(null==t)continue;if(h=a=t,c.startSide!=c.endSide&&(a=e.mapPos(u,c.endSide),a<h))continue}else if(h=e.mapPos(u,c.startSide),a=e.mapPos(f,c.endSide),h>a||h==a&&c.startSide>0&&c.endSide<=0)continue;(a-h||c.endSide-c.startSide)<0||(s<0&&(s=h),c.point&&(o=Math.max(o,a-h)),n.push(c),i.push(h-s),r.push(a-s))}return{mapped:n.length?new Dt(i,r,n,o):null,pos:s}}}class Rt{constructor(t,e,n,i){this.chunkPos=t,this.chunk=e,this.nextLayer=n,this.maxPoint=i}static create(t,e,n,i){return new Rt(t,e,n,i)}get length(){let t=this.chunk.length-1;return t<0?0:Math.max(this.chunkEnd(t),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let t=this.nextLayer.size;for(let e of this.chunk)t+=e.value.length;return t}chunkEnd(t){return this.chunkPos[t]+this.chunk[t].length}update(t){let{add:e=[],sort:n=!1,filterFrom:i=0,filterTo:r=this.length}=t,s=t.filter;if(0==e.length&&!s)return this;if(n&&(e=e.slice().sort(Et)),this.isEmpty)return e.length?Rt.of(e):this;let o=new Lt(this,null,-1).goto(0),l=0,h=[],a=new Bt;for(;o.value||l<e.length;)if(l<e.length&&(o.from-e[l].from||o.startSide-e[l].value.startSide)>=0){let t=e[l++];a.addInner(t.from,t.to,t.value)||h.push(t)}else 1==o.rangeIndex&&o.chunkIndex<this.chunk.length&&(l==e.length||this.chunkEnd(o.chunkIndex)<e[l].from)&&(!s||i>this.chunkEnd(o.chunkIndex)||r<this.chunkPos[o.chunkIndex])&&a.addChunk(this.chunkPos[o.chunkIndex],this.chunk[o.chunkIndex])?o.nextChunk():((!s||i>o.to||r<o.from||s(o.from,o.to,o.value))&&(a.addInner(o.from,o.to,o.value)||h.push(Tt.create(o.from,o.to,o.value))),o.next());return a.finishInner(this.nextLayer.isEmpty&&!h.length?Rt.empty:this.nextLayer.update({add:h,filter:s,filterFrom:i,filterTo:r}))}map(t){if(t.empty||this.isEmpty)return this;let e=[],n=[],i=-1;for(let r=0;r<this.chunk.length;r++){let s=this.chunkPos[r],o=this.chunk[r],l=t.touchesRange(s,s+o.length);if(!1===l)i=Math.max(i,o.maxPoint),e.push(o),n.push(t.mapPos(s));else if(!0===l){let{mapped:r,pos:l}=o.map(s,t);r&&(i=Math.max(i,r.maxPoint),e.push(r),n.push(l))}}let r=this.nextLayer.map(t);return 0==e.length?r:new Rt(n,e,r||Rt.empty,i)}between(t,e,n){if(!this.isEmpty){for(let i=0;i<this.chunk.length;i++){let r=this.chunkPos[i],s=this.chunk[i];if(e>=r&&t<=r+s.length&&!1===s.between(r,t-r,e-r,n))return}this.nextLayer.between(t,e,n)}}iter(t=0){return Nt.from([this]).goto(t)}get isEmpty(){return this.nextLayer==this}static iter(t,e=0){return Nt.from(t).goto(e)}static compare(t,e,n,i,r=-1){let s=t.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),o=e.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),l=Pt(s,o,n),h=new Ft(s,l,r),a=new Ft(o,l,r);n.iterGaps(((t,e,n)=>$t(h,t,a,e,n,i))),n.empty&&0==n.length&&$t(h,0,a,0,0,i)}static eq(t,e,n=0,i){null==i&&(i=999999999);let r=t.filter((t=>!t.isEmpty&&e.indexOf(t)<0)),s=e.filter((e=>!e.isEmpty&&t.indexOf(e)<0));if(r.length!=s.length)return!1;if(!r.length)return!0;let o=Pt(r,s),l=new Ft(r,o,0).goto(n),h=new Ft(s,o,0).goto(n);for(;;){if(l.to!=h.to||!zt(l.active,h.active)||l.point&&(!h.point||!l.point.eq(h.point)))return!1;if(l.to>i)return!0;l.next(),h.next()}}static spans(t,e,n,i,r=-1){let s=new Ft(t,null,r).goto(e),o=e,l=s.openStart;for(;;){let t=Math.min(s.to,n);if(s.point){let n=s.activeForPoint(s.to),r=s.pointFrom<e?n.length+1:s.point.startSide<0?n.length:Math.min(n.length,l);i.point(o,t,s.point,n,r,s.pointRank),l=Math.min(s.openEnd(t),n.length)}else t>o&&(i.span(o,t,s.active,l),l=s.openEnd(t));if(s.to>n)return l+(s.point&&s.to>n?1:0);o=s.to,s.next()}}static of(t,e=!1){let n=new Bt;for(let i of t instanceof Tt?[t]:e?function(t){if(t.length>1)for(let e=t[0],n=1;n<t.length;n++){let i=t[n];if(Et(e,i)>0)return t.slice().sort(Et);e=i}return t}(t):t)n.add(i.from,i.to,i.value);return n.finish()}static join(t){if(!t.length)return Rt.empty;let e=t[t.length-1];for(let n=t.length-2;n>=0;n--)for(let i=t[n];i!=Rt.empty;i=i.nextLayer)e=new Rt(i.chunkPos,i.chunk,e,Math.max(i.maxPoint,e.maxPoint));return e}}Rt.empty=new Rt([],[],null,-1),Rt.empty.nextLayer=Rt.empty;class Bt{finishChunk(t){this.chunks.push(new Dt(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,t&&(this.from=[],this.to=[],this.value=[])}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(t,e,n){this.addInner(t,e,n)||(this.nextLayer||(this.nextLayer=new Bt)).add(t,e,n)}addInner(t,e,n){let i=t-this.lastTo||n.startSide-this.last.endSide;if(i<=0&&(t-this.lastFrom||n.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");return!(i<0||(250==this.from.length&&this.finishChunk(!0),this.chunkStart<0&&(this.chunkStart=t),this.from.push(t-this.chunkStart),this.to.push(e-this.chunkStart),this.last=n,this.lastFrom=t,this.lastTo=e,this.value.push(n),n.point&&(this.maxPoint=Math.max(this.maxPoint,e-t)),0))}addChunk(t,e){if((t-this.lastTo||e.value[0].startSide-this.last.endSide)<0)return!1;this.from.length&&this.finishChunk(!0),this.setMaxPoint=Math.max(this.setMaxPoint,e.maxPoint),this.chunks.push(e),this.chunkPos.push(t);let n=e.value.length-1;return this.last=e.value[n],this.lastFrom=e.from[n]+t,this.lastTo=e.to[n]+t,!0}finish(){return this.finishInner(Rt.empty)}finishInner(t){if(this.from.length&&this.finishChunk(!1),0==this.chunks.length)return t;let e=Rt.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(t):t,this.setMaxPoint);return this.from=null,e}}function Pt(t,e,n){let i=new Map;for(let e of t)for(let t=0;t<e.chunk.length;t++)e.chunk[t].maxPoint<=0&&i.set(e.chunk[t],e.chunkPos[t]);let r=new Set;for(let t of e)for(let e=0;e<t.chunk.length;e++){let s=i.get(t.chunk[e]);null==s||(n?n.mapPos(s):s)!=t.chunkPos[e]||(null==n?void 0:n.touchesRange(s,s+t.chunk[e].length))||r.add(t.chunk[e])}return r}class Lt{constructor(t,e,n,i=0){this.layer=t,this.skip=e,this.minPoint=n,this.rank=i}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(t,e=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(t,e,!1),this}gotoInner(t,e,n){for(;this.chunkIndex<this.layer.chunk.length;){let e=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(e)||this.layer.chunkEnd(this.chunkIndex)<t||e.maxPoint<this.minPoint))break;this.chunkIndex++,n=!1}if(this.chunkIndex<this.layer.chunk.length){let i=this.layer.chunk[this.chunkIndex].findIndex(t-this.layer.chunkPos[this.chunkIndex],e,!0);(!n||this.rangeIndex<i)&&this.setRangeIndex(i)}this.next()}forward(t,e){(this.to-t||this.endSide-e)<0&&this.gotoInner(t,e,!0)}next(){for(;;){if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}{let t=this.layer.chunkPos[this.chunkIndex],e=this.layer.chunk[this.chunkIndex],n=t+e.from[this.rangeIndex];if(this.from=n,this.to=t+e.to[this.rangeIndex],this.value=e.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}}setRangeIndex(t){if(t==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)for(;this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=t}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(t){return this.from-t.from||this.startSide-t.startSide||this.rank-t.rank||this.to-t.to||this.endSide-t.endSide}}class Nt{constructor(t){this.heap=t}static from(t,e=null,n=-1){let i=[];for(let r=0;r<t.length;r++)for(let s=t[r];!s.isEmpty;s=s.nextLayer)s.maxPoint>=n&&i.push(new Lt(s,e,n,r));return 1==i.length?i[0]:new Nt(i)}get startSide(){return this.value?this.value.startSide:0}goto(t,e=-1e9){for(let n of this.heap)n.goto(t,e);for(let t=this.heap.length>>1;t>=0;t--)It(this.heap,t);return this.next(),this}forward(t,e){for(let n of this.heap)n.forward(t,e);for(let t=this.heap.length>>1;t>=0;t--)It(this.heap,t);(this.to-t||this.value.endSide-e)<0&&this.next()}next(){if(0==this.heap.length)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let t=this.heap[0];this.from=t.from,this.to=t.to,this.value=t.value,this.rank=t.rank,t.value&&t.next(),It(this.heap,0)}}}function It(t,e){for(let n=t[e];;){let i=1+(e<<1);if(i>=t.length)break;let r=t[i];if(i+1<t.length&&r.compare(t[i+1])>=0&&(r=t[i+1],i++),n.compare(r)<0)break;t[i]=n,t[e]=r,e=i}}class Ft{constructor(t,e,n){this.minPoint=n,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=Nt.from(t,e,n)}goto(t,e=-1e9){return this.cursor.goto(t,e),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=t,this.endSide=e,this.openStart=-1,this.next(),this}forward(t,e){for(;this.minActive>-1&&(this.activeTo[this.minActive]-t||this.active[this.minActive].endSide-e)<0;)this.removeActive(this.minActive);this.cursor.forward(t,e)}removeActive(t){Ht(this.active,t),Ht(this.activeTo,t),Ht(this.activeRank,t),this.minActive=_t(this.active,this.activeTo)}addActive(t){let e=0,{value:n,to:i,rank:r}=this.cursor;for(;e<this.activeRank.length&&(r-this.activeRank[e]||i-this.activeTo[e])>0;)e++;Vt(this.active,e,n),Vt(this.activeTo,e,i),Vt(this.activeRank,e,r),t&&Vt(t,e,this.cursor.from),this.minActive=_t(this.active,this.activeTo)}next(){let t=this.to,e=this.point;this.point=null;let n=this.openStart<0?[]:null;for(;;){let i=this.minActive;if(i>-1&&(this.activeTo[i]-this.cursor.from||this.active[i].endSide-this.cursor.startSide)<0){if(this.activeTo[i]>t){this.to=this.activeTo[i],this.endSide=this.active[i].endSide;break}this.removeActive(i),n&&Ht(n,i)}else{if(!this.cursor.value){this.to=this.endSide=1e9;break}if(this.cursor.from>t){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}{let t=this.cursor.value;if(t.point){if(!(e&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)){this.point=t,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=t.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}this.cursor.next()}else this.addActive(n),this.cursor.next()}}}if(n){this.openStart=0;for(let e=n.length-1;e>=0&&n[e]<t;e--)this.openStart++}}activeForPoint(t){if(!this.active.length)return this.active;let e=[];for(let n=this.active.length-1;n>=0&&!(this.activeRank[n]<this.pointRank);n--)(this.activeTo[n]>t||this.activeTo[n]==t&&this.active[n].endSide>=this.point.endSide)&&e.push(this.active[n]);return e.reverse()}openEnd(t){let e=0;for(let n=this.activeTo.length-1;n>=0&&this.activeTo[n]>t;n--)e++;return e}}function $t(t,e,n,i,r,s){t.goto(e),n.goto(i);let o=i+r,l=i,h=i-e;for(;;){let e=t.to+h-n.to,i=e||t.endSide-n.endSide,r=i<0?t.to+h:n.to,a=Math.min(r,o);if(t.point||n.point?t.point&&n.point&&(t.point==n.point||t.point.eq(n.point))&&zt(t.activeForPoint(t.to),n.activeForPoint(n.to))||s.comparePoint(l,a,t.point,n.point):a>l&&!zt(t.active,n.active)&&s.compareRange(l,a,t.active,n.active),r>o)break;(e||t.openEnd!=n.openEnd)&&s.boundChange&&s.boundChange(r),l=r,i<=0&&t.next(),i>=0&&n.next()}}function zt(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!=e[n]&&!t[n].eq(e[n]))return!1;return!0}function Ht(t,e){for(let n=e,i=t.length-1;n<i;n++)t[n]=t[n+1];t.pop()}function Vt(t,e,n){for(let n=t.length-1;n>=e;n--)t[n+1]=t[n];t[e]=n}function _t(t,e){let n=-1,i=1e9;for(let r=0;r<e.length;r++)(e[r]-i||t[r].endSide-t[n].endSide)<0&&(n=r,i=e[r]);return n}function Wt(t,e,n=t.length){let i=0;for(let r=0;r<n&&r<t.length;)9==t.charCodeAt(r)?(i+=e-i%e,r++):(i++,r=M(t,r));return i}function jt(t,e,n,i){for(let i=0,r=0;;){if(r>=e)return i;if(i==t.length)break;r+=9==t.charCodeAt(i)?n-r%n:1,i=M(t,i)}return!0===i?-1:t.length}},642:(t,e,n)=>{n.d(e,{p8:()=>i,tb:()=>r});var i=1e-6,r="undefined"!=typeof Float32Array?Float32Array:Array;Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)})},659:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},664:(t,e,n)=>{function i(t,e,n,i){return new(n||(n=Promise))((function(r,s){function o(t){try{h(i.next(t))}catch(t){s(t)}}function l(t){try{h(i.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}h((i=i.apply(t,e||[])).next())}))}n.d(e,{sH:()=>i}),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError},798:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},848:(t,e,n)=>{n.d(e,{$A:()=>h,Il:()=>c,Om:()=>l,S8:()=>o,fA:()=>s,gL:()=>a,vt:()=>r});var i=n(642);function r(){var t=new i.tb(3);return i.tb!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function s(t,e,n){var r=new i.tb(3);return r[0]=t,r[1]=e,r[2]=n,r}function o(t,e){var n=e[0],i=e[1],r=e[2],s=n*n+i*i+r*r;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function h(t,e,n){var i=e[0],r=e[1],s=e[2],o=n[0],l=n[1],h=n[2];return t[0]=r*h-s*l,t[1]=s*o-i*h,t[2]=i*l-r*o,t}function a(t,e,n){var i=n[0],r=n[1],s=n[2],o=n[3],l=e[0],h=e[1],a=e[2],c=r*a-s*h,u=s*l-i*a,f=i*h-r*l,d=r*f-s*u,p=s*c-i*f,g=i*u-r*c,m=2*o;return c*=m,u*=m,f*=m,d*=2,p*=2,g*=2,t[0]=l+c+d,t[1]=h+u+p,t[2]=a+f+g,t}var c=function(t){var e=t[0],n=t[1],i=t[2];return Math.hypot(e,n,i)};r()},898:(t,e,n)=>{n.d(e,{NZ:()=>dt,OP:()=>Mt,Lz:()=>hi,wJ:()=>xi,Z9:()=>ae,xO:()=>ut,Wu:()=>Wi,w4:()=>mi,$K:()=>zi,c_:()=>se});for(var i=n(638),r=n(417),s={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},o={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},l="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),h="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),a=0;a<10;a++)s[48+a]=s[96+a]=String(a);for(a=1;a<=24;a++)s[a+111]="F"+a;for(a=65;a<=90;a++)s[a]=String.fromCharCode(a+32),o[a]=String.fromCharCode(a);for(var c in s)o.hasOwnProperty(c)||(o[c]=s[c]);function u(t){let e;return e=11==t.nodeType?t.getSelection?t:t.ownerDocument:t,e.getSelection()}function f(t,e){return!!e&&(t==e||t.contains(1!=e.nodeType?e.parentNode:e))}function d(t,e){if(!e.anchorNode)return!1;try{return f(t,e.anchorNode)}catch(t){return!1}}function p(t){return 3==t.nodeType?O(t,0,t.nodeValue.length).getClientRects():1==t.nodeType?t.getClientRects():[]}function g(t,e,n,i){return!!n&&(v(t,e,n,i,-1)||v(t,e,n,i,1))}function m(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e}function w(t){return 1==t.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(t.nodeName)}function v(t,e,n,i,r){for(;;){if(t==n&&e==i)return!0;if(e==(r<0?0:y(t))){if("DIV"==t.nodeName)return!1;let n=t.parentNode;if(!n||1!=n.nodeType)return!1;e=m(t)+(r<0?0:1),t=n}else{if(1!=t.nodeType)return!1;if(1==(t=t.childNodes[e+(r<0?-1:0)]).nodeType&&"false"==t.contentEditable)return!1;e=r<0?y(t):0}}}function y(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function b(t,e){let n=e?t.left:t.right;return{left:n,right:n,top:t.top,bottom:t.bottom}}function x(t){let e=t.visualViewport;return e?{left:0,right:e.width,top:0,bottom:e.height}:{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function k(t,e){let n=e.width/t.offsetWidth,i=e.height/t.offsetHeight;return(n>.995&&n<1.005||!isFinite(n)||Math.abs(e.width-t.offsetWidth)<1)&&(n=1),(i>.995&&i<1.005||!isFinite(i)||Math.abs(e.height-t.offsetHeight)<1)&&(i=1),{scaleX:n,scaleY:i}}class S{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(t){return this.anchorNode==t.anchorNode&&this.anchorOffset==t.anchorOffset&&this.focusNode==t.focusNode&&this.focusOffset==t.focusOffset}setRange(t){let{anchorNode:e,focusNode:n}=t;this.set(e,Math.min(t.anchorOffset,e?y(e):0),n,Math.min(t.focusOffset,n?y(n):0))}set(t,e,n,i){this.anchorNode=t,this.anchorOffset=e,this.focusNode=n,this.focusOffset=i}}let A,M=null;function C(t){if(t.setActive)return t.setActive();if(M)return t.focus(M);let e=[];for(let n=t;n&&(e.push(n,n.scrollTop,n.scrollLeft),n!=n.ownerDocument);n=n.parentNode);if(t.focus(null==M?{get preventScroll(){return M={preventScroll:!0},!0}}:void 0),!M){M=!1;for(let t=0;t<e.length;){let n=e[t++],i=e[t++],r=e[t++];n.scrollTop!=i&&(n.scrollTop=i),n.scrollLeft!=r&&(n.scrollLeft=r)}}}function O(t,e,n=e){let i=A||(A=document.createRange());return i.setEnd(t,n),i.setStart(t,e),i}function T(t,e,n,i){let r={key:e,code:e,keyCode:n,which:n,cancelable:!0};i&&({altKey:r.altKey,ctrlKey:r.ctrlKey,shiftKey:r.shiftKey,metaKey:r.metaKey}=i);let s=new KeyboardEvent("keydown",r);s.synthetic=!0,t.dispatchEvent(s);let o=new KeyboardEvent("keyup",r);return o.synthetic=!0,t.dispatchEvent(o),s.defaultPrevented||o.defaultPrevented}function E(t){for(;t.attributes.length;)t.removeAttributeNode(t.attributes[0])}function D(t){return t.scrollTop>Math.max(1,t.scrollHeight-t.clientHeight-4)}function R(t,e){for(let n=t,i=e;;){if(3==n.nodeType&&i>0)return{node:n,offset:i};if(1==n.nodeType&&i>0){if("false"==n.contentEditable)return null;n=n.childNodes[i-1],i=y(n)}else{if(!n.parentNode||w(n))return null;i=m(n),n=n.parentNode}}}function B(t,e){for(let n=t,i=e;;){if(3==n.nodeType&&i<n.nodeValue.length)return{node:n,offset:i};if(1==n.nodeType&&i<n.childNodes.length){if("false"==n.contentEditable)return null;n=n.childNodes[i],i=0}else{if(!n.parentNode||w(n))return null;i=m(n)+1,n=n.parentNode}}}class P{constructor(t,e,n=!0){this.node=t,this.offset=e,this.precise=n}static before(t,e){return new P(t.parentNode,m(t),e)}static after(t,e){return new P(t.parentNode,m(t)+1,e)}}const L=[];class N{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(t){let e=this.posAtStart;for(let n of this.children){if(n==t)return e;e+=n.length+n.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(t){return this.posBefore(t)+t.length}sync(t,e){if(2&this.flags){let n,i=this.dom,r=null;for(let s of this.children){if(7&s.flags){if(!s.dom&&(n=r?r.nextSibling:i.firstChild)){let t=N.get(n);(!t||!t.parent&&t.canReuseDOM(s))&&s.reuseDOM(n)}s.sync(t,e),s.flags&=-8}if(n=r?r.nextSibling:i.firstChild,e&&!e.written&&e.node==i&&n!=s.dom&&(e.written=!0),s.dom.parentNode==i)for(;n&&n!=s.dom;)n=I(n);else i.insertBefore(s.dom,n);r=s.dom}for(n=r?r.nextSibling:i.firstChild,n&&e&&e.node==i&&(e.written=!0);n;)n=I(n)}else if(1&this.flags)for(let n of this.children)7&n.flags&&(n.sync(t,e),n.flags&=-8)}reuseDOM(t){}localPosFromDOM(t,e){let n;if(t==this.dom)n=this.dom.childNodes[e];else{let i=0==y(t)?0:0==e?-1:1;for(;;){let e=t.parentNode;if(e==this.dom)break;0==i&&e.firstChild!=e.lastChild&&(i=t==e.firstChild?-1:1),t=e}n=i<0?t:t.nextSibling}if(n==this.dom.firstChild)return 0;for(;n&&!N.get(n);)n=n.nextSibling;if(!n)return this.length;for(let t=0,e=0;;t++){let i=this.children[t];if(i.dom==n)return e;e+=i.length+i.breakAfter}}domBoundsAround(t,e,n=0){let i=-1,r=-1,s=-1,o=-1;for(let l=0,h=n,a=n;l<this.children.length;l++){let n=this.children[l],c=h+n.length;if(h<t&&c>e)return n.domBoundsAround(t,e,h);if(c>=t&&-1==i&&(i=l,r=h),h>e&&n.dom.parentNode==this.dom){s=l,o=a;break}a=c,h=c+n.breakAfter}return{from:r,to:o<0?n+this.length:o,startDOM:(i?this.children[i-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:s<this.children.length&&s>=0?this.children[s].dom:null}}markDirty(t=!1){this.flags|=2,this.markParentsDirty(t)}markParentsDirty(t){for(let e=this.parent;e;e=e.parent){if(t&&(e.flags|=2),1&e.flags)return;e.flags|=1,t=!1}}setParent(t){this.parent!=t&&(this.parent=t,7&this.flags&&this.markParentsDirty(!0))}setDOM(t){this.dom!=t&&(this.dom&&(this.dom.cmView=null),this.dom=t,t.cmView=this)}get rootView(){for(let t=this;;){let e=t.parent;if(!e)return t;t=e}}replaceChildren(t,e,n=L){this.markDirty();for(let i=t;i<e;i++){let t=this.children[i];t.parent==this&&n.indexOf(t)<0&&t.destroy()}n.length<250?this.children.splice(t,e-t,...n):this.children=[].concat(this.children.slice(0,t),n,this.children.slice(e));for(let t=0;t<n.length;t++)n[t].setParent(this)}ignoreMutation(t){return!1}ignoreEvent(t){return!1}childCursor(t=this.length){return new F(this.children,t,this.children.length)}childPos(t,e=1){return this.childCursor().findPos(t,e)}toString(){let t=this.constructor.name.replace("View","");return t+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==t?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(t){return t.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(t,e,n,i,r,s){return!1}become(t){return!1}canReuseDOM(t){return t.constructor==this.constructor&&!(8&(this.flags|t.flags))}getSide(){return 0}destroy(){for(let t of this.children)t.parent==this&&t.destroy();this.parent=null}}function I(t){let e=t.nextSibling;return t.parentNode.removeChild(t),e}N.prototype.breakAfter=0;class F{constructor(t,e,n){this.children=t,this.pos=e,this.i=n,this.off=0}findPos(t,e=1){for(;;){if(t>this.pos||t==this.pos&&(e>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=t-this.pos,this;let n=this.children[--this.i];this.pos-=n.length+n.breakAfter}}}function $(t,e,n,i,r,s,o,l,h){let{children:a}=t,c=a.length?a[e]:null,u=s.length?s[s.length-1]:null,f=u?u.breakAfter:o;if(!(e==i&&c&&!o&&!f&&s.length<2&&c.merge(n,r,s.length?u:null,0==n,l,h))){if(i<a.length){let t=a[i];t&&(r<t.length||t.breakAfter&&(null==u?void 0:u.breakAfter))?(e==i&&(t=t.split(r),r=0),!f&&u&&t.merge(0,r,u,!0,0,h)?s[s.length-1]=t:((r||t.children.length&&!t.children[0].length)&&t.merge(0,r,null,!1,0,h),s.push(t))):(null==t?void 0:t.breakAfter)&&(u?u.breakAfter=1:o=1),i++}for(c&&(c.breakAfter=o,n>0&&(!o&&s.length&&c.merge(n,c.length,s[0],!1,l,0)?c.breakAfter=s.shift().breakAfter:(n<c.length||c.children.length&&0==c.children[c.children.length-1].length)&&c.merge(n,c.length,null,!1,l,0),e++));e<i&&s.length;)if(a[i-1].become(s[s.length-1]))i--,s.pop(),h=s.length?0:l;else{if(!a[e].become(s[0]))break;e++,s.shift(),l=s.length?0:h}!s.length&&e&&i<a.length&&!a[e-1].breakAfter&&a[i].merge(0,0,a[e-1],!1,l,h)&&e--,(e<i||s.length)&&t.replaceChildren(e,i,s)}}function z(t,e,n,i,r,s){let o=t.childCursor(),{i:l,off:h}=o.findPos(n,1),{i:a,off:c}=o.findPos(e,-1),u=e-n;for(let t of i)u+=t.length;t.length+=u,$(t,a,c,l,h,i,0,r,s)}let H="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},V="undefined"!=typeof document?document:{documentElement:{style:{}}};const _=/Edge\/(\d+)/.exec(H.userAgent),W=/MSIE \d/.test(H.userAgent),j=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(H.userAgent),q=!!(W||j||_),K=!q&&/gecko\/(\d+)/i.test(H.userAgent),G=!q&&/Chrome\/(\d+)/.exec(H.userAgent),U="webkitFontSmoothing"in V.documentElement.style,Y=!q&&/Apple Computer/.test(H.vendor),J=Y&&(/Mobile\/\w+/.test(H.userAgent)||H.maxTouchPoints>2);var X={mac:J||/Mac/.test(H.platform),windows:/Win/.test(H.platform),linux:/Linux|X11/.test(H.platform),ie:q,ie_version:W?V.documentMode||6:j?+j[1]:_?+_[1]:0,gecko:K,gecko_version:K?+(/Firefox\/(\d+)/.exec(H.userAgent)||[0,0])[1]:0,chrome:!!G,chrome_version:G?+G[1]:0,ios:J,android:/Android\b/.test(H.userAgent),webkit:U,safari:Y,webkit_version:U?+(/\bAppleWebKit\/(\d+)/.exec(H.userAgent)||[0,0])[1]:0,tabSize:null!=V.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class Z extends N{constructor(t){super(),this.text=t}get length(){return this.text.length}createDOM(t){this.setDOM(t||document.createTextNode(this.text))}sync(t,e){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(e&&e.node==this.dom&&(e.written=!0),this.dom.nodeValue=this.text)}reuseDOM(t){3==t.nodeType&&this.createDOM(t)}merge(t,e,n){return!(8&this.flags||n&&(!(n instanceof Z)||this.length-(e-t)+n.length>256||8&n.flags)||(this.text=this.text.slice(0,t)+(n?n.text:"")+this.text.slice(e),this.markDirty(),0))}split(t){let e=new Z(this.text.slice(t));return this.text=this.text.slice(0,t),this.markDirty(),e.flags|=8&this.flags,e}localPosFromDOM(t,e){return t==this.dom?e:e?this.text.length:0}domAtPos(t){return new P(this.dom,t)}domBoundsAround(t,e,n){return{from:n,to:n+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(t,e){return function(t,e,n){let i=t.nodeValue.length;e>i&&(e=i);let r=e,s=e,o=0;0==e&&n<0||e==i&&n>=0?X.chrome||X.gecko||(e?(r--,o=1):s<i&&(s++,o=-1)):n<0?r--:s<i&&s++;let l=O(t,r,s).getClientRects();if(!l.length)return null;let h=l[(o?o<0:n>=0)?0:l.length-1];return X.safari&&!o&&0==h.width&&(h=Array.prototype.find.call(l,(t=>t.width))||h),o?b(h,o<0):h||null}(this.dom,t,e)}}class Q extends N{constructor(t,e=[],n=0){super(),this.mark=t,this.children=e,this.length=n;for(let t of e)t.setParent(this)}setAttrs(t){if(E(t),this.mark.class&&(t.className=this.mark.class),this.mark.attrs)for(let e in this.mark.attrs)t.setAttribute(e,this.mark.attrs[e]);return t}canReuseDOM(t){return super.canReuseDOM(t)&&!(8&(this.flags|t.flags))}reuseDOM(t){t.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(t),this.flags|=6)}sync(t,e){this.dom?4&this.flags&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(t,e)}merge(t,e,n,i,r,s){return!(n&&(!(n instanceof Q&&n.mark.eq(this.mark))||t&&r<=0||e<this.length&&s<=0)||(z(this,t,e,n?n.children.slice():[],r-1,s-1),this.markDirty(),0))}split(t){let e=[],n=0,i=-1,r=0;for(let s of this.children){let o=n+s.length;o>t&&e.push(n<t?s.split(t-n):s),i<0&&n>=t&&(i=r),n=o,r++}let s=this.length-t;return this.length=t,i>-1&&(this.children.length=i,this.markDirty()),new Q(this.mark,e,s)}domAtPos(t){return nt(this,t)}coordsAt(t,e){return rt(this,t,e)}}class tt extends N{static create(t,e,n){return new tt(t,e,n)}constructor(t,e,n){super(),this.widget=t,this.length=e,this.side=n,this.prevWidget=null}split(t){let e=tt.create(this.widget,this.length-t,this.side);return this.length-=t,e}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}getSide(){return this.side}merge(t,e,n,i,r,s){return!(n&&(!(n instanceof tt&&this.widget.compare(n.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(n?n.length:0)+(this.length-e),0))}become(t){return t instanceof tt&&t.side==this.side&&this.widget.constructor==t.widget.constructor&&(this.widget.compare(t.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get overrideDOMText(){if(0==this.length)return i.EY.empty;let t=this;for(;t.parent;)t=t.parent;let{view:e}=t,n=e&&e.state.doc,r=this.posAtStart;return n?n.slice(r,r+this.length):i.EY.empty}domAtPos(t){return(this.length?0==t:this.side>0)?P.before(this.dom):P.after(this.dom,t==this.length)}domBoundsAround(){return null}coordsAt(t,e){let n=this.widget.coordsAt(this.dom,t,e);if(n)return n;let i=this.dom.getClientRects(),r=null;if(!i.length)return null;let s=this.side?this.side<0:t>0;for(let e=s?i.length-1:0;r=i[e],!(t>0?0==e:e==i.length-1||r.top<r.bottom);e+=s?-1:1);return b(r,!s)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class et extends N{constructor(t){super(),this.side=t}get length(){return 0}merge(){return!1}become(t){return t instanceof et&&t.side==this.side}split(){return new et(this.side)}sync(){if(!this.dom){let t=document.createElement("img");t.className="cm-widgetBuffer",t.setAttribute("aria-hidden","true"),this.setDOM(t)}}getSide(){return this.side}domAtPos(t){return this.side>0?P.before(this.dom):P.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(t){return this.dom.getBoundingClientRect()}get overrideDOMText(){return i.EY.empty}get isHidden(){return!0}}function nt(t,e){let n=t.dom,{children:i}=t,r=0;for(let t=0;r<i.length;r++){let s=i[r],o=t+s.length;if(!(o==t&&s.getSide()<=0)){if(e>t&&e<o&&s.dom.parentNode==n)return s.domAtPos(e-t);if(e<=t)break;t=o}}for(let t=r;t>0;t--){let e=i[t-1];if(e.dom.parentNode==n)return e.domAtPos(e.length)}for(let t=r;t<i.length;t++){let e=i[t];if(e.dom.parentNode==n)return e.domAtPos(0)}return new P(n,0)}function it(t,e,n){let i,{children:r}=t;n>0&&e instanceof Q&&r.length&&(i=r[r.length-1])instanceof Q&&i.mark.eq(e.mark)?it(i,e.children[0],n-1):(r.push(e),e.setParent(t)),t.length+=e.length}function rt(t,e,n){let i=null,r=-1,s=null,o=-1;!function t(e,l){for(let h=0,a=0;h<e.children.length&&a<=l;h++){let c=e.children[h],u=a+c.length;u>=l&&(c.children.length?t(c,l-a):(!s||s.isHidden&&(n>0||st(s,c)))&&(u>l||a==u&&c.getSide()>0)?(s=c,o=l-a):(a<l||a==u&&c.getSide()<0&&!c.isHidden)&&(i=c,r=l-a)),a=u}}(t,e);let l=(n<0?i:s)||i||s;return l?l.coordsAt(Math.max(0,l==i?r:o),n):function(t){let e=t.dom.lastChild;if(!e)return t.dom.getBoundingClientRect();let n=p(e);return n[n.length-1]||null}(t)}function st(t,e){let n=t.coordsAt(0,1),i=e.coordsAt(0,1);return n&&i&&i.top<n.bottom}function ot(t,e){for(let n in t)"class"==n&&e.class?e.class+=" "+t.class:"style"==n&&e.style?e.style+=";"+t.style:e[n]=t[n];return e}Z.prototype.children=tt.prototype.children=et.prototype.children=L;const lt=Object.create(null);function ht(t,e,n){if(t==e)return!0;t||(t=lt),e||(e=lt);let i=Object.keys(t),r=Object.keys(e);if(i.length-(n&&i.indexOf(n)>-1?1:0)!=r.length-(n&&r.indexOf(n)>-1?1:0))return!1;for(let s of i)if(s!=n&&(-1==r.indexOf(s)||t[s]!==e[s]))return!1;return!0}function at(t,e,n){let i=!1;if(e)for(let r in e)n&&r in n||(i=!0,"style"==r?t.style.cssText="":t.removeAttribute(r));if(n)for(let r in n)e&&e[r]==n[r]||(i=!0,"style"==r?t.style.cssText=n[r]:t.setAttribute(r,n[r]));return i}function ct(t){let e=Object.create(null);for(let n=0;n<t.attributes.length;n++){let i=t.attributes[n];e[i.name]=i.value}return e}class ut{eq(t){return!1}updateDOM(t,e){return!1}compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(t){return!0}coordsAt(t,e,n){return null}get isHidden(){return!1}get editable(){return!1}destroy(t){}}var ft=function(t){return t[t.Text=0]="Text",t[t.WidgetBefore=1]="WidgetBefore",t[t.WidgetAfter=2]="WidgetAfter",t[t.WidgetRange=3]="WidgetRange",t}(ft||(ft={}));class dt extends i.FB{constructor(t,e,n,i){super(),this.startSide=t,this.endSide=e,this.widget=n,this.spec=i}get heightRelevant(){return!1}static mark(t){return new pt(t)}static widget(t){let e=Math.max(-1e4,Math.min(1e4,t.side||0)),n=!!t.block;return e+=n&&!t.inlineOrder?e>0?3e8:-4e8:e>0?1e8:-1e8,new mt(t,e,e,n,t.widget||null,!1)}static replace(t){let e,n,i=!!t.block;if(t.isBlockGap)e=-5e8,n=4e8;else{let{start:r,end:s}=wt(t,i);e=(r?i?-3e8:-1:5e8)-1,n=1+(s?i?2e8:1:-6e8)}return new mt(t,e,n,i,t.widget||null,!0)}static line(t){return new gt(t)}static set(t,e=!1){return i.om.of(t,e)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}dt.none=i.om.empty;class pt extends dt{constructor(t){let{start:e,end:n}=wt(t);super(e?-1:5e8,n?1:-6e8,null,t),this.tagName=t.tagName||"span",this.class=t.class||"",this.attrs=t.attributes||null}eq(t){var e,n;return this==t||t instanceof pt&&this.tagName==t.tagName&&(this.class||(null===(e=this.attrs)||void 0===e?void 0:e.class))==(t.class||(null===(n=t.attrs)||void 0===n?void 0:n.class))&&ht(this.attrs,t.attrs,"class")}range(t,e=t){if(t>=e)throw new RangeError("Mark decorations may not be empty");return super.range(t,e)}}pt.prototype.point=!1;class gt extends dt{constructor(t){super(-2e8,-2e8,null,t)}eq(t){return t instanceof gt&&this.spec.class==t.spec.class&&ht(this.spec.attributes,t.spec.attributes)}range(t,e=t){if(e!=t)throw new RangeError("Line decoration ranges must be zero-length");return super.range(t,e)}}gt.prototype.mapMode=i.iR.TrackBefore,gt.prototype.point=!0;class mt extends dt{constructor(t,e,n,r,s,o){super(e,n,s,t),this.block=r,this.isReplace=o,this.mapMode=r?e<=0?i.iR.TrackBefore:i.iR.TrackAfter:i.iR.TrackDel}get type(){return this.startSide!=this.endSide?ft.WidgetRange:this.startSide<=0?ft.WidgetBefore:ft.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(t){return t instanceof mt&&((e=this.widget)==(n=t.widget)||!!(e&&n&&e.compare(n)))&&this.block==t.block&&this.startSide==t.startSide&&this.endSide==t.endSide;var e,n}range(t,e=t){if(this.isReplace&&(t>e||t==e&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&e!=t)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(t,e)}}function wt(t,e=!1){let{inclusiveStart:n,inclusiveEnd:i}=t;return null==n&&(n=t.inclusive),null==i&&(i=t.inclusive),{start:null!=n?n:e,end:null!=i?i:e}}function vt(t,e,n,i=0){let r=n.length-1;r>=0&&n[r]+i>=t?n[r]=Math.max(n[r],e):n.push(t,e)}mt.prototype.point=!0;class yt extends N{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(t,e,n,i,r,s){if(n){if(!(n instanceof yt))return!1;this.dom||n.transferDOM(this)}return i&&this.setDeco(n?n.attrs:null),z(this,t,e,n?n.children.slice():[],r,s),!0}split(t){let e=new yt;if(e.breakAfter=this.breakAfter,0==this.length)return e;let{i:n,off:i}=this.childPos(t);i&&(e.append(this.children[n].split(i),0),this.children[n].merge(i,this.children[n].length,null,!1,0,0),n++);for(let t=n;t<this.children.length;t++)e.append(this.children[t],0);for(;n>0&&0==this.children[n-1].length;)this.children[--n].destroy();return this.children.length=n,this.markDirty(),this.length=t,e}transferDOM(t){this.dom&&(this.markDirty(),t.setDOM(this.dom),t.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(t){ht(this.attrs,t)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=t)}append(t,e){it(this,t,e)}addLineDeco(t){let e=t.spec.attributes,n=t.spec.class;e&&(this.attrs=ot(e,this.attrs||{})),n&&(this.attrs=ot({class:n},this.attrs||{}))}domAtPos(t){return nt(this,t)}reuseDOM(t){"DIV"==t.nodeName&&(this.setDOM(t),this.flags|=6)}sync(t,e){var n;this.dom?4&this.flags&&(E(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(at(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(t,e);let i=this.dom.lastChild;for(;i&&N.get(i)instanceof Q;)i=i.lastChild;if(!(i&&this.length&&("BR"==i.nodeName||0!=(null===(n=N.get(i))||void 0===n?void 0:n.isEditable)||X.ios&&this.children.some((t=>t instanceof Z))))){let t=document.createElement("BR");t.cmIgnore=!0,this.dom.appendChild(t)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let t,e=0;for(let n of this.children){if(!(n instanceof Z)||/[^ -~]/.test(n.text))return null;let i=p(n.dom);if(1!=i.length)return null;e+=i[0].width,t=i[0].height}return e?{lineHeight:this.dom.getBoundingClientRect().height,charWidth:e/this.length,textHeight:t}:null}coordsAt(t,e){let n=rt(this,t,e);if(!this.children.length&&n&&this.parent){let{heightOracle:t}=this.parent.view.viewState,e=n.bottom-n.top;if(Math.abs(e-t.lineHeight)<2&&t.textHeight<e){let i=(e-t.textHeight)/2;return{top:n.top+i,bottom:n.bottom-i,left:n.left,right:n.left}}}return n}become(t){return t instanceof yt&&0==this.children.length&&0==t.children.length&&ht(this.attrs,t.attrs)&&this.breakAfter==t.breakAfter}covers(){return!0}static find(t,e){for(let n=0,i=0;n<t.children.length;n++){let r=t.children[n],s=i+r.length;if(s>=e){if(r instanceof yt)return r;if(s>e)break}i=s+r.breakAfter}return null}}class bt extends N{constructor(t,e,n){super(),this.widget=t,this.length=e,this.deco=n,this.breakAfter=0,this.prevWidget=null}merge(t,e,n,i,r,s){return!(n&&(!(n instanceof bt&&this.widget.compare(n.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(n?n.length:0)+(this.length-e),0))}domAtPos(t){return 0==t?P.before(this.dom):P.after(this.dom,t==this.length)}split(t){let e=this.length-t;this.length=t;let n=new bt(this.widget,e,this.deco);return n.breakAfter=this.breakAfter,n}get children(){return L}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):i.EY.empty}domBoundsAround(){return null}become(t){return t instanceof bt&&t.widget.constructor==this.widget.constructor&&(t.widget.compare(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,this.deco=t.deco,this.breakAfter=t.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(t,e){return this.widget.coordsAt(this.dom,t,e)||(this.widget instanceof xt?null:b(this.dom.getBoundingClientRect(),this.length?0==t:e<=0))}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}covers(t){let{startSide:e,endSide:n}=this.deco;return e!=n&&(t<0?e<0:n>0)}}class xt extends ut{constructor(t){super(),this.height=t}toDOM(){let t=document.createElement("div");return t.className="cm-gap",this.updateDOM(t),t}eq(t){return t.height==this.height}updateDOM(t){return t.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}class kt{constructor(t,e,n,i){this.doc=t,this.pos=e,this.end=n,this.disallowBlockEffectsFor=i,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=t.iter(),this.skip=e}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let t=this.content[this.content.length-1];return!(t.breakAfter||t instanceof bt&&t.deco.endSide<0)}getLine(){return this.curLine||(this.content.push(this.curLine=new yt),this.atCursorPos=!0),this.curLine}flushBuffer(t=this.bufferMarks){this.pendingBuffer&&(this.curLine.append(St(new et(-1),t),t.length),this.pendingBuffer=0)}addBlockWidget(t){this.flushBuffer(),this.curLine=null,this.content.push(t)}finish(t){this.pendingBuffer&&t<=this.bufferMarks.length?this.flushBuffer():this.pendingBuffer=0,this.posCovered()||t&&this.content.length&&this.content[this.content.length-1]instanceof bt||this.getLine()}buildText(t,e,n){for(;t>0;){if(this.textOff==this.text.length){let{value:e,lineBreak:n,done:i}=this.cursor.next(this.skip);if(this.skip=0,i)throw new Error("Ran out of text content when drawing inline views");if(n){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,t--;continue}this.text=e,this.textOff=0}let i=Math.min(this.text.length-this.textOff,t,512);this.flushBuffer(e.slice(e.length-n)),this.getLine().append(St(new Z(this.text.slice(this.textOff,this.textOff+i)),e),n),this.atCursorPos=!0,this.textOff+=i,t-=i,n=0}}span(t,e,n,i){this.buildText(e-t,n,i),this.pos=e,this.openStart<0&&(this.openStart=i)}point(t,e,n,i,r,s){if(this.disallowBlockEffectsFor[s]&&n instanceof mt){if(n.block)throw new RangeError("Block decorations may not be specified via plugins");if(e>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let o=e-t;if(n instanceof mt)if(n.block)n.startSide>0&&!this.posCovered()&&this.getLine(),this.addBlockWidget(new bt(n.widget||At.block,o,n));else{let s=tt.create(n.widget||At.inline,o,o?0:n.startSide),l=this.atCursorPos&&!s.isEditable&&r<=i.length&&(t<e||n.startSide>0),h=!s.isEditable&&(t<e||r>i.length||n.startSide<=0),a=this.getLine();2!=this.pendingBuffer||l||s.isEditable||(this.pendingBuffer=0),this.flushBuffer(i),l&&(a.append(St(new et(1),i),r),r=i.length+Math.max(0,r-i.length)),a.append(St(s,i),r),this.atCursorPos=h,this.pendingBuffer=h?t<e||r>i.length?1:2:0,this.pendingBuffer&&(this.bufferMarks=i.slice())}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(n);o&&(this.textOff+o<=this.text.length?this.textOff+=o:(this.skip+=o-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=e),this.openStart<0&&(this.openStart=r)}static build(t,e,n,r,s){let o=new kt(t,e,n,s);return o.openEnd=i.om.spans(r,e,n,o),o.openStart<0&&(o.openStart=o.openEnd),o.finish(o.openEnd),o}}function St(t,e){for(let n of e)t=new Q(n,[t],t.length);return t}class At extends ut{constructor(t){super(),this.tag=t}eq(t){return t.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(t){return t.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}At.inline=new At("span"),At.block=new At("div");var Mt=function(t){return t[t.LTR=0]="LTR",t[t.RTL=1]="RTL",t}(Mt||(Mt={}));const Ct=Mt.LTR,Ot=Mt.RTL;function Tt(t){let e=[];for(let n=0;n<t.length;n++)e.push(1<<+t[n]);return e}const Et=Tt("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),Dt=Tt("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),Rt=Object.create(null),Bt=[];for(let t of["()","[]","{}"]){let e=t.charCodeAt(0),n=t.charCodeAt(1);Rt[e]=n,Rt[n]=-e}function Pt(t){return t<=247?Et[t]:1424<=t&&t<=1524?2:1536<=t&&t<=1785?Dt[t-1536]:1774<=t&&t<=2220?4:8192<=t&&t<=8204?256:64336<=t&&t<=65023?4:1}const Lt=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class Nt{get dir(){return this.level%2?Ot:Ct}constructor(t,e,n){this.from=t,this.to=e,this.level=n}side(t,e){return this.dir==e==t?this.to:this.from}forward(t,e){return t==(this.dir==e)}static find(t,e,n,i){let r=-1;for(let s=0;s<t.length;s++){let o=t[s];if(o.from<=e&&o.to>=e){if(o.level==n)return s;(r<0||(0!=i?i<0?o.from<e:o.to>e:t[r].level>o.level))&&(r=s)}}if(r<0)throw new RangeError("Index out of range");return r}}function It(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++){let i=t[n],r=e[n];if(i.from!=r.from||i.to!=r.to||i.direction!=r.direction||!It(i.inner,r.inner))return!1}return!0}const Ft=[];function $t(t,e,n,i,r,s,o){let l=i%2?2:1;if(i%2==r%2)for(let h=e,a=0;h<n;){let e=!0,c=!1;if(a==s.length||h<s[a].from){let t=Ft[h];t!=l&&(e=!1,c=16==t)}let u=e||1!=l?null:[],f=e?i:i+1,d=h;t:for(;;)if(a<s.length&&d==s[a].from){if(c)break t;let p=s[a];if(!e)for(let t=p.to,e=a+1;;){if(t==n)break t;if(!(e<s.length&&s[e].from==t)){if(Ft[t]==l)break t;break}t=s[e++].to}a++,u?u.push(p):(p.from>h&&o.push(new Nt(h,p.from,f)),zt(t,p.direction==Ct!=!(f%2)?i+1:i,r,p.inner,p.from,p.to,o),h=p.to),d=p.to}else{if(d==n||(e?Ft[d]!=l:Ft[d]==l))break;d++}u?$t(t,h,d,i+1,r,u,o):h<d&&o.push(new Nt(h,d,f)),h=d}else for(let h=n,a=s.length;h>e;){let n=!0,c=!1;if(!a||h>s[a-1].to){let t=Ft[h-1];t!=l&&(n=!1,c=16==t)}let u=n||1!=l?null:[],f=n?i:i+1,d=h;t:for(;;)if(a&&d==s[a-1].to){if(c)break t;let p=s[--a];if(!n)for(let t=p.from,n=a;;){if(t==e)break t;if(!n||s[n-1].to!=t){if(Ft[t-1]==l)break t;break}t=s[--n].from}u?u.push(p):(p.to<h&&o.push(new Nt(p.to,h,f)),zt(t,p.direction==Ct!=!(f%2)?i+1:i,r,p.inner,p.from,p.to,o),h=p.from),d=p.from}else{if(d==e||(n?Ft[d-1]!=l:Ft[d-1]==l))break;d--}u?$t(t,d,h,i+1,r,u,o):d<h&&o.push(new Nt(d,h,f)),h=d}}function zt(t,e,n,i,r,s,o){let l=e%2?2:1;!function(t,e,n,i,r){for(let s=0;s<=i.length;s++){let o=s?i[s-1].to:e,l=s<i.length?i[s].from:n,h=s?256:r;for(let e=o,n=h,i=h;e<l;e++){let r=Pt(t.charCodeAt(e));512==r?r=n:8==r&&4==i&&(r=16),Ft[e]=4==r?2:r,7&r&&(i=r),n=r}for(let t=o,e=h,i=h;t<l;t++){let r=Ft[t];if(128==r)t<l-1&&e==Ft[t+1]&&24&e?r=Ft[t]=e:Ft[t]=256;else if(64==r){let r=t+1;for(;r<l&&64==Ft[r];)r++;let s=t&&8==e||r<n&&8==Ft[r]?1==i?1:8:256;for(let e=t;e<r;e++)Ft[e]=s;t=r-1}else 8==r&&1==i&&(Ft[t]=1);e=r,7&r&&(i=r)}}}(t,r,s,i,l),function(t,e,n,i,r){let s=1==r?2:1;for(let o=0,l=0,h=0;o<=i.length;o++){let a=o?i[o-1].to:e,c=o<i.length?i[o].from:n;for(let e,n,i,o=a;o<c;o++)if(n=Rt[e=t.charCodeAt(o)])if(n<0){for(let t=l-3;t>=0;t-=3)if(Bt[t+1]==-n){let e=Bt[t+2],n=2&e?r:4&e?1&e?s:r:0;n&&(Ft[o]=Ft[Bt[t]]=n),l=t;break}}else{if(189==Bt.length)break;Bt[l++]=o,Bt[l++]=e,Bt[l++]=h}else if(2==(i=Ft[o])||1==i){let t=i==r;h=t?0:1;for(let e=l-3;e>=0;e-=3){let n=Bt[e+2];if(2&n)break;if(t)Bt[e+2]|=2;else{if(4&n)break;Bt[e+2]|=4}}}}}(t,r,s,i,l),function(t,e,n,i){for(let r=0,s=i;r<=n.length;r++){let o=r?n[r-1].to:t,l=r<n.length?n[r].from:e;for(let h=o;h<l;){let o=Ft[h];if(256==o){let o=h+1;for(;;)if(o==l){if(r==n.length)break;o=n[r++].to,l=r<n.length?n[r].from:e}else{if(256!=Ft[o])break;o++}let a=1==s,c=a==(1==(o<e?Ft[o]:i))?a?1:2:i;for(let e=o,i=r,s=i?n[i-1].to:t;e>h;)e==s&&(e=n[--i].from,s=i?n[i-1].to:t),Ft[--e]=c;h=o}else s=o,h++}}}(r,s,i,l),$t(t,r,s,e,n,i,o)}function Ht(t){return[new Nt(0,t,0)]}let Vt="";function _t(t,e,n,r,s){var o;let l=r.head-t.from,h=Nt.find(e,l,null!==(o=r.bidiLevel)&&void 0!==o?o:-1,r.assoc),a=e[h],c=a.side(s,n);if(l==c){let t=h+=s?1:-1;if(t<0||t>=e.length)return null;a=e[h=t],l=a.side(!s,n),c=a.side(s,n)}let u=(0,i.zK)(t.text,l,a.forward(s,n));(u<a.from||u>a.to)&&(u=c),Vt=t.text.slice(Math.min(l,u),Math.max(l,u));let f=h==(s?e.length-1:0)?null:e[h+(s?1:-1)];return f&&u==c&&f.level+(s?0:1)<a.level?i.OF.cursor(f.side(!s,n)+t.from,f.forward(s,n)?1:-1,f.level):i.OF.cursor(u+t.from,a.forward(s,n)?-1:1,a.level)}function Wt(t,e,n){for(let i=e;i<n;i++){let e=Pt(t.charCodeAt(i));if(1==e)return Ct;if(2==e||4==e)return Ot}return Ct}const jt=i.sj.define(),qt=i.sj.define(),Kt=i.sj.define(),Gt=i.sj.define(),Ut=i.sj.define(),Yt=i.sj.define(),Jt=i.sj.define(),Xt=i.sj.define(),Zt=i.sj.define(),Qt=i.sj.define({combine:t=>t.some((t=>t))}),te=i.sj.define({combine:t=>t.some((t=>t))}),ee=i.sj.define();class ne{constructor(t,e="nearest",n="nearest",i=5,r=5,s=!1){this.range=t,this.y=e,this.x=n,this.yMargin=i,this.xMargin=r,this.isSnapshot=s}map(t){return t.empty?this:new ne(this.range.map(t),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(t){return this.range.to<=t.doc.length?this:new ne(i.OF.cursor(t.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}const ie=i.Pe.define({map:(t,e)=>t.map(e)}),re=i.Pe.define();function se(t,e,n){let i=t.facet(Gt);i.length?i[0](e):window.onerror?window.onerror(String(e),n,void 0,void 0,e):n?console.error(n+":",e):console.error(e)}const oe=i.sj.define({combine:t=>!t.length||t[0]});let le=0;const he=i.sj.define();class ae{constructor(t,e,n,i,r){this.id=t,this.create=e,this.domEventHandlers=n,this.domEventObservers=i,this.extension=r(this)}static define(t,e){const{eventHandlers:n,eventObservers:i,provide:r,decorations:s}=e||{};return new ae(le++,t,n,i,(t=>{let e=[he.of(t)];return s&&e.push(de.of((e=>{let n=e.plugin(t);return n?s(n):dt.none}))),r&&e.push(r(t)),e}))}static fromClass(t,e){return ae.define((e=>new t(e)),e)}}class ce{constructor(t){this.spec=t,this.mustUpdate=null,this.value=null}update(t){if(this.value){if(this.mustUpdate){let t=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(t)}catch(e){if(se(t.state,e,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(t){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(t)}catch(e){se(t.state,e,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(t){var e;if(null===(e=this.value)||void 0===e?void 0:e.destroy)try{this.value.destroy()}catch(e){se(t.state,e,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const ue=i.sj.define(),fe=i.sj.define(),de=i.sj.define(),pe=i.sj.define(),ge=i.sj.define(),me=i.sj.define();function we(t,e){let n=t.state.facet(me);if(!n.length)return n;let r=n.map((e=>e instanceof Function?e(t):e)),s=[];return i.om.spans(r,e.from,e.to,{point(){},span(t,n,i,r){let o=t-e.from,l=n-e.from,h=s;for(let t=i.length-1;t>=0;t--,r--){let n,s=i[t].spec.bidiIsolate;if(null==s&&(s=Wt(e.text,o,l)),r>0&&h.length&&(n=h[h.length-1]).to==o&&n.direction==s)n.to=l,h=n.inner;else{let t={from:o,to:l,direction:s,inner:[]};h.push(t),h=t.inner}}}}),s}const ve=i.sj.define();function ye(t){let e=0,n=0,i=0,r=0;for(let s of t.state.facet(ve)){let o=s(t);o&&(null!=o.left&&(e=Math.max(e,o.left)),null!=o.right&&(n=Math.max(n,o.right)),null!=o.top&&(i=Math.max(i,o.top)),null!=o.bottom&&(r=Math.max(r,o.bottom)))}return{left:e,right:n,top:i,bottom:r}}const be=i.sj.define();class xe{constructor(t,e,n,i){this.fromA=t,this.toA=e,this.fromB=n,this.toB=i}join(t){return new xe(Math.min(this.fromA,t.fromA),Math.max(this.toA,t.toA),Math.min(this.fromB,t.fromB),Math.max(this.toB,t.toB))}addToSet(t){let e=t.length,n=this;for(;e>0;e--){let i=t[e-1];if(!(i.fromA>n.toA)){if(i.toA<n.fromA)break;n=n.join(i),t.splice(e-1,1)}}return t.splice(e,0,n),t}static extendWithRanges(t,e){if(0==e.length)return t;let n=[];for(let i=0,r=0,s=0,o=0;;i++){let l=i==t.length?null:t[i],h=s-o,a=l?l.fromB:1e9;for(;r<e.length&&e[r]<a;){let t=e[r],i=e[r+1],s=Math.max(o,t),l=Math.min(a,i);if(s<=l&&new xe(s+h,l+h,s,l).addToSet(n),i>a)break;r+=2}if(!l)return n;new xe(l.fromA,l.toA,l.fromB,l.toB).addToSet(n),s=l.toA,o=l.toB}}}class ke{constructor(t,e,n){this.view=t,this.state=e,this.transactions=n,this.flags=0,this.startState=t.state,this.changes=i.VR.empty(this.startState.doc.length);for(let t of n)this.changes=this.changes.compose(t.changes);let r=[];this.changes.iterChangedRanges(((t,e,n,i)=>r.push(new xe(t,e,n,i)))),this.changedRanges=r}static create(t,e,n){return new ke(t,e,n)}get viewportChanged(){return(4&this.flags)>0}get viewportMoved(){return(8&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(18&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((t=>t.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}class Se extends N{get length(){return this.view.state.doc.length}constructor(t){super(),this.view=t,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=dt.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(t.contentDOM),this.children=[new yt],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new xe(0,0,0,t.state.doc.length)],0,null)}update(t){var e;let n=t.changedRanges;this.minWidth>0&&n.length&&(n.every((({fromA:t,toA:e})=>e<this.minWidthFrom||t>this.minWidthTo))?(this.minWidthFrom=t.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=t.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0),this.updateEditContextFormatting(t);let r=-1;this.view.inputState.composing>=0&&!this.view.observer.editContext&&((null===(e=this.domChanged)||void 0===e?void 0:e.newSel)?r=this.domChanged.newSel.head:function(t,e){let n=!1;return e&&t.iterChangedRanges(((t,i)=>{t<e.to&&i>e.from&&(n=!0)})),n}(t.changes,this.hasComposition)||t.selectionSet||(r=t.state.selection.main.head));let s=r>-1?function(t,e,n){let i=Ae(t,n);if(!i)return null;let{node:r,from:s,to:o}=i,l=r.nodeValue;if(/[\n\r]/.test(l))return null;if(t.state.doc.sliceString(i.from,i.to)!=l)return null;let h=e.invertedDesc,a=new xe(h.mapPos(s),h.mapPos(o),s,o),c=[];for(let e=r.parentNode;;e=e.parentNode){let n=N.get(e);if(n instanceof Q)c.push({node:e,deco:n.mark});else{if(n instanceof yt||"DIV"==e.nodeName&&e.parentNode==t.contentDOM)return{range:a,text:r,marks:c,line:e};if(e==t.contentDOM)return null;c.push({node:e,deco:new pt({inclusive:!0,attributes:ct(e),tagName:e.tagName.toLowerCase()})})}}}(this.view,t.changes,r):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:e,to:i}=this.hasComposition;n=new xe(e,i,t.changes.mapPos(e,-1),t.changes.mapPos(i,1)).addToSet(n.slice())}this.hasComposition=s?{from:s.range.fromB,to:s.range.toB}:null,(X.ie||X.chrome)&&!s&&t&&t.state.doc.lines!=t.startState.doc.lines&&(this.forceSelection=!0);let o=function(t,e,n){let r=new Me;return i.om.compare(t,e,n,r),r.changes}(this.decorations,this.updateDeco(),t.changes);return n=xe.extendWithRanges(n,o),!!(7&this.flags||0!=n.length)&&(this.updateInner(n,t.startState.doc.length,s),t.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(t,e,n){this.view.viewState.mustMeasureContent=!0,this.updateChildren(t,e,n);let{observer:i}=this.view;i.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let t=X.chrome||X.ios?{node:i.selectionRange.focusNode,written:!1}:void 0;this.sync(this.view,t),this.flags&=-8,t&&(t.written||i.selectionRange.focusNode!=t.node)&&(this.forceSelection=!0),this.dom.style.height=""})),this.markedForComposition.forEach((t=>t.flags&=-9));let r=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let t of this.children)t instanceof bt&&t.widget instanceof xt&&r.push(t.dom);i.updateGaps(r)}updateChildren(t,e,n){let i=n?n.range.addToSet(t.slice()):t,r=this.childCursor(e);for(let t=i.length-1;;t--){let e=t>=0?i[t]:null;if(!e)break;let s,o,l,h,{fromA:a,toA:c,fromB:u,toB:f}=e;if(n&&n.range.fromB<f&&n.range.toB>u){let t=kt.build(this.view.state.doc,u,n.range.fromB,this.decorations,this.dynamicDecorationMap),e=kt.build(this.view.state.doc,n.range.toB,f,this.decorations,this.dynamicDecorationMap);o=t.breakAtStart,l=t.openStart,h=e.openEnd;let i=this.compositionView(n);e.breakAtStart?i.breakAfter=1:e.content.length&&i.merge(i.length,i.length,e.content[0],!1,e.openStart,0)&&(i.breakAfter=e.content[0].breakAfter,e.content.shift()),t.content.length&&i.merge(0,0,t.content[t.content.length-1],!0,0,t.openEnd)&&t.content.pop(),s=t.content.concat(i).concat(e.content)}else({content:s,breakAtStart:o,openStart:l,openEnd:h}=kt.build(this.view.state.doc,u,f,this.decorations,this.dynamicDecorationMap));let{i:d,off:p}=r.findPos(c,1),{i:g,off:m}=r.findPos(a,-1);$(this,g,m,d,p,s,o,l,h)}n&&this.fixCompositionDOM(n)}updateEditContextFormatting(t){this.editContextFormatting=this.editContextFormatting.map(t.changes);for(let e of t.transactions)for(let t of e.effects)t.is(re)&&(this.editContextFormatting=t.value)}compositionView(t){let e=new Z(t.text.nodeValue);e.flags|=8;for(let{deco:n}of t.marks)e=new Q(n,[e],e.length);let n=new yt;return n.append(e,0),n}fixCompositionDOM(t){let e=(t,e)=>{e.flags|=8|(e.children.some((t=>7&t.flags))?1:0),this.markedForComposition.add(e);let n=N.get(t);n&&n!=e&&(n.dom=null),e.setDOM(t)},n=this.childPos(t.range.fromB,1),i=this.children[n.i];e(t.line,i);for(let r=t.marks.length-1;r>=-1;r--)n=i.childPos(n.off,1),i=i.children[n.i],e(r>=0?t.marks[r].node:t.text,i)}updateSelection(t=!1,e=!1){!t&&this.view.observer.selectionRange.focusNode||this.view.observer.readSelectionRange();let n=this.view.root.activeElement,i=n==this.dom,r=!i&&!(this.view.state.facet(oe)||this.dom.tabIndex>-1)&&d(this.dom,this.view.observer.selectionRange)&&!(n&&this.dom.contains(n));if(!(i||e||r))return;let s=this.forceSelection;this.forceSelection=!1;let o=this.view.state.selection.main,l=this.moveToLine(this.domAtPos(o.anchor)),h=o.empty?l:this.moveToLine(this.domAtPos(o.head));if(X.gecko&&o.empty&&!this.hasComposition&&1==(a=l).node.nodeType&&a.node.firstChild&&(0==a.offset||"false"==a.node.childNodes[a.offset-1].contentEditable)&&(a.offset==a.node.childNodes.length||"false"==a.node.childNodes[a.offset].contentEditable)){let t=document.createTextNode("");this.view.observer.ignore((()=>l.node.insertBefore(t,l.node.childNodes[l.offset]||null))),l=h=new P(t,0),s=!0}var a;let c=this.view.observer.selectionRange;!s&&c.focusNode&&(g(l.node,l.offset,c.anchorNode,c.anchorOffset)&&g(h.node,h.offset,c.focusNode,c.focusOffset)||this.suppressWidgetCursorChange(c,o))||(this.view.observer.ignore((()=>{X.android&&X.chrome&&this.dom.contains(c.focusNode)&&function(t,e){for(let n=t;n&&n!=e;n=n.assignedSlot||n.parentNode)if(1==n.nodeType&&"false"==n.contentEditable)return!0;return!1}(c.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let t=u(this.view.root);if(t)if(o.empty){if(X.gecko){let t=(e=l.node,i=l.offset,1!=e.nodeType?0:(i&&"false"==e.childNodes[i-1].contentEditable?1:0)|(i<e.childNodes.length&&"false"==e.childNodes[i].contentEditable?2:0));if(t&&3!=t){let e=(1==t?R:B)(l.node,l.offset);e&&(l=new P(e.node,e.offset))}}t.collapse(l.node,l.offset),null!=o.bidiLevel&&void 0!==t.caretBidiLevel&&(t.caretBidiLevel=o.bidiLevel)}else if(t.extend){t.collapse(l.node,l.offset);try{t.extend(h.node,h.offset)}catch(t){}}else{let e=document.createRange();o.anchor>o.head&&([l,h]=[h,l]),e.setEnd(h.node,h.offset),e.setStart(l.node,l.offset),t.removeAllRanges(),t.addRange(e)}var e,i;r&&this.view.root.activeElement==this.dom&&(this.dom.blur(),n&&n.focus())})),this.view.observer.setSelectionRange(l,h)),this.impreciseAnchor=l.precise?null:new P(c.anchorNode,c.anchorOffset),this.impreciseHead=h.precise?null:new P(c.focusNode,c.focusOffset)}suppressWidgetCursorChange(t,e){return this.hasComposition&&e.empty&&g(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset)&&this.posFromDOM(t.focusNode,t.focusOffset)==e.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:t}=this,e=t.state.selection.main,n=u(t.root),{anchorNode:i,anchorOffset:r}=t.observer.selectionRange;if(!(n&&e.empty&&e.assoc&&n.modify))return;let s=yt.find(this,e.head);if(!s)return;let o=s.posAtStart;if(e.head==o||e.head==o+s.length)return;let l=this.coordsAt(e.head,-1),h=this.coordsAt(e.head,1);if(!l||!h||l.bottom>h.top)return;let a=this.domAtPos(e.head+e.assoc);n.collapse(a.node,a.offset),n.modify("move",e.assoc<0?"forward":"backward","lineboundary"),t.observer.readSelectionRange();let c=t.observer.selectionRange;t.docView.posFromDOM(c.anchorNode,c.anchorOffset)!=e.from&&n.collapse(i,r)}moveToLine(t){let e,n=this.dom;if(t.node!=n)return t;for(let i=t.offset;!e&&i<n.childNodes.length;i++){let t=N.get(n.childNodes[i]);t instanceof yt&&(e=t.domAtPos(0))}for(let i=t.offset-1;!e&&i>=0;i--){let t=N.get(n.childNodes[i]);t instanceof yt&&(e=t.domAtPos(t.length))}return e?new P(e.node,e.offset,!0):t}nearest(t){for(let e=t;e;){let t=N.get(e);if(t&&t.rootView==this)return t;e=e.parentNode}return null}posFromDOM(t,e){let n=this.nearest(t);if(!n)throw new RangeError("Trying to find position for a DOM position outside of the document");return n.localPosFromDOM(t,e)+n.posAtStart}domAtPos(t){let{i:e,off:n}=this.childCursor().findPos(t,-1);for(;e<this.children.length-1;){let t=this.children[e];if(n<t.length||t instanceof yt)break;e++,n=0}return this.children[e].domAtPos(n)}coordsAt(t,e){let n=null,i=0;for(let r=this.length,s=this.children.length-1;s>=0;s--){let o=this.children[s],l=r-o.breakAfter,h=l-o.length;if(l<t)break;if(h<=t&&(h<t||o.covers(-1))&&(l>t||o.covers(1))&&(!n||o instanceof yt&&!(n instanceof yt&&e>=0)))n=o,i=h;else if(n&&h==t&&l==t&&o instanceof bt&&Math.abs(e)<2){if(o.deco.startSide<0)break;s&&(n=null)}r=h}return n?n.coordsAt(t-i,e):null}coordsForChar(t){let{i:e,off:n}=this.childPos(t,1),r=this.children[e];if(!(r instanceof yt))return null;for(;r.children.length;){let{i:t,off:e}=r.childPos(n,1);for(;;t++){if(t==r.children.length)return null;if((r=r.children[t]).length)break}n=e}if(!(r instanceof Z))return null;let s=(0,i.zK)(r.text,n);if(s==n)return null;let o=O(r.dom,n,s).getClientRects();for(let t=0;t<o.length;t++){let e=o[t];if(t==o.length-1||e.top<e.bottom&&e.left<e.right)return e}return null}measureVisibleLineHeights(t){let e=[],{from:n,to:i}=t,r=this.view.contentDOM.clientWidth,s=r>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,o=-1,l=this.view.textDirection==Mt.LTR;for(let t=0,h=0;h<this.children.length;h++){let a=this.children[h],c=t+a.length;if(c>i)break;if(t>=n){let n=a.dom.getBoundingClientRect();if(e.push(n.height),s){let e=a.dom.lastChild,i=e?p(e):[];if(i.length){let e=i[i.length-1],s=l?e.right-n.left:n.right-e.left;s>o&&(o=s,this.minWidth=r,this.minWidthFrom=t,this.minWidthTo=c)}}}t=c+a.breakAfter}return e}textDirectionAt(t){let{i:e}=this.childPos(t,1);return"rtl"==getComputedStyle(this.children[e].dom).direction?Mt.RTL:Mt.LTR}measureTextSize(){for(let t of this.children)if(t instanceof yt){let e=t.measureTextSize();if(e)return e}let t,e,n,i=document.createElement("div");return i.className="cm-line",i.style.width="99999px",i.style.position="absolute",i.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(i);let r=p(i.firstChild)[0];t=i.getBoundingClientRect().height,e=r?r.width/27:7,n=r?r.height:t,i.remove()})),{lineHeight:t,charWidth:e,textHeight:n}}childCursor(t=this.length){let e=this.children.length;return e&&(t-=this.children[--e].length),new F(this.children,t,e)}computeBlockGapDeco(){let t=[],e=this.view.viewState;for(let n=0,i=0;;i++){let r=i==e.viewports.length?null:e.viewports[i],s=r?r.from-1:this.length;if(s>n){let i=(e.lineBlockAt(s).bottom-e.lineBlockAt(n).top)/this.view.scaleY;t.push(dt.replace({widget:new xt(i),block:!0,inclusive:!0,isBlockGap:!0}).range(n,s))}if(!r)break;n=r.to+1}return dt.set(t)}updateDeco(){let t=1,e=this.view.state.facet(de).map((e=>(this.dynamicDecorationMap[t++]="function"==typeof e)?e(this.view):e)),n=!1,r=this.view.state.facet(pe).map(((t,e)=>{let i="function"==typeof t;return i&&(n=!0),i?t(this.view):t}));for(r.length&&(this.dynamicDecorationMap[t++]=n,e.push(i.om.join(r))),this.decorations=[this.editContextFormatting,...e,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];t<this.decorations.length;)this.dynamicDecorationMap[t++]=!1;return this.decorations}scrollIntoView(t){if(t.isSnapshot){let e=this.view.viewState.lineBlockAt(t.range.head);return this.view.scrollDOM.scrollTop=e.top-t.yMargin,void(this.view.scrollDOM.scrollLeft=t.xMargin)}for(let e of this.view.state.facet(ee))try{if(e(this.view,t.range,t))return!0}catch(t){se(this.view.state,t,"scroll handler")}let e,{range:n}=t,i=this.coordsAt(n.head,n.empty?n.assoc:n.head>n.anchor?-1:1);if(!i)return;!n.empty&&(e=this.coordsAt(n.anchor,n.anchor>n.head?-1:1))&&(i={left:Math.min(i.left,e.left),top:Math.min(i.top,e.top),right:Math.max(i.right,e.right),bottom:Math.max(i.bottom,e.bottom)});let r=ye(this.view),s={left:i.left-r.left,top:i.top-r.top,right:i.right+r.right,bottom:i.bottom+r.bottom},{offsetWidth:o,offsetHeight:l}=this.view.scrollDOM;!function(t,e,n,i,r,s,o,l){let h=t.ownerDocument,a=h.defaultView||window;for(let c=t,u=!1;c&&!u;)if(1==c.nodeType){let t,f=c==h.body,d=1,p=1;if(f)t=x(a);else{if(/^(fixed|sticky)$/.test(getComputedStyle(c).position)&&(u=!0),c.scrollHeight<=c.clientHeight&&c.scrollWidth<=c.clientWidth){c=c.assignedSlot||c.parentNode;continue}let e=c.getBoundingClientRect();({scaleX:d,scaleY:p}=k(c,e)),t={left:e.left,right:e.left+c.clientWidth*d,top:e.top,bottom:e.top+c.clientHeight*p}}let g=0,m=0;if("nearest"==r)e.top<t.top?(m=e.top-(t.top+o),n>0&&e.bottom>t.bottom+m&&(m=e.bottom-t.bottom+o)):e.bottom>t.bottom&&(m=e.bottom-t.bottom+o,n<0&&e.top-m<t.top&&(m=e.top-(t.top+o)));else{let i=e.bottom-e.top,s=t.bottom-t.top;m=("center"==r&&i<=s?e.top+i/2-s/2:"start"==r||"center"==r&&n<0?e.top-o:e.bottom-s+o)-t.top}if("nearest"==i?e.left<t.left?(g=e.left-(t.left+s),n>0&&e.right>t.right+g&&(g=e.right-t.right+s)):e.right>t.right&&(g=e.right-t.right+s,n<0&&e.left<t.left+g&&(g=e.left-(t.left+s))):g=("center"==i?e.left+(e.right-e.left)/2-(t.right-t.left)/2:"start"==i==l?e.left-s:e.right-(t.right-t.left)+s)-t.left,g||m)if(f)a.scrollBy(g,m);else{let t=0,n=0;if(m){let t=c.scrollTop;c.scrollTop+=m/p,n=(c.scrollTop-t)*p}if(g){let e=c.scrollLeft;c.scrollLeft+=g/d,t=(c.scrollLeft-e)*d}e={left:e.left-t,top:e.top-n,right:e.right-t,bottom:e.bottom-n},t&&Math.abs(t-g)<1&&(i="nearest"),n&&Math.abs(n-m)<1&&(r="nearest")}if(f)break;(e.top<t.top||e.bottom>t.bottom||e.left<t.left||e.right>t.right)&&(e={left:Math.max(e.left,t.left),right:Math.min(e.right,t.right),top:Math.max(e.top,t.top),bottom:Math.min(e.bottom,t.bottom)}),c=c.assignedSlot||c.parentNode}else{if(11!=c.nodeType)break;c=c.host}}(this.view.scrollDOM,s,n.head<n.anchor?-1:1,t.x,t.y,Math.max(Math.min(t.xMargin,o),-o),Math.max(Math.min(t.yMargin,l),-l),this.view.textDirection==Mt.LTR)}}function Ae(t,e){let n=t.observer.selectionRange;if(!n.focusNode)return null;let i=R(n.focusNode,n.focusOffset),r=B(n.focusNode,n.focusOffset),s=i||r;if(r&&i&&r.node!=i.node){let e=N.get(r.node);if(!e||e instanceof Z&&e.text!=r.node.nodeValue)s=r;else if(t.docView.lastCompositionAfterCursor){let t=N.get(i.node);!t||t instanceof Z&&t.text!=i.node.nodeValue||(s=r)}}if(t.docView.lastCompositionAfterCursor=s!=i,!s)return null;let o=e-s.offset;return{from:o,to:o+s.node.nodeValue.length,node:s.node}}let Me=class{constructor(){this.changes=[]}compareRange(t,e){vt(t,e,this.changes)}comparePoint(t,e){vt(t,e,this.changes)}boundChange(t){vt(t,t,this.changes)}};function Ce(t,e){return e.left>t?e.left-t:Math.max(0,t-e.right)}function Oe(t,e){return e.top>t?e.top-t:Math.max(0,t-e.bottom)}function Te(t,e){return t.top<e.bottom-1&&t.bottom>e.top+1}function Ee(t,e){return e<t.top?{top:e,left:t.left,right:t.right,bottom:t.bottom}:t}function De(t,e){return e>t.bottom?{top:t.top,left:t.left,right:t.right,bottom:e}:t}function Re(t,e,n){let i,r,s,o,l,h,a,c,u=!1;for(let f=t.firstChild;f;f=f.nextSibling){let t=p(f);for(let d=0;d<t.length;d++){let p=t[d];r&&Te(r,p)&&(p=Ee(De(p,r.bottom),r.top));let g=Ce(e,p),m=Oe(n,p);if(0==g&&0==m)return 3==f.nodeType?Be(f,e,n):Re(f,e,n);if(!i||o>m||o==m&&s>g){i=f,r=p,s=g,o=m;let l=m?n<p.top?-1:1:g?e<p.left?-1:1:0;u=!l||(l>0?d<t.length-1:d>0)}0==g?n>p.bottom&&(!a||a.bottom<p.bottom)?(l=f,a=p):n<p.top&&(!c||c.top>p.top)&&(h=f,c=p):a&&Te(a,p)?a=De(a,p.bottom):c&&Te(c,p)&&(c=Ee(c,p.top))}}if(a&&a.bottom>=n?(i=l,r=a):c&&c.top<=n&&(i=h,r=c),!i)return{node:t,offset:0};let f=Math.max(r.left,Math.min(r.right,e));return 3==i.nodeType?Be(i,f,n):u&&"false"!=i.contentEditable?Re(i,f,n):{node:t,offset:Array.prototype.indexOf.call(t.childNodes,i)+(e>=(r.left+r.right)/2?1:0)}}function Be(t,e,n){let i=t.nodeValue.length,r=-1,s=1e9,o=0;for(let l=0;l<i;l++){let i=O(t,l,l+1).getClientRects();for(let h=0;h<i.length;h++){let a=i[h];if(a.top==a.bottom)continue;o||(o=e-a.left);let c=(a.top>n?a.top-n:n-a.bottom)-1;if(a.left-1<=e&&a.right+1>=e&&c<s){let n=e>=(a.left+a.right)/2,i=n;if((X.chrome||X.gecko)&&O(t,l).getBoundingClientRect().left==a.right&&(i=!n),c<=0)return{node:t,offset:l+(i?1:0)};r=l+(i?1:0),s=c}}}return{node:t,offset:r>-1?r:o>0?t.nodeValue.length:0}}function Pe(t,e,n,i=-1){var r,s;let o,l=t.contentDOM.getBoundingClientRect(),h=l.top+t.viewState.paddingTop,{docHeight:a}=t.viewState,{x:c,y:u}=e,f=u-h;if(f<0)return 0;if(f>a)return t.state.doc.length;for(let e=t.viewState.heightOracle.textHeight/2,r=!1;o=t.elementAtHeight(f),o.type!=ft.Text;)for(;f=i>0?o.bottom+e:o.top-e,!(f>=0&&f<=a);){if(r)return n?null:0;r=!0,i=-i}u=h+f;let d=o.from;if(d<t.viewport.from)return 0==t.viewport.from?0:n?null:Le(t,l,o,c,u);if(d>t.viewport.to)return t.viewport.to==t.state.doc.length?t.state.doc.length:n?null:Le(t,l,o,c,u);let p=t.dom.ownerDocument,g=t.root.elementFromPoint?t.root:p,m=g.elementFromPoint(c,u);m&&!t.contentDOM.contains(m)&&(m=null),m||(c=Math.max(l.left+1,Math.min(l.right-1,c)),m=g.elementFromPoint(c,u),m&&!t.contentDOM.contains(m)&&(m=null));let w,v=-1;if(m&&0!=(null===(r=t.docView.nearest(m))||void 0===r?void 0:r.isEditable)){if(p.caretPositionFromPoint){let t=p.caretPositionFromPoint(c,u);t&&({offsetNode:w,offset:v}=t)}else if(p.caretRangeFromPoint){let e=p.caretRangeFromPoint(c,u);e&&(({startContainer:w,startOffset:v}=e),(!t.contentDOM.contains(w)||X.safari&&function(t,e,n){let i;if(3!=t.nodeType||e!=(i=t.nodeValue.length))return!1;for(let e=t.nextSibling;e;e=e.nextSibling)if(1!=e.nodeType||"BR"!=e.nodeName)return!1;return O(t,i-1,i).getBoundingClientRect().left>n}(w,v,c)||X.chrome&&function(t,e,n){if(0!=e)return!1;for(let e=t;;){let t=e.parentNode;if(!t||1!=t.nodeType||t.firstChild!=e)return!1;if(t.classList.contains("cm-line"))break;e=t}return n-(1==t.nodeType?t.getBoundingClientRect():O(t,0,Math.max(t.nodeValue.length,1)).getBoundingClientRect()).left>5}(w,v,c))&&(w=void 0))}w&&(v=Math.min(y(w),v))}if(!w||!t.docView.dom.contains(w)){let e=yt.find(t.docView,d);if(!e)return f>o.top+o.height/2?o.to:o.from;({node:w,offset:v}=Re(e.dom,c,u))}let b=t.docView.nearest(w);if(!b)return null;if(b.isWidget&&1==(null===(s=b.dom)||void 0===s?void 0:s.nodeType)){let t=b.dom.getBoundingClientRect();return e.y<t.top||e.y<=t.bottom&&e.x<=(t.left+t.right)/2?b.posAtStart:b.posAtEnd}return b.localPosFromDOM(w,v)+b.posAtStart}function Le(t,e,n,r,s){let o=Math.round((r-e.left)*t.defaultCharacterWidth);if(t.lineWrapping&&n.height>1.5*t.defaultLineHeight){let e=t.viewState.heightOracle.textHeight;o+=Math.floor((s-n.top-.5*(t.defaultLineHeight-e))/e)*t.viewState.heightOracle.lineLength}let l=t.state.sliceDoc(n.from,n.to);return n.from+(0,i.kn)(l,o,t.state.tabSize)}function Ne(t,e,n,i){let r=t.state.doc.lineAt(e.head),s=t.bidiSpans(r),o=t.textDirectionAt(r.from);for(let l=e,h=null;;){let e=_t(r,s,o,l,n),a=Vt;if(!e){if(r.number==(n?t.state.doc.lines:1))return l;a="\n",r=t.state.doc.line(r.number+(n?1:-1)),s=t.bidiSpans(r),e=t.visualLineSide(r,!n)}if(h){if(!h(a))return l}else{if(!i)return e;h=i(a)}l=e}}function Ie(t,e,n){for(;;){let i=0;for(let r of t)r.between(e-1,e+1,((t,r,s)=>{if(e>t&&e<r){let s=i||n||(e-t<r-e?-1:1);e=s<0?t:r,i=s}}));if(!i)return e}}function Fe(t,e,n){let r=Ie(t.state.facet(ge).map((e=>e(t))),n.from,e.head>n.from?-1:1);return r==n.from?n:i.OF.cursor(r,r<n.from?1:-1)}const $e="￿";class ze{constructor(t,e){this.points=t,this.text="",this.lineSeparator=e.facet(i.$t.lineSeparator)}append(t){this.text+=t}lineBreak(){this.text+=$e}readRange(t,e){if(!t)return this;let n=t.parentNode;for(let i=t;;){this.findPointBefore(n,i);let t=this.text.length;this.readNode(i);let r=i.nextSibling;if(r==e)break;let s=N.get(i),o=N.get(r);(s&&o?s.breakAfter:(s?s.breakAfter:w(i))||w(r)&&("BR"!=i.nodeName||i.cmIgnore)&&this.text.length>t)&&this.lineBreak(),i=r}return this.findPointBefore(n,e),this}readTextNode(t){let e=t.nodeValue;for(let n of this.points)n.node==t&&(n.pos=this.text.length+Math.min(n.offset,e.length));for(let n=0,i=this.lineSeparator?null:/\r\n?|\n/g;;){let r,s=-1,o=1;if(this.lineSeparator?(s=e.indexOf(this.lineSeparator,n),o=this.lineSeparator.length):(r=i.exec(e))&&(s=r.index,o=r[0].length),this.append(e.slice(n,s<0?e.length:s)),s<0)break;if(this.lineBreak(),o>1)for(let e of this.points)e.node==t&&e.pos>this.text.length&&(e.pos-=o-1);n=s+o}}readNode(t){if(t.cmIgnore)return;let e=N.get(t),n=e&&e.overrideDOMText;if(null!=n){this.findPointInside(t,n.length);for(let t=n.iter();!t.next().done;)t.lineBreak?this.lineBreak():this.append(t.value)}else 3==t.nodeType?this.readTextNode(t):"BR"==t.nodeName?t.nextSibling&&this.lineBreak():1==t.nodeType&&this.readRange(t.firstChild,null)}findPointBefore(t,e){for(let n of this.points)n.node==t&&t.childNodes[n.offset]==e&&(n.pos=this.text.length)}findPointInside(t,e){for(let n of this.points)(3==t.nodeType?n.node==t:t.contains(n.node))&&(n.pos=this.text.length+(He(t,n.node,n.offset)?e:0))}}function He(t,e,n){for(;;){if(!e||n<y(e))return!1;if(e==t)return!0;n=m(e)+1,e=e.parentNode}}class Ve{constructor(t,e){this.node=t,this.offset=e,this.pos=-1}}class _e{constructor(t,e,n,r){this.typeOver=r,this.bounds=null,this.text="",this.domChanged=e>-1;let{impreciseHead:s,impreciseAnchor:o}=t.docView;if(t.state.readOnly&&e>-1)this.newSel=null;else if(e>-1&&(this.bounds=t.docView.domBoundsAround(e,n,0))){let e=s||o?[]:function(t){let e=[];if(t.root.activeElement!=t.contentDOM)return e;let{anchorNode:n,anchorOffset:i,focusNode:r,focusOffset:s}=t.observer.selectionRange;return n&&(e.push(new Ve(n,i)),r==n&&s==i||e.push(new Ve(r,s))),e}(t),n=new ze(e,t.state);n.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=n.text,this.newSel=function(t,e){if(0==t.length)return null;let n=t[0].pos,r=2==t.length?t[1].pos:n;return n>-1&&r>-1?i.OF.single(n+e,r+e):null}(e,this.bounds.from)}else{let e=t.observer.selectionRange,n=s&&s.node==e.focusNode&&s.offset==e.focusOffset||!f(t.contentDOM,e.focusNode)?t.state.selection.main.head:t.docView.posFromDOM(e.focusNode,e.focusOffset),r=o&&o.node==e.anchorNode&&o.offset==e.anchorOffset||!f(t.contentDOM,e.anchorNode)?t.state.selection.main.anchor:t.docView.posFromDOM(e.anchorNode,e.anchorOffset),l=t.viewport;if((X.ios||X.chrome)&&t.state.selection.main.empty&&n!=r&&(l.from>0||l.to<t.state.doc.length)){let e=Math.min(n,r),i=Math.max(n,r),s=l.from-e,o=l.to-i;0!=s&&1!=s&&0!=e||0!=o&&-1!=o&&i!=t.state.doc.length||(n=0,r=t.state.doc.length)}this.newSel=i.OF.single(r,n)}}}function We(t,e){let n,{newSel:r}=e,s=t.state.selection.main,o=t.inputState.lastKeyTime>Date.now()-100?t.inputState.lastKeyCode:-1;if(e.bounds){let{from:r,to:l}=e.bounds,h=s.from,a=null;(8===o||X.android&&e.text.length<l-r)&&(h=s.to,a="end");let c=function(t,e,n,i){let r=Math.min(t.length,e.length),s=0;for(;s<r&&t.charCodeAt(s)==e.charCodeAt(s);)s++;if(s==r&&t.length==e.length)return null;let o=t.length,l=e.length;for(;o>0&&l>0&&t.charCodeAt(o-1)==e.charCodeAt(l-1);)o--,l--;return"end"==i&&(n-=o+Math.max(0,s-Math.min(o,l))-s),o<s&&t.length<e.length?(s-=n<=s&&n>=o?s-n:0,l=s+(l-o),o=s):l<s&&(s-=n<=s&&n>=l?s-n:0,o=s+(o-l),l=s),{from:s,toA:o,toB:l}}(t.state.doc.sliceString(r,l,$e),e.text,h-r,a);c&&(X.chrome&&13==o&&c.toB==c.from+2&&e.text.slice(c.from,c.toB)==$e+$e&&c.toB--,n={from:r+c.from,to:r+c.toA,insert:i.EY.of(e.text.slice(c.from,c.toB).split($e))})}else r&&(!t.hasFocus&&t.state.facet(oe)||r.main.eq(s))&&(r=null);if(!n&&!r)return!1;if(!n&&e.typeOver&&!s.empty&&r&&r.main.empty?n={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,s.to)}:(X.mac||X.android)&&n&&n.from==n.to&&n.from==s.head-1&&/^\. ?$/.test(n.insert.toString())&&"off"==t.contentDOM.getAttribute("autocorrect")?(r&&2==n.insert.length&&(r=i.OF.single(r.main.anchor-1,r.main.head-1)),n={from:n.from,to:n.to,insert:i.EY.of([n.insert.toString().replace("."," ")])}):n&&n.from>=s.from&&n.to<=s.to&&(n.from!=s.from||n.to!=s.to)&&s.to-s.from-(n.to-n.from)<=4?n={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,n.from).append(n.insert).append(t.state.doc.slice(n.to,s.to))}:X.chrome&&n&&n.from==n.to&&n.from==s.head&&"\n "==n.insert.toString()&&t.lineWrapping&&(r&&(r=i.OF.single(r.main.anchor-1,r.main.head-1)),n={from:s.from,to:s.to,insert:i.EY.of([" "])}),n)return je(t,n,r,o);if(r&&!r.main.eq(s)){let e=!1,n="select";return t.inputState.lastSelectionTime>Date.now()-50&&("select"==t.inputState.lastSelectionOrigin&&(e=!0),n=t.inputState.lastSelectionOrigin),t.dispatch({selection:r,scrollIntoView:e,userEvent:n}),!0}return!1}function je(t,e,n,r=-1){if(X.ios&&t.inputState.flushIOSKey(e))return!0;let s=t.state.selection.main;if(X.android&&(e.to==s.to&&(e.from==s.from||e.from==s.from-1&&" "==t.state.sliceDoc(e.from,s.from))&&1==e.insert.length&&2==e.insert.lines&&T(t.contentDOM,"Enter",13)||(e.from==s.from-1&&e.to==s.to&&0==e.insert.length||8==r&&e.insert.length<e.to-e.from&&e.to>s.head)&&T(t.contentDOM,"Backspace",8)||e.from==s.from&&e.to==s.to+1&&0==e.insert.length&&T(t.contentDOM,"Delete",46)))return!0;let o,l=e.insert.toString();t.inputState.composing>=0&&t.inputState.composing++;let h=()=>o||(o=function(t,e,n){let r,s=t.state,o=s.selection.main;if(e.from>=o.from&&e.to<=o.to&&e.to-e.from>=(o.to-o.from)/3&&(!n||n.main.empty&&n.main.from==e.from+e.insert.length)&&t.inputState.composing<0){let n=o.from<e.from?s.sliceDoc(o.from,e.from):"",i=o.to>e.to?s.sliceDoc(e.to,o.to):"";r=s.replaceSelection(t.state.toText(n+e.insert.sliceString(0,void 0,t.state.lineBreak)+i))}else{let l=s.changes(e),h=n&&n.main.to<=l.newLength?n.main:void 0;if(s.selection.ranges.length>1&&t.inputState.composing>=0&&e.to<=o.to&&e.to>=o.to-10){let a,c=t.state.sliceDoc(e.from,e.to),u=n&&Ae(t,n.main.head);if(u){let t=e.insert.length-(e.to-e.from);a={from:u.from,to:u.to-t}}else a=t.state.doc.lineAt(o.head);let f=o.to-e.to,d=o.to-o.from;r=s.changeByRange((n=>{if(n.from==o.from&&n.to==o.to)return{changes:l,range:h||n.map(l)};let r=n.to-f,u=r-c.length;if(n.to-n.from!=d||t.state.sliceDoc(u,r)!=c||n.to>=a.from&&n.from<=a.to)return{range:n};let p=s.changes({from:u,to:r,insert:e.insert}),g=n.to-o.to;return{changes:p,range:h?i.OF.range(Math.max(0,h.anchor+g),Math.max(0,h.head+g)):n.map(p)}}))}else r={changes:l,selection:h&&s.selection.replaceRange(h)}}let l="input.type";return(t.composing||t.inputState.compositionPendingChange&&t.inputState.compositionEndedAt>Date.now()-50)&&(t.inputState.compositionPendingChange=!1,l+=".compose",t.inputState.compositionFirstChange&&(l+=".start",t.inputState.compositionFirstChange=!1)),s.update(r,{userEvent:l,scrollIntoView:!0})}(t,e,n));return t.state.facet(Yt).some((n=>n(t,e.from,e.to,l,h)))||t.dispatch(h()),!0}class qe{setSelectionOrigin(t){this.lastSelectionOrigin=t,this.lastSelectionTime=Date.now()}constructor(t){this.view=t,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=t.hasFocus,X.safari&&t.contentDOM.addEventListener("input",(()=>null)),X.gecko&&function(t){yn.has(t)||(yn.add(t),t.addEventListener("copy",(()=>{})),t.addEventListener("cut",(()=>{})))}(t.contentDOM.ownerDocument)}handleEvent(t){(function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(let n,i=e.target;i!=t.contentDOM;i=i.parentNode)if(!i||11==i.nodeType||(n=N.get(i))&&n.ignoreEvent(e))return!1;return!0})(this.view,t)&&!this.ignoreDuringComposition(t)&&("keydown"==t.type&&this.keydown(t)||(0!=this.view.updateState?Promise.resolve().then((()=>this.runHandlers(t.type,t))):this.runHandlers(t.type,t)))}runHandlers(t,e){let n=this.handlers[t];if(n){for(let t of n.observers)t(this.view,e);for(let t of n.handlers){if(e.defaultPrevented)break;if(t(this.view,e)){e.preventDefault();break}}}}ensureHandlers(t){let e=Ge(t),n=this.handlers,i=this.view.contentDOM;for(let t in e)if("scroll"!=t){let r=!e[t].handlers.length,s=n[t];s&&r!=!s.handlers.length&&(i.removeEventListener(t,this.handleEvent),s=null),s||i.addEventListener(t,this.handleEvent,{passive:r})}for(let t in n)"scroll"==t||e[t]||i.removeEventListener(t,this.handleEvent);this.handlers=e}keydown(t){if(this.lastKeyCode=t.keyCode,this.lastKeyTime=Date.now(),9==t.keyCode&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&27!=t.keyCode&&Je.indexOf(t.keyCode)<0&&(this.tabFocusMode=-1),X.android&&X.chrome&&!t.synthetic&&(13==t.keyCode||8==t.keyCode))return this.view.observer.delayAndroidKey(t.key,t.keyCode),!0;let e;return!X.ios||t.synthetic||t.altKey||t.metaKey||!((e=Ue.find((e=>e.keyCode==t.keyCode)))&&!t.ctrlKey||Ye.indexOf(t.key)>-1&&t.ctrlKey&&!t.shiftKey)?(229!=t.keyCode&&this.view.observer.forceFlush(),!1):(this.pendingIOSKey=e||t,setTimeout((()=>this.flushIOSKey()),250),!0)}flushIOSKey(t){let e=this.pendingIOSKey;return!!e&&!("Enter"==e.key&&t&&t.from<t.to&&/^\S+$/.test(t.insert.toString()))&&(this.pendingIOSKey=void 0,T(this.view.contentDOM,e.key,e.keyCode,e instanceof KeyboardEvent?e:void 0))}ignoreDuringComposition(t){return!!/^key/.test(t.type)&&(this.composing>0||!!(X.safari&&!X.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)&&(this.compositionPendingKey=!1,!0))}startMouseSelection(t){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=t}update(t){this.view.observer.update(t),this.mouseSelection&&this.mouseSelection.update(t),this.draggedContent&&t.docChanged&&(this.draggedContent=this.draggedContent.map(t.changes)),t.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}function Ke(t,e){return(n,i)=>{try{return e.call(t,i,n)}catch(t){se(n.state,t)}}}function Ge(t){let e=Object.create(null);function n(t){return e[t]||(e[t]={observers:[],handlers:[]})}for(let e of t){let t=e.spec;if(t&&t.domEventHandlers)for(let i in t.domEventHandlers){let r=t.domEventHandlers[i];r&&n(i).handlers.push(Ke(e.value,r))}if(t&&t.domEventObservers)for(let i in t.domEventObservers){let r=t.domEventObservers[i];r&&n(i).observers.push(Ke(e.value,r))}}for(let t in Qe)n(t).handlers.push(Qe[t]);for(let t in tn)n(t).observers.push(tn[t]);return e}const Ue=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],Ye="dthko",Je=[16,17,18,20,91,92,224,225];function Xe(t){return.7*Math.max(0,t)+8}class Ze{constructor(t,e,n,r){this.view=t,this.startEvent=e,this.style=n,this.mustSelect=r,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=e,this.scrollParents=function(t){let e,n,i=t.ownerDocument;for(let r=t.parentNode;r&&!(r==i.body||e&&n);)if(1==r.nodeType)!n&&r.scrollHeight>r.clientHeight&&(n=r),!e&&r.scrollWidth>r.clientWidth&&(e=r),r=r.assignedSlot||r.parentNode;else{if(11!=r.nodeType)break;r=r.host}return{x:e,y:n}}(t.contentDOM),this.atoms=t.state.facet(ge).map((e=>e(t)));let s=t.contentDOM.ownerDocument;s.addEventListener("mousemove",this.move=this.move.bind(this)),s.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=e.shiftKey,this.multiple=t.state.facet(i.$t.allowMultipleSelections)&&function(t,e){let n=t.state.facet(jt);return n.length?n[0](e):X.mac?e.metaKey:e.ctrlKey}(t,e),this.dragging=!(!function(t,e){let{main:n}=t.state.selection;if(n.empty)return!1;let i=u(t.root);if(!i||0==i.rangeCount)return!0;let r=i.getRangeAt(0).getClientRects();for(let t=0;t<r.length;t++){let n=r[t];if(n.left<=e.clientX&&n.right>=e.clientX&&n.top<=e.clientY&&n.bottom>=e.clientY)return!0}return!1}(t,e)||1!=dn(e))&&null}start(t){!1===this.dragging&&this.select(t)}move(t){if(0==t.buttons)return this.destroy();if(this.dragging||null==this.dragging&&(e=this.startEvent,n=t,Math.max(Math.abs(e.clientX-n.clientX),Math.abs(e.clientY-n.clientY))<10))return;var e,n;this.select(this.lastEvent=t);let i=0,r=0,s=0,o=0,l=this.view.win.innerWidth,h=this.view.win.innerHeight;this.scrollParents.x&&({left:s,right:l}=this.scrollParents.x.getBoundingClientRect()),this.scrollParents.y&&({top:o,bottom:h}=this.scrollParents.y.getBoundingClientRect());let a=ye(this.view);t.clientX-a.left<=s+6?i=-Xe(s-t.clientX):t.clientX+a.right>=l-6&&(i=Xe(t.clientX-l)),t.clientY-a.top<=o+6?r=-Xe(o-t.clientY):t.clientY+a.bottom>=h-6&&(r=Xe(t.clientY-h)),this.setScrollSpeed(i,r)}up(t){null==this.dragging&&this.select(this.lastEvent),this.dragging||t.preventDefault(),this.destroy()}destroy(){this.setScrollSpeed(0,0);let t=this.view.contentDOM.ownerDocument;t.removeEventListener("mousemove",this.move),t.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(t,e){this.scrollSpeed={x:t,y:e},t||e?this.scrolling<0&&(this.scrolling=setInterval((()=>this.scroll()),50)):this.scrolling>-1&&(clearInterval(this.scrolling),this.scrolling=-1)}scroll(){let{x:t,y:e}=this.scrollSpeed;t&&this.scrollParents.x&&(this.scrollParents.x.scrollLeft+=t,t=0),e&&this.scrollParents.y&&(this.scrollParents.y.scrollTop+=e,e=0),(t||e)&&this.view.win.scrollBy(t,e),!1===this.dragging&&this.select(this.lastEvent)}skipAtoms(t){let e=null;for(let n=0;n<t.ranges.length;n++){let r=t.ranges[n],s=null;if(r.empty){let t=Ie(this.atoms,r.from,0);t!=r.from&&(s=i.OF.cursor(t,-1))}else{let t=Ie(this.atoms,r.from,-1),e=Ie(this.atoms,r.to,1);t==r.from&&e==r.to||(s=i.OF.range(r.from==r.anchor?t:e,r.from==r.head?t:e))}s&&(e||(e=t.ranges.slice()),e[n]=s)}return e?i.OF.create(e,t.mainIndex):t}select(t){let{view:e}=this,n=this.skipAtoms(this.style.get(t,this.extend,this.multiple));!this.mustSelect&&n.eq(e.state.selection,!1===this.dragging)||this.view.dispatch({selection:n,userEvent:"select.pointer"}),this.mustSelect=!1}update(t){t.transactions.some((t=>t.isUserEvent("input.type")))?this.destroy():this.style.update(t)&&setTimeout((()=>this.select(this.lastEvent)),20)}}const Qe=Object.create(null),tn=Object.create(null),en=X.ie&&X.ie_version<15||X.ios&&X.webkit_version<604;function nn(t,e,n){for(let i of t.facet(e))n=i(n,t);return n}function rn(t,e){e=nn(t.state,Xt,e);let n,{state:r}=t,s=1,o=r.toText(e),l=o.lines==r.selection.ranges.length;if(null!=gn&&r.selection.ranges.every((t=>t.empty))&&gn==o.toString()){let t=-1;n=r.changeByRange((n=>{let h=r.doc.lineAt(n.from);if(h.from==t)return{range:n};t=h.from;let a=r.toText((l?o.line(s++).text:e)+r.lineBreak);return{changes:{from:h.from,insert:a},range:i.OF.cursor(n.from+a.length)}}))}else n=l?r.changeByRange((t=>{let e=o.line(s++);return{changes:{from:t.from,to:t.to,insert:e.text},range:i.OF.cursor(t.from+e.length)}})):r.replaceSelection(o);t.dispatch(n,{userEvent:"input.paste",scrollIntoView:!0})}function sn(t,e,n,r){if(1==r)return i.OF.cursor(e,n);if(2==r)return function(t,e,n=1){let r=t.charCategorizer(e),s=t.doc.lineAt(e),o=e-s.from;if(0==s.length)return i.OF.cursor(e);0==o?n=1:o==s.length&&(n=-1);let l=o,h=o;n<0?l=(0,i.zK)(s.text,o,!1):h=(0,i.zK)(s.text,o);let a=r(s.text.slice(l,h));for(;l>0;){let t=(0,i.zK)(s.text,l,!1);if(r(s.text.slice(t,l))!=a)break;l=t}for(;h<s.length;){let t=(0,i.zK)(s.text,h);if(r(s.text.slice(h,t))!=a)break;h=t}return i.OF.range(l+s.from,h+s.from)}(t.state,e,n);{let n=yt.find(t.docView,e),r=t.state.doc.lineAt(n?n.posAtEnd:e),s=n?n.posAtStart:r.from,o=n?n.posAtEnd:r.to;return o<t.state.doc.length&&o==r.to&&o++,i.OF.range(s,o)}}tn.scroll=t=>{t.inputState.lastScrollTop=t.scrollDOM.scrollTop,t.inputState.lastScrollLeft=t.scrollDOM.scrollLeft},Qe.keydown=(t,e)=>(t.inputState.setSelectionOrigin("select"),27==e.keyCode&&0!=t.inputState.tabFocusMode&&(t.inputState.tabFocusMode=Date.now()+2e3),!1),tn.touchstart=(t,e)=>{t.inputState.lastTouchTime=Date.now(),t.inputState.setSelectionOrigin("select.pointer")},tn.touchmove=t=>{t.inputState.setSelectionOrigin("select.pointer")},Qe.mousedown=(t,e)=>{if(t.observer.flush(),t.inputState.lastTouchTime>Date.now()-2e3)return!1;let n=null;for(let i of t.state.facet(Kt))if(n=i(t,e),n)break;if(n||0!=e.button||(n=function(t,e){let n=hn(t,e),r=dn(e),s=t.state.selection;return{update(t){t.docChanged&&(n.pos=t.changes.mapPos(n.pos),s=s.map(t.changes))},get(e,o,l){let h,a=hn(t,e),c=sn(t,a.pos,a.bias,r);if(n.pos!=a.pos&&!o){let e=sn(t,n.pos,n.bias,r),s=Math.min(e.from,c.from),o=Math.max(e.to,c.to);c=s<c.from?i.OF.range(s,o):i.OF.range(o,s)}return o?s.replaceRange(s.main.extend(c.from,c.to)):l&&1==r&&s.ranges.length>1&&(h=function(t,e){for(let n=0;n<t.ranges.length;n++){let{from:r,to:s}=t.ranges[n];if(r<=e&&s>=e)return i.OF.create(t.ranges.slice(0,n).concat(t.ranges.slice(n+1)),t.mainIndex==n?0:t.mainIndex-(t.mainIndex>n?1:0))}return null}(s,a.pos))?h:l?s.addRange(c):i.OF.create([c])}}}(t,e)),n){let i=!t.hasFocus;t.inputState.startMouseSelection(new Ze(t,e,n,i)),i&&t.observer.ignore((()=>{C(t.contentDOM);let e=t.root.activeElement;e&&!e.contains(t.contentDOM)&&e.blur()}));let r=t.inputState.mouseSelection;if(r)return r.start(e),!1===r.dragging}return!1};let on=(t,e,n)=>e>=n.top&&e<=n.bottom&&t>=n.left&&t<=n.right;function ln(t,e,n,i){let r=yt.find(t.docView,e);if(!r)return 1;let s=e-r.posAtStart;if(0==s)return 1;if(s==r.length)return-1;let o=r.coordsAt(s,-1);if(o&&on(n,i,o))return-1;let l=r.coordsAt(s,1);return l&&on(n,i,l)?1:o&&o.bottom>=i?-1:1}function hn(t,e){let n=t.posAtCoords({x:e.clientX,y:e.clientY},!1);return{pos:n,bias:ln(t,n,e.clientX,e.clientY)}}const an=X.ie&&X.ie_version<=11;let cn=null,un=0,fn=0;function dn(t){if(!an)return t.detail;let e=cn,n=fn;return cn=t,fn=Date.now(),un=!e||n>Date.now()-400&&Math.abs(e.clientX-t.clientX)<2&&Math.abs(e.clientY-t.clientY)<2?(un+1)%3:1}function pn(t,e,n,i){if(!(n=nn(t.state,Xt,n)))return;let r=t.posAtCoords({x:e.clientX,y:e.clientY},!1),{draggedContent:s}=t.inputState,o=i&&s&&function(t,e){let n=t.state.facet(qt);return n.length?n[0](e):X.mac?!e.altKey:!e.ctrlKey}(t,e)?{from:s.from,to:s.to}:null,l={from:r,insert:n},h=t.state.changes(o?[o,l]:l);t.focus(),t.dispatch({changes:h,selection:{anchor:h.mapPos(r,-1),head:h.mapPos(r,1)},userEvent:o?"move.drop":"input.drop"}),t.inputState.draggedContent=null}Qe.dragstart=(t,e)=>{let{selection:{main:n}}=t.state;if(e.target.draggable){let r=t.docView.nearest(e.target);if(r&&r.isWidget){let t=r.posAtStart,e=t+r.length;(t>=n.to||e<=n.from)&&(n=i.OF.range(t,e))}}let{inputState:r}=t;return r.mouseSelection&&(r.mouseSelection.dragging=!0),r.draggedContent=n,e.dataTransfer&&(e.dataTransfer.setData("Text",nn(t.state,Zt,t.state.sliceDoc(n.from,n.to))),e.dataTransfer.effectAllowed="copyMove"),!1},Qe.dragend=t=>(t.inputState.draggedContent=null,!1),Qe.drop=(t,e)=>{if(!e.dataTransfer)return!1;if(t.state.readOnly)return!0;let n=e.dataTransfer.files;if(n&&n.length){let i=Array(n.length),r=0,s=()=>{++r==n.length&&pn(t,e,i.filter((t=>null!=t)).join(t.state.lineBreak),!1)};for(let t=0;t<n.length;t++){let e=new FileReader;e.onerror=s,e.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(e.result)||(i[t]=e.result),s()},e.readAsText(n[t])}return!0}{let n=e.dataTransfer.getData("Text");if(n)return pn(t,e,n,!0),!0}return!1},Qe.paste=(t,e)=>{if(t.state.readOnly)return!0;t.observer.flush();let n=en?null:e.clipboardData;return n?(rn(t,n.getData("text/plain")||n.getData("text/uri-list")),!0):(function(t){let e=t.dom.parentNode;if(!e)return;let n=e.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.focus(),setTimeout((()=>{t.focus(),n.remove(),rn(t,n.value)}),50)}(t),!1)};let gn=null;Qe.copy=Qe.cut=(t,e)=>{let{text:n,ranges:i,linewise:r}=function(t){let e=[],n=[],i=!1;for(let i of t.selection.ranges)i.empty||(e.push(t.sliceDoc(i.from,i.to)),n.push(i));if(!e.length){let r=-1;for(let{from:i}of t.selection.ranges){let s=t.doc.lineAt(i);s.number>r&&(e.push(s.text),n.push({from:s.from,to:Math.min(t.doc.length,s.to+1)})),r=s.number}i=!0}return{text:nn(t,Zt,e.join(t.lineBreak)),ranges:n,linewise:i}}(t.state);if(!n&&!r)return!1;gn=r?n:null,"cut"!=e.type||t.state.readOnly||t.dispatch({changes:i,scrollIntoView:!0,userEvent:"delete.cut"});let s=en?null:e.clipboardData;return s?(s.clearData(),s.setData("text/plain",n),!0):(function(t,e){let n=t.dom.parentNode;if(!n)return;let i=n.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.value=e,i.focus(),i.selectionEnd=e.length,i.selectionStart=0,setTimeout((()=>{i.remove(),t.focus()}),50)}(t,n),!1)};const mn=i.YH.define();function wn(t,e){let n=[];for(let i of t.facet(Jt)){let r=i(t,e);r&&n.push(r)}return n.length?t.update({effects:n,annotations:mn.of(!0)}):null}function vn(t){setTimeout((()=>{let e=t.hasFocus;if(e!=t.inputState.notifiedFocused){let n=wn(t.state,e);n?t.dispatch(n):t.update([])}}),10)}tn.focus=t=>{t.inputState.lastFocusTime=Date.now(),t.scrollDOM.scrollTop||!t.inputState.lastScrollTop&&!t.inputState.lastScrollLeft||(t.scrollDOM.scrollTop=t.inputState.lastScrollTop,t.scrollDOM.scrollLeft=t.inputState.lastScrollLeft),vn(t)},tn.blur=t=>{t.observer.clearSelectionRange(),vn(t)},tn.compositionstart=tn.compositionupdate=t=>{t.observer.editContext||(null==t.inputState.compositionFirstChange&&(t.inputState.compositionFirstChange=!0),t.inputState.composing<0&&(t.inputState.composing=0))},tn.compositionend=t=>{t.observer.editContext||(t.inputState.composing=-1,t.inputState.compositionEndedAt=Date.now(),t.inputState.compositionPendingKey=!0,t.inputState.compositionPendingChange=t.observer.pendingRecords().length>0,t.inputState.compositionFirstChange=null,X.chrome&&X.android?t.observer.flushSoon():t.inputState.compositionPendingChange?Promise.resolve().then((()=>t.observer.flush())):setTimeout((()=>{t.inputState.composing<0&&t.docView.hasComposition&&t.update([])}),50))},tn.contextmenu=t=>{t.inputState.lastContextMenu=Date.now()},Qe.beforeinput=(t,e)=>{var n,i;if("insertReplacementText"==e.inputType&&t.observer.editContext){let i=null===(n=e.dataTransfer)||void 0===n?void 0:n.getData("text/plain"),r=e.getTargetRanges();if(i&&r.length){let e=r[0],n=t.posAtDOM(e.startContainer,e.startOffset),s=t.posAtDOM(e.endContainer,e.endOffset);return je(t,{from:n,to:s,insert:t.state.toText(i)},null),!0}}let r;if(X.chrome&&X.android&&(r=Ue.find((t=>t.inputType==e.inputType)))&&(t.observer.delayAndroidKey(r.key,r.keyCode),"Backspace"==r.key||"Delete"==r.key)){let e=(null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0;setTimeout((()=>{var n;((null===(n=window.visualViewport)||void 0===n?void 0:n.height)||0)>e+10&&t.hasFocus&&(t.contentDOM.blur(),t.focus())}),100)}return X.ios&&"deleteContentForward"==e.inputType&&t.observer.flushSoon(),X.safari&&"insertText"==e.inputType&&t.inputState.composing>=0&&setTimeout((()=>tn.compositionend(t,e)),20),!1};const yn=new Set,bn=["pre-wrap","normal","pre-line","break-spaces"];let xn=!1;function kn(){xn=!1}class Sn{constructor(t){this.lineWrapping=t,this.doc=i.EY.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30}heightForGap(t,e){let n=this.doc.lineAt(e).number-this.doc.lineAt(t).number+1;return this.lineWrapping&&(n+=Math.max(0,Math.ceil((e-t-n*this.lineLength*.5)/this.lineLength))),this.lineHeight*n}heightForLine(t){return this.lineWrapping?(1+Math.max(0,Math.ceil((t-this.lineLength)/(this.lineLength-5))))*this.lineHeight:this.lineHeight}setDoc(t){return this.doc=t,this}mustRefreshForWrapping(t){return bn.indexOf(t)>-1!=this.lineWrapping}mustRefreshForHeights(t){let e=!1;for(let n=0;n<t.length;n++){let i=t[n];i<0?n++:this.heightSamples[Math.floor(10*i)]||(e=!0,this.heightSamples[Math.floor(10*i)]=!0)}return e}refresh(t,e,n,i,r,s){let o=bn.indexOf(t)>-1,l=Math.round(e)!=Math.round(this.lineHeight)||this.lineWrapping!=o;if(this.lineWrapping=o,this.lineHeight=e,this.charWidth=n,this.textHeight=i,this.lineLength=r,l){this.heightSamples={};for(let t=0;t<s.length;t++){let e=s[t];e<0?t++:this.heightSamples[Math.floor(10*e)]=!0}}return l}}class An{constructor(t,e){this.from=t,this.heights=e,this.index=0}get more(){return this.index<this.heights.length}}class Mn{constructor(t,e,n,i,r){this.from=t,this.length=e,this.top=n,this.height=i,this._content=r}get type(){return"number"==typeof this._content?ft.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof mt?this._content.widget:null}get widgetLineBreaks(){return"number"==typeof this._content?this._content:0}join(t){let e=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(t._content)?t._content:[t]);return new Mn(this.from,this.length+t.length,this.top,this.height+t.height,e)}}var Cn=function(t){return t[t.ByPos=0]="ByPos",t[t.ByHeight=1]="ByHeight",t[t.ByPosNoHeight=2]="ByPosNoHeight",t}(Cn||(Cn={}));const On=.001;class Tn{constructor(t,e,n=2){this.length=t,this.height=e,this.flags=n}get outdated(){return(2&this.flags)>0}set outdated(t){this.flags=(t?2:0)|-3&this.flags}setHeight(t){this.height!=t&&(Math.abs(this.height-t)>On&&(xn=!0),this.height=t)}replace(t,e,n){return Tn.of(n)}decomposeLeft(t,e){e.push(this)}decomposeRight(t,e){e.push(this)}applyChanges(t,e,n,i){let r=this,s=n.doc;for(let o=i.length-1;o>=0;o--){let{fromA:l,toA:h,fromB:a,toB:c}=i[o],u=r.lineAt(l,Cn.ByPosNoHeight,n.setDoc(e),0,0),f=u.to>=h?u:r.lineAt(h,Cn.ByPosNoHeight,n,0,0);for(c+=f.to-h,h=f.to;o>0&&u.from<=i[o-1].toA;)l=i[o-1].fromA,a=i[o-1].fromB,o--,l<u.from&&(u=r.lineAt(l,Cn.ByPosNoHeight,n,0,0));a+=u.from-l,l=u.from;let d=Nn.build(n.setDoc(s),t,a,c);r=En(r,r.replace(l,h,d))}return r.updateHeight(n,0)}static empty(){return new Rn(0,0)}static of(t){if(1==t.length)return t[0];let e=0,n=t.length,i=0,r=0;for(;;)if(e==n)if(i>2*r){let r=t[e-1];r.break?t.splice(--e,1,r.left,null,r.right):t.splice(--e,1,r.left,r.right),n+=1+r.break,i-=r.size}else{if(!(r>2*i))break;{let e=t[n];e.break?t.splice(n,1,e.left,null,e.right):t.splice(n,1,e.left,e.right),n+=2+e.break,r-=e.size}}else if(i<r){let n=t[e++];n&&(i+=n.size)}else{let e=t[--n];e&&(r+=e.size)}let s=0;return null==t[e-1]?(s=1,e--):null==t[e]&&(s=1,n++),new Pn(Tn.of(t.slice(0,e)),s,Tn.of(t.slice(n)))}}function En(t,e){return t==e?t:(t.constructor!=e.constructor&&(xn=!0),e)}Tn.prototype.size=1;class Dn extends Tn{constructor(t,e,n){super(t,e),this.deco=n}blockAt(t,e,n,i){return new Mn(i,this.length,n,this.height,this.deco||0)}lineAt(t,e,n,i,r){return this.blockAt(0,n,i,r)}forEachLine(t,e,n,i,r,s){t<=r+this.length&&e>=r&&s(this.blockAt(0,n,i,r))}updateHeight(t,e=0,n=!1,i){return i&&i.from<=e&&i.more&&this.setHeight(i.heights[i.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class Rn extends Dn{constructor(t,e){super(t,e,null),this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(t,e,n,i){return new Mn(i,this.length,n,this.height,this.breaks)}replace(t,e,n){let i=n[0];return 1==n.length&&(i instanceof Rn||i instanceof Bn&&4&i.flags)&&Math.abs(this.length-i.length)<10?(i instanceof Bn?i=new Rn(i.length,this.height):i.height=this.height,this.outdated||(i.outdated=!1),i):Tn.of(n)}updateHeight(t,e=0,n=!1,i){return i&&i.from<=e&&i.more?this.setHeight(i.heights[i.index++]):(n||this.outdated)&&this.setHeight(Math.max(this.widgetHeight,t.heightForLine(this.length-this.collapsed))+this.breaks*t.lineHeight),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class Bn extends Tn{constructor(t){super(t,0)}heightMetrics(t,e){let n,i=t.doc.lineAt(e).number,r=t.doc.lineAt(e+this.length).number,s=r-i+1,o=0;if(t.lineWrapping){let e=Math.min(this.height,t.lineHeight*s);n=e/s,this.length>s+1&&(o=(this.height-e)/(this.length-s-1))}else n=this.height/s;return{firstLine:i,lastLine:r,perLine:n,perChar:o}}blockAt(t,e,n,i){let{firstLine:r,lastLine:s,perLine:o,perChar:l}=this.heightMetrics(e,i);if(e.lineWrapping){let r=i+(t<e.lineHeight?0:Math.round(Math.max(0,Math.min(1,(t-n)/this.height))*this.length)),s=e.doc.lineAt(r),h=o+s.length*l,a=Math.max(n,t-h/2);return new Mn(s.from,s.length,a,h,0)}{let i=Math.max(0,Math.min(s-r,Math.floor((t-n)/o))),{from:l,length:h}=e.doc.line(r+i);return new Mn(l,h,n+o*i,o,0)}}lineAt(t,e,n,i,r){if(e==Cn.ByHeight)return this.blockAt(t,n,i,r);if(e==Cn.ByPosNoHeight){let{from:e,to:i}=n.doc.lineAt(t);return new Mn(e,i-e,0,0,0)}let{firstLine:s,perLine:o,perChar:l}=this.heightMetrics(n,r),h=n.doc.lineAt(t),a=o+h.length*l,c=h.number-s,u=i+o*c+l*(h.from-r-c);return new Mn(h.from,h.length,Math.max(i,Math.min(u,i+this.height-a)),a,0)}forEachLine(t,e,n,i,r,s){t=Math.max(t,r),e=Math.min(e,r+this.length);let{firstLine:o,perLine:l,perChar:h}=this.heightMetrics(n,r);for(let a=t,c=i;a<=e;){let e=n.doc.lineAt(a);if(a==t){let n=e.number-o;c+=l*n+h*(t-r-n)}let i=l+h*e.length;s(new Mn(e.from,e.length,c,i,0)),c+=i,a=e.to+1}}replace(t,e,n){let i=this.length-e;if(i>0){let t=n[n.length-1];t instanceof Bn?n[n.length-1]=new Bn(t.length+i):n.push(null,new Bn(i-1))}if(t>0){let e=n[0];e instanceof Bn?n[0]=new Bn(t+e.length):n.unshift(new Bn(t-1),null)}return Tn.of(n)}decomposeLeft(t,e){e.push(new Bn(t-1),null)}decomposeRight(t,e){e.push(null,new Bn(this.length-t-1))}updateHeight(t,e=0,n=!1,i){let r=e+this.length;if(i&&i.from<=e+this.length&&i.more){let n=[],s=Math.max(e,i.from),o=-1;for(i.from>e&&n.push(new Bn(i.from-e-1).updateHeight(t,e));s<=r&&i.more;){let e=t.doc.lineAt(s).length;n.length&&n.push(null);let r=i.heights[i.index++];-1==o?o=r:Math.abs(r-o)>=On&&(o=-2);let l=new Rn(e,r);l.outdated=!1,n.push(l),s+=e+1}s<=r&&n.push(null,new Bn(r-s).updateHeight(t,s));let l=Tn.of(n);return(o<0||Math.abs(l.height-this.height)>=On||Math.abs(o-this.heightMetrics(t,e).perLine)>=On)&&(xn=!0),En(this,l)}return(n||this.outdated)&&(this.setHeight(t.heightForGap(e,e+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class Pn extends Tn{constructor(t,e,n){super(t.length+e+n.length,t.height+n.height,e|(t.outdated||n.outdated?2:0)),this.left=t,this.right=n,this.size=t.size+n.size}get break(){return 1&this.flags}blockAt(t,e,n,i){let r=n+this.left.height;return t<r?this.left.blockAt(t,e,n,i):this.right.blockAt(t,e,r,i+this.left.length+this.break)}lineAt(t,e,n,i,r){let s=i+this.left.height,o=r+this.left.length+this.break,l=e==Cn.ByHeight?t<s:t<o,h=l?this.left.lineAt(t,e,n,i,r):this.right.lineAt(t,e,n,s,o);if(this.break||(l?h.to<o:h.from>o))return h;let a=e==Cn.ByPosNoHeight?Cn.ByPosNoHeight:Cn.ByPos;return l?h.join(this.right.lineAt(o,a,n,s,o)):this.left.lineAt(o,a,n,i,r).join(h)}forEachLine(t,e,n,i,r,s){let o=i+this.left.height,l=r+this.left.length+this.break;if(this.break)t<l&&this.left.forEachLine(t,e,n,i,r,s),e>=l&&this.right.forEachLine(t,e,n,o,l,s);else{let h=this.lineAt(l,Cn.ByPos,n,i,r);t<h.from&&this.left.forEachLine(t,h.from-1,n,i,r,s),h.to>=t&&h.from<=e&&s(h),e>h.to&&this.right.forEachLine(h.to+1,e,n,o,l,s)}}replace(t,e,n){let i=this.left.length+this.break;if(e<i)return this.balanced(this.left.replace(t,e,n),this.right);if(t>this.left.length)return this.balanced(this.left,this.right.replace(t-i,e-i,n));let r=[];t>0&&this.decomposeLeft(t,r);let s=r.length;for(let t of n)r.push(t);if(t>0&&Ln(r,s-1),e<this.length){let t=r.length;this.decomposeRight(e,r),Ln(r,t)}return Tn.of(r)}decomposeLeft(t,e){let n=this.left.length;if(t<=n)return this.left.decomposeLeft(t,e);e.push(this.left),this.break&&(n++,t>=n&&e.push(null)),t>n&&this.right.decomposeLeft(t-n,e)}decomposeRight(t,e){let n=this.left.length,i=n+this.break;if(t>=i)return this.right.decomposeRight(t-i,e);t<n&&this.left.decomposeRight(t,e),this.break&&t<i&&e.push(null),e.push(this.right)}balanced(t,e){return t.size>2*e.size||e.size>2*t.size?Tn.of(this.break?[t,null,e]:[t,e]):(this.left=En(this.left,t),this.right=En(this.right,e),this.setHeight(t.height+e.height),this.outdated=t.outdated||e.outdated,this.size=t.size+e.size,this.length=t.length+this.break+e.length,this)}updateHeight(t,e=0,n=!1,i){let{left:r,right:s}=this,o=e+r.length+this.break,l=null;return i&&i.from<=e+r.length&&i.more?l=r=r.updateHeight(t,e,n,i):r.updateHeight(t,e,n),i&&i.from<=o+s.length&&i.more?l=s=s.updateHeight(t,o,n,i):s.updateHeight(t,o,n),l?this.balanced(r,s):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function Ln(t,e){let n,i;null==t[e]&&(n=t[e-1])instanceof Bn&&(i=t[e+1])instanceof Bn&&t.splice(e-1,3,new Bn(n.length+1+i.length))}class Nn{constructor(t,e){this.pos=t,this.oracle=e,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=t}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(t,e){if(this.lineStart>-1){let t=Math.min(e,this.lineEnd),n=this.nodes[this.nodes.length-1];n instanceof Rn?n.length+=t-this.pos:(t>this.pos||!this.isCovered)&&this.nodes.push(new Rn(t-this.pos,-1)),this.writtenTo=t,e>t&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=e}point(t,e,n){if(t<e||n.heightRelevant){let i=n.widget?n.widget.estimatedHeight:0,r=n.widget?n.widget.lineBreaks:0;i<0&&(i=this.oracle.lineHeight);let s=e-t;n.block?this.addBlock(new Dn(s,i,n)):(s||r||i>=5)&&this.addLineDeco(i,r,s)}else e>t&&this.span(t,e);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:t,to:e}=this.oracle.doc.lineAt(this.pos);this.lineStart=t,this.lineEnd=e,this.writtenTo<t&&((this.writtenTo<t-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,t-1)),this.nodes.push(null)),this.pos>t&&this.nodes.push(new Rn(this.pos-t,-1)),this.writtenTo=this.pos}blankContent(t,e){let n=new Bn(e-t);return this.oracle.doc.lineAt(t).to==e&&(n.flags|=4),n}ensureLine(){this.enterLine();let t=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(t instanceof Rn)return t;let e=new Rn(0,-1);return this.nodes.push(e),e}addBlock(t){this.enterLine();let e=t.deco;e&&e.startSide>0&&!this.isCovered&&this.ensureLine(),this.nodes.push(t),this.writtenTo=this.pos=this.pos+t.length,e&&e.endSide>0&&(this.covering=t)}addLineDeco(t,e,n){let i=this.ensureLine();i.length+=n,i.collapsed+=n,i.widgetHeight=Math.max(i.widgetHeight,t),i.breaks+=e,this.writtenTo=this.pos=this.pos+n}finish(t){let e=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||e instanceof Rn||this.isCovered?(this.writtenTo<this.pos||null==e)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new Rn(0,-1));let n=t;for(let t of this.nodes)t instanceof Rn&&t.updateHeight(this.oracle,n),n+=t?t.length:1;return this.nodes}static build(t,e,n,r){let s=new Nn(n,t);return i.om.spans(e,n,r,s,0),s.finish(n)}}class In{constructor(){this.changes=[]}compareRange(){}comparePoint(t,e,n,i){(t<e||n&&n.heightRelevant||i&&i.heightRelevant)&&vt(t,e,this.changes,5)}}function Fn(t,e){let n=t.getBoundingClientRect(),i=t.ownerDocument,r=i.defaultView||window,s=Math.max(0,n.left),o=Math.min(r.innerWidth,n.right),l=Math.max(0,n.top),h=Math.min(r.innerHeight,n.bottom);for(let e=t.parentNode;e&&e!=i.body;)if(1==e.nodeType){let n=e,i=window.getComputedStyle(n);if((n.scrollHeight>n.clientHeight||n.scrollWidth>n.clientWidth)&&"visible"!=i.overflow){let i=n.getBoundingClientRect();s=Math.max(s,i.left),o=Math.min(o,i.right),l=Math.max(l,i.top),h=Math.min(e==t.parentNode?r.innerHeight:h,i.bottom)}e="absolute"==i.position||"fixed"==i.position?n.offsetParent:n.parentNode}else{if(11!=e.nodeType)break;e=e.host}return{left:s-n.left,right:Math.max(s,o)-n.left,top:l-(n.top+e),bottom:Math.max(l,h)-(n.top+e)}}function $n(t,e){let n=t.getBoundingClientRect();return{left:0,right:n.right-n.left,top:e,bottom:n.bottom-(n.top+e)}}class zn{constructor(t,e,n,i){this.from=t,this.to=e,this.size=n,this.displaySize=i}static same(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++){let i=t[n],r=e[n];if(i.from!=r.from||i.to!=r.to||i.size!=r.size)return!1}return!0}draw(t,e){return dt.replace({widget:new Hn(this.displaySize*(e?t.scaleY:t.scaleX),e)}).range(this.from,this.to)}}class Hn extends ut{constructor(t,e){super(),this.size=t,this.vertical=e}eq(t){return t.size==this.size&&t.vertical==this.vertical}toDOM(){let t=document.createElement("div");return this.vertical?t.style.height=this.size+"px":(t.style.width=this.size+"px",t.style.height="2px",t.style.display="inline-block"),t}get estimatedHeight(){return this.vertical?this.size:-1}}class Vn{constructor(t){this.state=t,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=qn,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=Mt.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let e=t.facet(fe).some((t=>"function"!=typeof t&&"cm-lineWrapping"==t.class));this.heightOracle=new Sn(e),this.stateDeco=t.facet(de).filter((t=>"function"!=typeof t)),this.heightMap=Tn.empty().applyChanges(this.stateDeco,i.EY.empty,this.heightOracle.setDoc(t.doc),[new xe(0,0,0,t.doc.length)]);for(let t=0;t<2&&(this.viewport=this.getViewport(0,null),this.updateForViewport());t++);this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=dt.set(this.lineGaps.map((t=>t.draw(this,!1)))),this.computeVisibleRanges()}updateForViewport(){let t=[this.viewport],{main:e}=this.state.selection;for(let n=0;n<=1;n++){let i=n?e.head:e.anchor;if(!t.some((({from:t,to:e})=>i>=t&&i<=e))){let{from:e,to:n}=this.lineBlockAt(i);t.push(new _n(e,n))}}return this.viewports=t.sort(((t,e)=>t.from-e.from)),this.updateScaler()}updateScaler(){let t=this.scaler;return this.scaler=this.heightMap.height<=7e6?qn:new Kn(this.heightOracle,this.heightMap,this.viewports),t.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(t=>{this.viewportLines.push(Gn(t,this.scaler))}))}update(t,e=null){this.state=t.state;let n=this.stateDeco;this.stateDeco=this.state.facet(de).filter((t=>"function"!=typeof t));let r=t.changedRanges,s=xe.extendWithRanges(r,function(t,e,n){let r=new In;return i.om.compare(t,e,n,r,0),r.changes}(n,this.stateDeco,t?t.changes:i.VR.empty(this.state.doc.length))),o=this.heightMap.height,l=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);kn(),this.heightMap=this.heightMap.applyChanges(this.stateDeco,t.startState.doc,this.heightOracle.setDoc(this.state.doc),s),(this.heightMap.height!=o||xn)&&(t.flags|=2),l?(this.scrollAnchorPos=t.changes.mapPos(l.from,-1),this.scrollAnchorHeight=l.top):(this.scrollAnchorPos=-1,this.scrollAnchorHeight=o);let h=s.length?this.mapViewport(this.viewport,t.changes):this.viewport;(e&&(e.range.head<h.from||e.range.head>h.to)||!this.viewportIsAppropriate(h))&&(h=this.getViewport(0,e));let a=h.from!=this.viewport.from||h.to!=this.viewport.to;this.viewport=h,t.flags|=this.updateForViewport(),(a||!t.changes.empty||2&t.flags)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,t.changes))),t.flags|=this.computeVisibleRanges(t.changes),e&&(this.scrollTarget=e),!this.mustEnforceCursorAssoc&&t.selectionSet&&t.view.lineWrapping&&t.state.selection.main.empty&&t.state.selection.main.assoc&&!t.state.facet(te)&&(this.mustEnforceCursorAssoc=!0)}measure(t){let e=t.contentDOM,n=window.getComputedStyle(e),r=this.heightOracle,s=n.whiteSpace;this.defaultTextDirection="rtl"==n.direction?Mt.RTL:Mt.LTR;let o=this.heightOracle.mustRefreshForWrapping(s),l=e.getBoundingClientRect(),h=o||this.mustMeasureContent||this.contentDOMHeight!=l.height;this.contentDOMHeight=l.height,this.mustMeasureContent=!1;let a=0,c=0;if(l.width&&l.height){let{scaleX:t,scaleY:n}=k(e,l);(t>.005&&Math.abs(this.scaleX-t)>.005||n>.005&&Math.abs(this.scaleY-n)>.005)&&(this.scaleX=t,this.scaleY=n,a|=16,o=h=!0)}let u=(parseInt(n.paddingTop)||0)*this.scaleY,f=(parseInt(n.paddingBottom)||0)*this.scaleY;this.paddingTop==u&&this.paddingBottom==f||(this.paddingTop=u,this.paddingBottom=f,a|=18),this.editorWidth!=t.scrollDOM.clientWidth&&(r.lineWrapping&&(h=!0),this.editorWidth=t.scrollDOM.clientWidth,a|=16);let d=t.scrollDOM.scrollTop*this.scaleY;this.scrollTop!=d&&(this.scrollAnchorHeight=-1,this.scrollTop=d),this.scrolledToBottom=D(t.scrollDOM);let p=(this.printing?$n:Fn)(e,this.paddingTop),g=p.top-this.pixelViewport.top,m=p.bottom-this.pixelViewport.bottom;this.pixelViewport=p;let w=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(w!=this.inView&&(this.inView=w,w&&(h=!0)),!this.inView&&!this.scrollTarget&&!function(t){let e=t.getBoundingClientRect(),n=t.ownerDocument.defaultView||window;return e.left<n.innerWidth&&e.right>0&&e.top<n.innerHeight&&e.bottom>0}(t.dom))return 0;let v=l.width;if(this.contentDOMWidth==v&&this.editorHeight==t.scrollDOM.clientHeight||(this.contentDOMWidth=l.width,this.editorHeight=t.scrollDOM.clientHeight,a|=16),h){let e=t.docView.measureVisibleLineHeights(this.viewport);if(r.mustRefreshForHeights(e)&&(o=!0),o||r.lineWrapping&&Math.abs(v-this.contentDOMWidth)>r.charWidth){let{lineHeight:n,charWidth:i,textHeight:l}=t.docView.measureTextSize();o=n>0&&r.refresh(s,n,i,l,v/i,e),o&&(t.docView.minWidth=0,a|=16)}g>0&&m>0?c=Math.max(g,m):g<0&&m<0&&(c=Math.min(g,m)),kn();for(let n of this.viewports){let s=n.from==this.viewport.from?e:t.docView.measureVisibleLineHeights(n);this.heightMap=(o?Tn.empty().applyChanges(this.stateDeco,i.EY.empty,this.heightOracle,[new xe(0,0,0,t.state.doc.length)]):this.heightMap).updateHeight(r,0,o,new An(n.from,s))}xn&&(a|=2)}let y=!this.viewportIsAppropriate(this.viewport,c)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return y&&(2&a&&(a|=this.updateScaler()),this.viewport=this.getViewport(c,this.scrollTarget),a|=this.updateForViewport()),(2&a||y)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(o?[]:this.lineGaps,t)),a|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,t.docView.enforceCursorAssoc()),a}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(t,e){let n=.5-Math.max(-.5,Math.min(.5,t/1e3/2)),i=this.heightMap,r=this.heightOracle,{visibleTop:s,visibleBottom:o}=this,l=new _n(i.lineAt(s-1e3*n,Cn.ByHeight,r,0,0).from,i.lineAt(o+1e3*(1-n),Cn.ByHeight,r,0,0).to);if(e){let{head:t}=e.range;if(t<l.from||t>l.to){let n,s=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),o=i.lineAt(t,Cn.ByPos,r,0,0);n="center"==e.y?(o.top+o.bottom)/2-s/2:"start"==e.y||"nearest"==e.y&&t<l.from?o.top:o.bottom-s,l=new _n(i.lineAt(n-500,Cn.ByHeight,r,0,0).from,i.lineAt(n+s+500,Cn.ByHeight,r,0,0).to)}}return l}mapViewport(t,e){let n=e.mapPos(t.from,-1),i=e.mapPos(t.to,1);return new _n(this.heightMap.lineAt(n,Cn.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(i,Cn.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:t,to:e},n=0){if(!this.inView)return!0;let{top:i}=this.heightMap.lineAt(t,Cn.ByPos,this.heightOracle,0,0),{bottom:r}=this.heightMap.lineAt(e,Cn.ByPos,this.heightOracle,0,0),{visibleTop:s,visibleBottom:o}=this;return(0==t||i<=s-Math.max(10,Math.min(-n,250)))&&(e==this.state.doc.length||r>=o+Math.max(10,Math.min(n,250)))&&i>s-2e3&&r<o+2e3}mapLineGaps(t,e){if(!t.length||e.empty)return t;let n=[];for(let i of t)e.touchesRange(i.from,i.to)||n.push(new zn(e.mapPos(i.from),e.mapPos(i.to),i.size,i.displaySize));return n}ensureLineGaps(t,e){let n=this.heightOracle.lineWrapping,r=n?1e4:2e3,s=r>>1,o=r<<1;if(this.defaultTextDirection!=Mt.LTR&&!n)return[];let l=[],h=(r,o,a,c)=>{if(o-r<s)return;let u=this.state.selection.main,f=[u.from];u.empty||f.push(u.to);for(let t of f)if(t>r&&t<o)return h(r,t-10,a,c),void h(t+10,o,a,c);let d=function(t,e){for(let n of t)if(e(n))return n}(t,(t=>t.from>=a.from&&t.to<=a.to&&Math.abs(t.from-r)<s&&Math.abs(t.to-o)<s&&!f.some((e=>t.from<e&&t.to>e))));if(!d){if(o<a.to&&e&&n&&e.visibleRanges.some((t=>t.from<=o&&t.to>=o))){let t=e.moveToLineBoundary(i.OF.cursor(o),!1,!0).head;t>r&&(o=t)}let t=this.gapSize(a,r,o,c);d=new zn(r,o,t,n||t<2e6?t:2e6)}l.push(d)},a=e=>{if(e.length<o||e.type!=ft.Text)return;let s=function(t,e,n){let r=[],s=t,o=0;return i.om.spans(n,t,e,{span(){},point(t,e){t>s&&(r.push({from:s,to:t}),o+=t-s),s=e}},20),s<e&&(r.push({from:s,to:e}),o+=e-s),{total:o,ranges:r}}(e.from,e.to,this.stateDeco);if(s.total<o)return;let l,a,c=this.scrollTarget?this.scrollTarget.range.head:null;if(n){let t,n,i=r/this.heightOracle.lineLength*this.heightOracle.lineHeight;if(null!=c){let r=jn(s,c),o=((this.visibleBottom-this.visibleTop)/2+i)/e.height;t=r-o,n=r+o}else t=(this.visibleTop-e.top-i)/e.height,n=(this.visibleBottom-e.top+i)/e.height;l=Wn(s,t),a=Wn(s,n)}else{let n=s.total*this.heightOracle.charWidth,i=r*this.heightOracle.charWidth,o=0;if(n>2e6)for(let n of t)n.from>=e.from&&n.from<e.to&&n.size!=n.displaySize&&n.from*this.heightOracle.charWidth+o<this.pixelViewport.left&&(o=n.size-n.displaySize);let h,u,f=this.pixelViewport.left+o,d=this.pixelViewport.right+o;if(null!=c){let t=jn(s,c),e=((d-f)/2+i)/n;h=t-e,u=t+e}else h=(f-i)/n,u=(d+i)/n;l=Wn(s,h),a=Wn(s,u)}l>e.from&&h(e.from,l,e,s),a<e.to&&h(a,e.to,e,s)};for(let t of this.viewportLines)Array.isArray(t.type)?t.type.forEach(a):a(t);return l}gapSize(t,e,n,i){let r=jn(i,n)-jn(i,e);return this.heightOracle.lineWrapping?t.height*r:i.total*this.heightOracle.charWidth*r}updateLineGaps(t){zn.same(t,this.lineGaps)||(this.lineGaps=t,this.lineGapDeco=dt.set(t.map((t=>t.draw(this,this.heightOracle.lineWrapping)))))}computeVisibleRanges(t){let e=this.stateDeco;this.lineGaps.length&&(e=e.concat(this.lineGapDeco));let n=[];i.om.spans(e,this.viewport.from,this.viewport.to,{span(t,e){n.push({from:t,to:e})},point(){}},20);let r=0;if(n.length!=this.visibleRanges.length)r=12;else for(let e=0;e<n.length&&!(8&r);e++){let i=this.visibleRanges[e],s=n[e];i.from==s.from&&i.to==s.to||(r|=4,t&&t.mapPos(i.from,-1)==s.from&&t.mapPos(i.to,1)==s.to||(r|=8))}return this.visibleRanges=n,r}lineBlockAt(t){return t>=this.viewport.from&&t<=this.viewport.to&&this.viewportLines.find((e=>e.from<=t&&e.to>=t))||Gn(this.heightMap.lineAt(t,Cn.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(t){return t>=this.viewportLines[0].top&&t<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find((e=>e.top<=t&&e.bottom>=t))||Gn(this.heightMap.lineAt(this.scaler.fromDOM(t),Cn.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(t){let e=this.lineBlockAtHeight(t+8);return e.from>=this.viewport.from||this.viewportLines[0].top-t>200?e:this.viewportLines[0]}elementAtHeight(t){return Gn(this.heightMap.blockAt(this.scaler.fromDOM(t),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class _n{constructor(t,e){this.from=t,this.to=e}}function Wn({total:t,ranges:e},n){if(n<=0)return e[0].from;if(n>=1)return e[e.length-1].to;let i=Math.floor(t*n);for(let t=0;;t++){let{from:n,to:r}=e[t],s=r-n;if(i<=s)return n+i;i-=s}}function jn(t,e){let n=0;for(let{from:i,to:r}of t.ranges){if(e<=r){n+=e-i;break}n+=r-i}return n/t.total}const qn={toDOM:t=>t,fromDOM:t=>t,scale:1,eq(t){return t==this}};class Kn{constructor(t,e,n){let i=0,r=0,s=0;this.viewports=n.map((({from:n,to:r})=>{let s=e.lineAt(n,Cn.ByPos,t,0,0).top,o=e.lineAt(r,Cn.ByPos,t,0,0).bottom;return i+=o-s,{from:n,to:r,top:s,bottom:o,domTop:0,domBottom:0}})),this.scale=(7e6-i)/(e.height-i);for(let t of this.viewports)t.domTop=s+(t.top-r)*this.scale,s=t.domBottom=t.domTop+(t.bottom-t.top),r=t.bottom}toDOM(t){for(let e=0,n=0,i=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.top)return i+(t-n)*this.scale;if(t<=r.bottom)return r.domTop+(t-r.top);n=r.bottom,i=r.domBottom}}fromDOM(t){for(let e=0,n=0,i=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.domTop)return n+(t-i)/this.scale;if(t<=r.domBottom)return r.top+(t-r.domTop);n=r.bottom,i=r.domBottom}}eq(t){return t instanceof Kn&&this.scale==t.scale&&this.viewports.length==t.viewports.length&&this.viewports.every(((e,n)=>e.from==t.viewports[n].from&&e.to==t.viewports[n].to))}}function Gn(t,e){if(1==e.scale)return t;let n=e.toDOM(t.top),i=e.toDOM(t.bottom);return new Mn(t.from,t.length,n,i-n,Array.isArray(t._content)?t._content.map((t=>Gn(t,e))):t._content)}const Un=i.sj.define({combine:t=>t.join(" ")}),Yn=i.sj.define({combine:t=>t.indexOf(!0)>-1}),Jn=r.G.newName(),Xn=r.G.newName(),Zn=r.G.newName(),Qn={"&light":"."+Xn,"&dark":"."+Zn};function ti(t,e,n){return new r.G(e,{finish:e=>/&/.test(e)?e.replace(/&\w*/,(e=>{if("&"==e)return t;if(!n||!n[e])throw new RangeError(`Unsupported selector: ${e}`);return n[e]})):t+" "+e})}const ei=ti("."+Jn,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0,overflowAnchor:"none"},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#ddd"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0,zIndex:300},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top",userSelect:"none"},".cm-highlightSpace":{backgroundImage:"radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",backgroundPosition:"center"},".cm-highlightTab":{backgroundImage:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},Qn),ni={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},ii=X.ie&&X.ie_version<=11;class ri{constructor(t){this.view=t,this.active=!1,this.editContext=null,this.selectionRange=new S,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=t.contentDOM,this.observer=new MutationObserver((e=>{for(let t of e)this.queue.push(t);(X.ie&&X.ie_version<=11||X.ios&&t.composing)&&e.some((t=>"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length))?this.flushSoon():this.flush()})),!window.EditContext||!1===t.constructor.EDIT_CONTEXT||X.chrome&&X.chrome_version<126||(this.editContext=new li(t),t.state.facet(oe)&&(t.contentDOM.editContext=this.editContext.editContext)),ii&&(this.onCharData=t=>{this.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia&&(this.printQuery=window.matchMedia("print")),"function"==typeof ResizeObserver&&(this.resizeScroll=new ResizeObserver((()=>{var t;(null===(t=this.view.docView)||void 0===t?void 0:t.lastUpdate)<Date.now()-75&&this.onResize()})),this.resizeScroll.observe(t.scrollDOM)),this.addWindowListeners(this.win=t.win),this.start(),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((t=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),t.length>0&&t[t.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{threshold:[0,.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((t=>{t.length>0&&t[t.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange()}onScrollChanged(t){this.view.inputState.runHandlers("scroll",t),this.intersecting&&this.view.measure()}onScroll(t){this.intersecting&&this.flush(!1),this.editContext&&this.view.requestMeasure(this.editContext.measureReq),this.onScrollChanged(t)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(t){("change"!=t.type&&t.type||t.matches)&&(this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500))}updateGaps(t){if(this.gapIntersection&&(t.length!=this.gaps.length||this.gaps.some(((e,n)=>e!=t[n])))){this.gapIntersection.disconnect();for(let e of t)this.gapIntersection.observe(e);this.gaps=t}}onSelectionChange(t){let e=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:n}=this,i=this.selectionRange;if(n.state.facet(oe)?n.root.activeElement!=this.dom:!d(this.dom,i))return;let r=i.anchorNode&&n.docView.nearest(i.anchorNode);r&&r.ignoreEvent(t)?e||(this.selectionChanged=!1):(X.ie&&X.ie_version<=11||X.android&&X.chrome)&&!n.state.selection.main.empty&&i.focusNode&&g(i.focusNode,i.focusOffset,i.anchorNode,i.anchorOffset)?this.flushSoon():this.flush(!1)}readSelectionRange(){let{view:t}=this,e=u(t.root);if(!e)return!1;let n=X.safari&&11==t.root.nodeType&&t.root.activeElement==this.dom&&function(t,e){if(e.getComposedRanges){let n=e.getComposedRanges(t.root)[0];if(n)return oi(t,n)}let n=null;function i(t){t.preventDefault(),t.stopImmediatePropagation(),n=t.getTargetRanges()[0]}return t.contentDOM.addEventListener("beforeinput",i,!0),t.dom.ownerDocument.execCommand("indent"),t.contentDOM.removeEventListener("beforeinput",i,!0),n?oi(t,n):null}(this.view,e)||e;if(!n||this.selectionRange.eq(n))return!1;let i=d(this.dom,n);return i&&!this.selectionChanged&&t.inputState.lastFocusTime>Date.now()-200&&t.inputState.lastTouchTime<Date.now()-300&&function(t,e){let n=e.focusNode,i=e.focusOffset;if(!n||e.anchorNode!=n||e.anchorOffset!=i)return!1;for(i=Math.min(i,y(n));;)if(i){if(1!=n.nodeType)return!1;let t=n.childNodes[i-1];"false"==t.contentEditable?i--:(n=t,i=y(n))}else{if(n==t)return!0;i=m(n),n=n.parentNode}}(this.dom,n)?(this.view.inputState.lastFocusTime=0,t.docView.updateSelection(),!1):(this.selectionRange.setRange(n),i&&(this.selectionChanged=!0),!0)}setSelectionRange(t,e){this.selectionRange.set(t.node,t.offset,e.node,e.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let t=0,e=null;for(let n=this.dom;n;)if(1==n.nodeType)!e&&t<this.scrollTargets.length&&this.scrollTargets[t]==n?t++:e||(e=this.scrollTargets.slice(0,t)),e&&e.push(n),n=n.assignedSlot||n.parentNode;else{if(11!=n.nodeType)break;n=n.host}if(t<this.scrollTargets.length&&!e&&(e=this.scrollTargets.slice(0,t)),e){for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);for(let t of this.scrollTargets=e)t.addEventListener("scroll",this.onScroll)}}ignore(t){if(!this.active)return t();try{return this.stop(),t()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,ni),ii&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),ii&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(t,e){var n;if(!this.delayedAndroidKey){let t=()=>{let t=this.delayedAndroidKey;t&&(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=t.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&t.force&&T(this.dom,t.key,t.keyCode))};this.flushingAndroidKey=this.view.win.requestAnimationFrame(t)}this.delayedAndroidKey&&"Enter"!=t||(this.delayedAndroidKey={key:t,keyCode:e,force:this.lastChange<Date.now()-50||!!(null===(n=this.delayedAndroidKey)||void 0===n?void 0:n.force)})}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=this.view.win.requestAnimationFrame((()=>{this.delayedFlush=-1,this.flush()})))}forceFlush(){this.delayedFlush>=0&&(this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1),this.flush()}pendingRecords(){for(let t of this.observer.takeRecords())this.queue.push(t);return this.queue}processRecords(){let t=this.pendingRecords();t.length&&(this.queue=[]);let e=-1,n=-1,i=!1;for(let r of t){let t=this.readMutation(r);t&&(t.typeOver&&(i=!0),-1==e?({from:e,to:n}=t):(e=Math.min(t.from,e),n=Math.max(t.to,n)))}return{from:e,to:n,typeOver:i}}readChange(){let{from:t,to:e,typeOver:n}=this.processRecords(),i=this.selectionChanged&&d(this.dom,this.selectionRange);if(t<0&&!i)return null;t>-1&&(this.lastChange=Date.now()),this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let r=new _e(this.view,t,e,n);return this.view.docView.domChanged={newSel:r.newSel?r.newSel.main:null},r}flush(t=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;t&&this.readSelectionRange();let e=this.readChange();if(!e)return this.view.requestMeasure(),!1;let n=this.view.state,i=We(this.view,e);return this.view.state==n&&(e.domChanged||e.newSel&&!e.newSel.main.eq(this.view.state.selection.main))&&this.view.update([]),i}readMutation(t){let e=this.view.docView.nearest(t.target);if(!e||e.ignoreMutation(t))return null;if(e.markDirty("attributes"==t.type),"attributes"==t.type&&(e.flags|=4),"childList"==t.type){let n=si(e,t.previousSibling||t.target.previousSibling,-1),i=si(e,t.nextSibling||t.target.nextSibling,1);return{from:n?e.posAfter(n):e.posAtStart,to:i?e.posBefore(i):e.posAtEnd,typeOver:!1}}return"characterData"==t.type?{from:e.posAtStart,to:e.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}:null}setWindow(t){t!=this.win&&(this.removeWindowListeners(this.win),this.win=t,this.addWindowListeners(this.win))}addWindowListeners(t){t.addEventListener("resize",this.onResize),this.printQuery?this.printQuery.addEventListener?this.printQuery.addEventListener("change",this.onPrint):this.printQuery.addListener(this.onPrint):t.addEventListener("beforeprint",this.onPrint),t.addEventListener("scroll",this.onScroll),t.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(t){t.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onResize),this.printQuery?this.printQuery.removeEventListener?this.printQuery.removeEventListener("change",this.onPrint):this.printQuery.removeListener(this.onPrint):t.removeEventListener("beforeprint",this.onPrint),t.document.removeEventListener("selectionchange",this.onSelectionChange)}update(t){this.editContext&&(this.editContext.update(t),t.startState.facet(oe)!=t.state.facet(oe)&&(t.view.contentDOM.editContext=t.state.facet(oe)?this.editContext.editContext:null))}destroy(){var t,e,n;this.stop(),null===(t=this.intersection)||void 0===t||t.disconnect(),null===(e=this.gapIntersection)||void 0===e||e.disconnect(),null===(n=this.resizeScroll)||void 0===n||n.disconnect();for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey),this.editContext&&(this.view.contentDOM.editContext=null,this.editContext.destroy())}}function si(t,e,n){for(;e;){let i=N.get(e);if(i&&i.parent==t)return i;let r=e.parentNode;e=r!=t.dom?r:n>0?e.nextSibling:e.previousSibling}return null}function oi(t,e){let n=e.startContainer,i=e.startOffset,r=e.endContainer,s=e.endOffset,o=t.docView.domAtPos(t.state.selection.main.anchor);return g(o.node,o.offset,r,s)&&([n,i,r,s]=[r,s,n,i]),{anchorNode:n,anchorOffset:i,focusNode:r,focusOffset:s}}class li{constructor(t){this.from=0,this.to=0,this.pendingContextChange=null,this.handlers=Object.create(null),this.composing=null,this.resetRange(t.state);let e=this.editContext=new window.EditContext({text:t.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,t.state.selection.main.anchor))),selectionEnd:this.toContextPos(t.state.selection.main.head)});this.handlers.textupdate=e=>{let n=t.state.selection.main,{anchor:r,head:s}=n,o=this.toEditorPos(e.updateRangeStart),l=this.toEditorPos(e.updateRangeEnd);t.inputState.composing>=0&&!this.composing&&(this.composing={contextBase:e.updateRangeStart,editorBase:o,drifted:!1});let h={from:o,to:l,insert:i.EY.of(e.text.split("\n"))};if(h.from==this.from&&r<this.from?h.from=r:h.to==this.to&&r>this.to&&(h.to=r),h.from!=h.to||h.insert.length){if((X.mac||X.android)&&h.from==s-1&&/^\. ?$/.test(e.text)&&"off"==t.contentDOM.getAttribute("autocorrect")&&(h={from:o,to:l,insert:i.EY.of([e.text.replace("."," ")])}),this.pendingContextChange=h,!t.state.readOnly){let n=this.to-this.from+(h.to-h.from+h.insert.length);je(t,h,i.OF.single(this.toEditorPos(e.selectionStart,n),this.toEditorPos(e.selectionEnd,n)))}this.pendingContextChange&&(this.revertPending(t.state),this.setSelection(t.state))}else{let r=i.OF.single(this.toEditorPos(e.selectionStart),this.toEditorPos(e.selectionEnd));r.main.eq(n)||t.dispatch({selection:r,userEvent:"select"})}},this.handlers.characterboundsupdate=n=>{let i=[],r=null;for(let e=this.toEditorPos(n.rangeStart),s=this.toEditorPos(n.rangeEnd);e<s;e++){let n=t.coordsForChar(e);r=n&&new DOMRect(n.left,n.top,n.right-n.left,n.bottom-n.top)||r||new DOMRect,i.push(r)}e.updateCharacterBounds(n.rangeStart,i)},this.handlers.textformatupdate=e=>{let n=[];for(let t of e.getTextFormats()){let e=t.underlineStyle,i=t.underlineThickness;if("None"!=e&&"None"!=i){let r=this.toEditorPos(t.rangeStart),s=this.toEditorPos(t.rangeEnd);if(r<s){let t=`text-decoration: underline ${"Dashed"==e?"dashed ":"Squiggle"==e?"wavy ":""}${"Thin"==i?1:2}px`;n.push(dt.mark({attributes:{style:t}}).range(r,s))}}}t.dispatch({effects:re.of(dt.set(n))})},this.handlers.compositionstart=()=>{t.inputState.composing<0&&(t.inputState.composing=0,t.inputState.compositionFirstChange=!0)},this.handlers.compositionend=()=>{if(t.inputState.composing=-1,t.inputState.compositionFirstChange=null,this.composing){let{drifted:e}=this.composing;this.composing=null,e&&this.reset(t.state)}};for(let t in this.handlers)e.addEventListener(t,this.handlers[t]);this.measureReq={read:t=>{this.editContext.updateControlBounds(t.contentDOM.getBoundingClientRect());let e=u(t.root);e&&e.rangeCount&&this.editContext.updateSelectionBounds(e.getRangeAt(0).getBoundingClientRect())}}}applyEdits(t){let e=0,n=!1,i=this.pendingContextChange;return t.changes.iterChanges(((r,s,o,l,h)=>{if(n)return;let a=h.length-(s-r);if(i&&s>=i.to){if(i.from==r&&i.to==s&&i.insert.eq(h))return i=this.pendingContextChange=null,e+=a,void(this.to+=a);i=null,this.revertPending(t.state)}if(r+=e,(s+=e)<=this.from)this.from+=a,this.to+=a;else if(r<this.to){if(r<this.from||s>this.to||this.to-this.from+h.length>3e4)return void(n=!0);this.editContext.updateText(this.toContextPos(r),this.toContextPos(s),h.toString()),this.to+=a}e+=a})),i&&!n&&this.revertPending(t.state),!n}update(t){let e=this.pendingContextChange,n=t.startState.selection.main;this.composing&&(this.composing.drifted||!t.changes.touchesRange(n.from,n.to)&&t.transactions.some((t=>!t.isUserEvent("input.type")&&t.changes.touchesRange(this.from,this.to))))?(this.composing.drifted=!0,this.composing.editorBase=t.changes.mapPos(this.composing.editorBase)):this.applyEdits(t)&&this.rangeIsValid(t.state)?(t.docChanged||t.selectionSet||e)&&this.setSelection(t.state):(this.pendingContextChange=null,this.reset(t.state)),(t.geometryChanged||t.docChanged||t.selectionSet)&&t.view.requestMeasure(this.measureReq)}resetRange(t){let{head:e}=t.selection.main;this.from=Math.max(0,e-1e4),this.to=Math.min(t.doc.length,e+1e4)}reset(t){this.resetRange(t),this.editContext.updateText(0,this.editContext.text.length,t.doc.sliceString(this.from,this.to)),this.setSelection(t)}revertPending(t){let e=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos(e.from),this.toContextPos(e.from+e.insert.length),t.doc.sliceString(e.from,e.to))}setSelection(t){let{main:e}=t.selection,n=this.toContextPos(Math.max(this.from,Math.min(this.to,e.anchor))),i=this.toContextPos(e.head);this.editContext.selectionStart==n&&this.editContext.selectionEnd==i||this.editContext.updateSelection(n,i)}rangeIsValid(t){let{head:e}=t.selection.main;return!(this.from>0&&e-this.from<500||this.to<t.doc.length&&this.to-e<500||this.to-this.from>3e4)}toEditorPos(t,e=this.to-this.from){t=Math.min(t,e);let n=this.composing;return n&&n.drifted?n.editorBase+(t-n.contextBase):t+this.from}toContextPos(t){let e=this.composing;return e&&e.drifted?e.contextBase+(t-e.editorBase):t-this.from}destroy(){for(let t in this.handlers)this.editContext.removeEventListener(t,this.handlers[t])}}class hi{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return!!this.inputState&&this.inputState.composing>0}get compositionStarted(){return!!this.inputState&&this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(t={}){var e;this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),t.parent&&t.parent.appendChild(this.dom);let{dispatch:n}=t;this.dispatchTransactions=t.dispatchTransactions||n&&(t=>t.forEach((t=>n(t,this))))||(t=>this.update(t)),this.dispatch=this.dispatch.bind(this),this._root=t.root||function(t){for(;t;){if(t&&(9==t.nodeType||11==t.nodeType&&t.host))return t;t=t.assignedSlot||t.parentNode}return null}(t.parent)||document,this.viewState=new Vn(t.state||i.$t.create(t)),t.scrollTo&&t.scrollTo.is(ie)&&(this.viewState.scrollTarget=t.scrollTo.value.clip(this.viewState.state)),this.plugins=this.state.facet(he).map((t=>new ce(t)));for(let t of this.plugins)t.update(this);this.observer=new ri(this),this.inputState=new qe(this),this.inputState.ensureHandlers(this.plugins),this.docView=new Se(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),(null===(e=document.fonts)||void 0===e?void 0:e.ready)&&document.fonts.ready.then((()=>this.requestMeasure()))}dispatch(...t){let e=1==t.length&&t[0]instanceof i.ZX?t:1==t.length&&Array.isArray(t[0])?t[0]:[this.state.update(...t)];this.dispatchTransactions(e,this)}update(t){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let e,n=!1,r=!1,s=this.state;for(let e of t){if(e.startState!=s)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");s=e.state}if(this.destroyed)return void(this.viewState.state=s);let o=this.hasFocus,l=0,h=null;t.some((t=>t.annotation(mn)))?(this.inputState.notifiedFocused=o,l=1):o!=this.inputState.notifiedFocused&&(this.inputState.notifiedFocused=o,h=wn(s,o),h||(l=1));let a=this.observer.delayedAndroidKey,c=null;if(a?(this.observer.clearDelayedAndroidKey(),c=this.observer.readChange(),(c&&!this.state.doc.eq(s.doc)||!this.state.selection.eq(s.selection))&&(c=null)):this.observer.clear(),s.facet(i.$t.phrases)!=this.state.facet(i.$t.phrases))return this.setState(s);e=ke.create(this,s,t),e.flags|=l;let u=this.viewState.scrollTarget;try{this.updateState=2;for(let e of t){if(u&&(u=u.map(e.changes)),e.scrollIntoView){let{main:t}=e.state.selection;u=new ne(t.empty?t:i.OF.cursor(t.head,t.head>t.anchor?-1:1))}for(let t of e.effects)t.is(ie)&&(u=t.value.clip(this.state))}this.viewState.update(e,u),this.bidiCache=ui.update(this.bidiCache,e.changes),e.empty||(this.updatePlugins(e),this.inputState.update(e)),n=this.docView.update(e),this.state.facet(be)!=this.styleModules&&this.mountStyles(),r=this.updateAttrs(),this.showAnnouncements(t),this.docView.updateSelection(n,t.some((t=>t.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(e.startState.facet(Un)!=e.state.facet(Un)&&(this.viewState.mustMeasureContent=!0),(n||r||u||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),n&&this.docViewUpdate(),!e.empty)for(let t of this.state.facet(Ut))try{t(e)}catch(t){se(this.state,t,"update listener")}(h||c)&&Promise.resolve().then((()=>{h&&this.state==h.startState&&this.dispatch(h),c&&!We(this,c)&&a.force&&T(this.contentDOM,a.key,a.keyCode)}))}setState(t){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=t);this.updateState=2;let e=this.hasFocus;try{for(let t of this.plugins)t.destroy(this);this.viewState=new Vn(t),this.plugins=t.facet(he).map((t=>new ce(t))),this.pluginMap.clear();for(let t of this.plugins)t.update(this);this.docView.destroy(),this.docView=new Se(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}e&&this.focus(),this.requestMeasure()}updatePlugins(t){let e=t.startState.facet(he),n=t.state.facet(he);if(e!=n){let i=[];for(let r of n){let n=e.indexOf(r);if(n<0)i.push(new ce(r));else{let e=this.plugins[n];e.mustUpdate=t,i.push(e)}}for(let e of this.plugins)e.mustUpdate!=t&&e.destroy(this);this.plugins=i,this.pluginMap.clear()}else for(let e of this.plugins)e.mustUpdate=t;for(let t=0;t<this.plugins.length;t++)this.plugins[t].update(this);e!=n&&this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let t of this.plugins){let e=t.value;if(e&&e.docViewUpdate)try{e.docViewUpdate(this)}catch(t){se(this.state,t,"doc view update listener")}}}measure(t=!0){if(this.destroyed)return;if(this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.observer.delayedAndroidKey)return this.measureScheduled=-1,void this.requestMeasure();this.measureScheduled=0,t&&this.observer.forceFlush();let e=null,n=this.scrollDOM,i=n.scrollTop*this.scaleY,{scrollAnchorPos:r,scrollAnchorHeight:s}=this.viewState;Math.abs(i-this.viewState.scrollTop)>1&&(s=-1),this.viewState.scrollAnchorHeight=-1;try{for(let t=0;;t++){if(s<0)if(D(n))r=-1,s=this.viewState.heightMap.height;else{let t=this.viewState.scrollAnchorAt(i);r=t.from,s=t.top}this.updateState=1;let o=this.viewState.measure(this);if(!o&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(t>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let l=[];4&o||([this.measureRequests,l]=[l,this.measureRequests]);let h=l.map((t=>{try{return t.read(this)}catch(t){return se(this.state,t),ci}})),a=ke.create(this,this.state,[]),c=!1;a.flags|=o,e?e.flags|=o:e=a,this.updateState=2,a.empty||(this.updatePlugins(a),this.inputState.update(a),this.updateAttrs(),c=this.docView.update(a),c&&this.docViewUpdate());for(let t=0;t<l.length;t++)if(h[t]!=ci)try{let e=l[t];e.write&&e.write(h[t],this)}catch(t){se(this.state,t)}if(c&&this.docView.updateSelection(!0),!a.viewportChanged&&0==this.measureRequests.length){if(this.viewState.editorHeight){if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,s=-1;continue}{let t=(r<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(r).top)-s;if(t>1||t<-1){i+=t,n.scrollTop=i/this.scaleY,s=-1;continue}}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(e&&!e.empty)for(let t of this.state.facet(Ut))t(e)}get themeClasses(){return Jn+" "+(this.state.facet(Yn)?Zn:Xn)+" "+this.state.facet(Un)}updateAttrs(){let t=fi(this,ue,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),e={spellcheck:"false",autocorrect:"off",autocapitalize:"off",writingsuggestions:"false",translate:"no",contenteditable:this.state.facet(oe)?"true":"false",class:"cm-content",style:`${X.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(e["aria-readonly"]="true"),fi(this,fe,e);let n=this.observer.ignore((()=>{let n=at(this.contentDOM,this.contentAttrs,e),i=at(this.dom,this.editorAttrs,t);return n||i}));return this.editorAttrs=t,this.contentAttrs=e,n}showAnnouncements(t){let e=!0;for(let n of t)for(let t of n.effects)t.is(hi.announce)&&(e&&(this.announceDOM.textContent=""),e=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=t.value)}mountStyles(){this.styleModules=this.state.facet(be);let t=this.state.facet(hi.cspNonce);r.G.mount(this.root,this.styleModules.concat(ei).reverse(),t?{nonce:t}:void 0)}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(t){if(this.measureScheduled<0&&(this.measureScheduled=this.win.requestAnimationFrame((()=>this.measure()))),t){if(this.measureRequests.indexOf(t)>-1)return;if(null!=t.key)for(let e=0;e<this.measureRequests.length;e++)if(this.measureRequests[e].key===t.key)return void(this.measureRequests[e]=t);this.measureRequests.push(t)}}plugin(t){let e=this.pluginMap.get(t);return(void 0===e||e&&e.spec!=t)&&this.pluginMap.set(t,e=this.plugins.find((e=>e.spec==t))||null),e&&e.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(t){return this.readMeasured(),this.viewState.elementAtHeight(t)}lineBlockAtHeight(t){return this.readMeasured(),this.viewState.lineBlockAtHeight(t)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(t){return this.viewState.lineBlockAt(t)}get contentHeight(){return this.viewState.contentHeight}moveByChar(t,e,n){return Fe(this,t,Ne(this,t,e,n))}moveByGroup(t,e){return Fe(this,t,Ne(this,t,e,(e=>function(t,e,n){let r=t.state.charCategorizer(e),s=r(n);return t=>{let e=r(t);return s==i.Je.Space&&(s=e),s==e}}(this,t.head,e))))}visualLineSide(t,e){let n=this.bidiSpans(t),r=this.textDirectionAt(t.from),s=n[e?n.length-1:0];return i.OF.cursor(s.side(e,r)+t.from,s.forward(!e,r)?1:-1)}moveToLineBoundary(t,e,n=!0){return function(t,e,n,r){let s=function(t,e,n){let i=t.lineBlockAt(e);if(Array.isArray(i.type)){let t;for(let r of i.type){if(r.from>e)break;if(!(r.to<e)){if(r.from<e&&r.to>e)return r;t&&(r.type!=ft.Text||t.type==r.type&&!(n<0?r.from<e:r.to>e))||(t=r)}}return t||i}return i}(t,e.head,e.assoc||-1),o=r&&s.type==ft.Text&&(t.lineWrapping||s.widgetLineBreaks)?t.coordsAtPos(e.assoc<0&&e.head>s.from?e.head-1:e.head):null;if(o){let e=t.dom.getBoundingClientRect(),r=t.textDirectionAt(s.from),l=t.posAtCoords({x:n==(r==Mt.LTR)?e.right-1:e.left+1,y:(o.top+o.bottom)/2});if(null!=l)return i.OF.cursor(l,n?-1:1)}return i.OF.cursor(n?s.to:s.from,n?-1:1)}(this,t,e,n)}moveVertically(t,e,n){return Fe(this,t,function(t,e,n,r){let s=e.head,o=n?1:-1;if(s==(n?t.state.doc.length:0))return i.OF.cursor(s,e.assoc);let l,h=e.goalColumn,a=t.contentDOM.getBoundingClientRect(),c=t.coordsAtPos(s,e.assoc||-1),u=t.documentTop;if(c)null==h&&(h=c.left-a.left),l=o<0?c.top:c.bottom;else{let e=t.viewState.lineBlockAt(s);null==h&&(h=Math.min(a.right-a.left,t.defaultCharacterWidth*(s-e.from))),l=(o<0?e.top:e.bottom)+u}let f=a.left+h,d=null!=r?r:t.viewState.heightOracle.textHeight>>1;for(let e=0;;e+=10){let n=l+(d+e)*o,r=Pe(t,{x:f,y:n},!1,o);if(n<a.top||n>a.bottom||(o<0?r<s:r>s)){let e=t.docView.coordsForChar(r),s=!e||n<e.top?-1:1;return i.OF.cursor(r,s,void 0,h)}}}(this,t,e,n))}domAtPos(t){return this.docView.domAtPos(t)}posAtDOM(t,e=0){return this.docView.posFromDOM(t,e)}posAtCoords(t,e=!0){return this.readMeasured(),Pe(this,t,e)}coordsAtPos(t,e=1){this.readMeasured();let n=this.docView.coordsAt(t,e);if(!n||n.left==n.right)return n;let i=this.state.doc.lineAt(t),r=this.bidiSpans(i);return b(n,r[Nt.find(r,t-i.from,-1,e)].dir==Mt.LTR==e>0)}coordsForChar(t){return this.readMeasured(),this.docView.coordsForChar(t)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(t){return!this.state.facet(Qt)||t<this.viewport.from||t>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(t))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(t){if(t.length>ai)return Ht(t.length);let e,n=this.textDirectionAt(t.from);for(let i of this.bidiCache)if(i.from==t.from&&i.dir==n&&(i.fresh||It(i.isolates,e=we(this,t))))return i.order;e||(e=we(this,t));let i=function(t,e,n){if(!t)return[new Nt(0,0,e==Ot?1:0)];if(e==Ct&&!n.length&&!Lt.test(t))return Ht(t.length);if(n.length)for(;t.length>Ft.length;)Ft[Ft.length]=256;let i=[],r=e==Ct?0:1;return zt(t,r,r,n,0,t.length,i),i}(t.text,n,e);return this.bidiCache.push(new ui(t.from,t.to,n,e,!0,i)),i}get hasFocus(){var t;return(this.dom.ownerDocument.hasFocus()||X.safari&&(null===(t=this.inputState)||void 0===t?void 0:t.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{C(this.contentDOM),this.docView.updateSelection()}))}setRoot(t){this._root!=t&&(this._root=t,this.observer.setWindow((9==t.nodeType?t:t.ownerDocument).defaultView||window),this.mountStyles())}destroy(){this.root.activeElement==this.contentDOM&&this.contentDOM.blur();for(let t of this.plugins)t.destroy(this);this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(t,e={}){return ie.of(new ne("number"==typeof t?i.OF.cursor(t):t,e.y,e.x,e.yMargin,e.xMargin))}scrollSnapshot(){let{scrollTop:t,scrollLeft:e}=this.scrollDOM,n=this.viewState.scrollAnchorAt(t);return ie.of(new ne(i.OF.cursor(n.from),"start","start",n.top-t,e,!0))}setTabFocusMode(t){null==t?this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1:"boolean"==typeof t?this.inputState.tabFocusMode=t?0:-1:0!=this.inputState.tabFocusMode&&(this.inputState.tabFocusMode=Date.now()+t)}static domEventHandlers(t){return ae.define((()=>({})),{eventHandlers:t})}static domEventObservers(t){return ae.define((()=>({})),{eventObservers:t})}static theme(t,e){let n=r.G.newName(),i=[Un.of(n),be.of(ti(`.${n}`,t))];return e&&e.dark&&i.push(Yn.of(!0)),i}static baseTheme(t){return i.Nb.lowest(be.of(ti("."+Jn,t,Qn)))}static findFromDOM(t){var e;let n=t.querySelector(".cm-content"),i=n&&N.get(n)||N.get(t);return(null===(e=null==i?void 0:i.rootView)||void 0===e?void 0:e.view)||null}}hi.styleModule=be,hi.inputHandler=Yt,hi.clipboardInputFilter=Xt,hi.clipboardOutputFilter=Zt,hi.scrollHandler=ee,hi.focusChangeEffect=Jt,hi.perLineTextDirection=Qt,hi.exceptionSink=Gt,hi.updateListener=Ut,hi.editable=oe,hi.mouseSelectionStyle=Kt,hi.dragMovesSelection=qt,hi.clickAddsSelectionRange=jt,hi.decorations=de,hi.outerDecorations=pe,hi.atomicRanges=ge,hi.bidiIsolatedRanges=me,hi.scrollMargins=ve,hi.darkTheme=Yn,hi.cspNonce=i.sj.define({combine:t=>t.length?t[0]:""}),hi.contentAttributes=fe,hi.editorAttributes=ue,hi.lineWrapping=hi.contentAttributes.of({class:"cm-lineWrapping"}),hi.announce=i.Pe.define();const ai=4096,ci={};class ui{constructor(t,e,n,i,r,s){this.from=t,this.to=e,this.dir=n,this.isolates=i,this.fresh=r,this.order=s}static update(t,e){if(e.empty&&!t.some((t=>t.fresh)))return t;let n=[],i=t.length?t[t.length-1].dir:Mt.LTR;for(let r=Math.max(0,t.length-10);r<t.length;r++){let s=t[r];s.dir!=i||e.touchesRange(s.from,s.to)||n.push(new ui(e.mapPos(s.from,1),e.mapPos(s.to,-1),s.dir,s.isolates,!1,s.order))}return n}}function fi(t,e,n){for(let i=t.state.facet(e),r=i.length-1;r>=0;r--){let e=i[r],s="function"==typeof e?e(t):e;s&&ot(s,n)}return n}const di=X.mac?"mac":X.windows?"win":X.linux?"linux":"key";function pi(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}const gi=i.Nb.default(hi.domEventHandlers({keydown:(t,e)=>function(t,e,n,r){bi=e;let a=function(t){var e=!(l&&t.metaKey&&t.shiftKey&&!t.ctrlKey&&!t.altKey||h&&t.shiftKey&&t.key&&1==t.key.length||"Unidentified"==t.key)&&t.key||(t.shiftKey?o:s)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e}(e),c=(0,i.vS)(a,0),u=(0,i.Fh)(c)==a.length&&" "!=a,f="",d=!1,p=!1,g=!1;vi&&vi.view==n&&vi.scope==r&&(f=vi.prefix+" ",Je.indexOf(e.keyCode)<0&&(p=!0,vi=null));let m,w,v=new Set,y=t=>{if(t){for(let e of t.run)if(!v.has(e)&&(v.add(e),e(n)))return t.stopPropagation&&(g=!0),!0;t.preventDefault&&(t.stopPropagation&&(g=!0),p=!0)}return!1},b=t[r];return b&&(y(b[f+pi(a,e,!u)])?d=!0:u&&(e.altKey||e.metaKey||e.ctrlKey)&&!(X.windows&&e.ctrlKey&&e.altKey)&&(m=s[e.keyCode])&&m!=a?(y(b[f+pi(m,e,!0)])||e.shiftKey&&(w=o[e.keyCode])!=a&&w!=m&&y(b[f+pi(w,e,!1)]))&&(d=!0):u&&e.shiftKey&&y(b[f+pi(a,e,!0)])&&(d=!0),!d&&y(b._any)&&(d=!0)),p&&(d=!0),d&&g&&e.stopPropagation(),bi=null,d}(function(t){let e=t.facet(mi),n=wi.get(e);return n||wi.set(e,n=function(t,e=di){let n=Object.create(null),i=Object.create(null),r=(t,e)=>{let n=i[t];if(null==n)i[t]=e;else if(n!=e)throw new Error("Key binding "+t+" is used both as a regular binding and as a multi-stroke prefix")},s=(t,i,s,o,l)=>{var h,a;let c=n[t]||(n[t]=Object.create(null)),u=i.split(/ (?!$)/).map((t=>function(t,e){const n=t.split(/-(?!$)/);let i,r,s,o,l=n[n.length-1];"Space"==l&&(l=" ");for(let t=0;t<n.length-1;++t){const l=n[t];if(/^(cmd|meta|m)$/i.test(l))o=!0;else if(/^a(lt)?$/i.test(l))i=!0;else if(/^(c|ctrl|control)$/i.test(l))r=!0;else if(/^s(hift)?$/i.test(l))s=!0;else{if(!/^mod$/i.test(l))throw new Error("Unrecognized modifier name: "+l);"mac"==e?o=!0:r=!0}}return i&&(l="Alt-"+l),r&&(l="Ctrl-"+l),o&&(l="Meta-"+l),s&&(l="Shift-"+l),l}(t,e)));for(let e=1;e<u.length;e++){let n=u.slice(0,e).join(" ");r(n,!0),c[n]||(c[n]={preventDefault:!0,stopPropagation:!1,run:[e=>{let i=vi={view:e,prefix:n,scope:t};return setTimeout((()=>{vi==i&&(vi=null)}),yi),!0}]})}let f=u.join(" ");r(f,!1);let d=c[f]||(c[f]={preventDefault:!1,stopPropagation:!1,run:(null===(a=null===(h=c._any)||void 0===h?void 0:h.run)||void 0===a?void 0:a.slice())||[]});s&&d.run.push(s),o&&(d.preventDefault=!0),l&&(d.stopPropagation=!0)};for(let i of t){let t=i.scope?i.scope.split(" "):["editor"];if(i.any)for(let e of t){let t=n[e]||(n[e]=Object.create(null));t._any||(t._any={preventDefault:!1,stopPropagation:!1,run:[]});let{any:r}=i;for(let e in t)t[e].run.push((t=>r(t,bi)))}let r=i[e]||i.key;if(r)for(let e of t)s(e,r,i.run,i.preventDefault,i.stopPropagation),i.shift&&s(e,"Shift-"+r,i.shift,i.preventDefault,i.stopPropagation)}return n}(e.reduce(((t,e)=>t.concat(e)),[]))),n}(e.state),t,e,"editor")})),mi=i.sj.define({enables:gi}),wi=new WeakMap;let vi=null;const yi=4e3;let bi=null;class xi extends i.FB{compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}eq(t){return!1}destroy(t){}}xi.prototype.elementClass="",xi.prototype.toDOM=void 0,xi.prototype.mapMode=i.iR.TrackBefore,xi.prototype.startSide=xi.prototype.endSide=-1,xi.prototype.point=!0;const ki=i.sj.define(),Si=i.sj.define(),Ai=i.sj.define(),Mi=i.sj.define({combine:t=>t.some((t=>t))});function Ci(t){let e=[Oi];return t&&!1===t.fixed&&e.push(Mi.of(!0)),e}const Oi=ae.fromClass(class{constructor(t){this.view=t,this.prevViewport=t.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=t.state.facet(Ai).map((e=>new Ri(t,e)));for(let t of this.gutters)this.dom.appendChild(t.dom);this.fixed=!t.state.facet(Mi),this.fixed&&(this.dom.style.position="sticky"),this.syncGutters(!1),t.scrollDOM.insertBefore(this.dom,t.contentDOM)}update(t){if(this.updateGutters(t)){let e=this.prevViewport,n=t.view.viewport,i=Math.min(e.to,n.to)-Math.max(e.from,n.from);this.syncGutters(i<.8*(n.to-n.from))}t.geometryChanged&&(this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px"),this.view.state.facet(Mi)!=!this.fixed&&(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":""),this.prevViewport=t.view.viewport}syncGutters(t){let e=this.dom.nextSibling;t&&this.dom.remove();let n=i.om.iter(this.view.state.facet(ki),this.view.viewport.from),r=[],s=this.gutters.map((t=>new Di(t,this.view.viewport,-this.view.documentPadding.top)));for(let t of this.view.viewportLineBlocks)if(r.length&&(r=[]),Array.isArray(t.type)){let e=!0;for(let i of t.type)if(i.type==ft.Text&&e){Ei(n,r,i.from);for(let t of s)t.line(this.view,i,r);e=!1}else if(i.widget)for(let t of s)t.widget(this.view,i)}else if(t.type==ft.Text){Ei(n,r,t.from);for(let e of s)e.line(this.view,t,r)}else if(t.widget)for(let e of s)e.widget(this.view,t);for(let t of s)t.finish();t&&this.view.scrollDOM.insertBefore(this.dom,e)}updateGutters(t){let e=t.startState.facet(Ai),n=t.state.facet(Ai),r=t.docChanged||t.heightChanged||t.viewportChanged||!i.om.eq(t.startState.facet(ki),t.state.facet(ki),t.view.viewport.from,t.view.viewport.to);if(e==n)for(let e of this.gutters)e.update(t)&&(r=!0);else{r=!0;let i=[];for(let r of n){let n=e.indexOf(r);n<0?i.push(new Ri(this.view,r)):(this.gutters[n].update(t),i.push(this.gutters[n]))}for(let t of this.gutters)t.dom.remove(),i.indexOf(t)<0&&t.destroy();for(let t of i)this.dom.appendChild(t.dom);this.gutters=i}return r}destroy(){for(let t of this.gutters)t.destroy();this.dom.remove()}},{provide:t=>hi.scrollMargins.of((e=>{let n=e.plugin(t);return n&&0!=n.gutters.length&&n.fixed?e.textDirection==Mt.LTR?{left:n.dom.offsetWidth*e.scaleX}:{right:n.dom.offsetWidth*e.scaleX}:null}))});function Ti(t){return Array.isArray(t)?t:[t]}function Ei(t,e,n){for(;t.value&&t.from<=n;)t.from==n&&e.push(t.value),t.next()}class Di{constructor(t,e,n){this.gutter=t,this.height=n,this.i=0,this.cursor=i.om.iter(t.markers,e.from)}addElement(t,e,n){let{gutter:i}=this,r=(e.top-this.height)/t.scaleY,s=e.height/t.scaleY;if(this.i==i.elements.length){let e=new Bi(t,s,r,n);i.elements.push(e),i.dom.appendChild(e.dom)}else i.elements[this.i].update(t,s,r,n);this.height=e.bottom,this.i++}line(t,e,n){let i=[];Ei(this.cursor,i,e.from),n.length&&(i=i.concat(n));let r=this.gutter.config.lineMarker(t,e,i);r&&i.unshift(r);let s=this.gutter;(0!=i.length||s.config.renderEmptyElements)&&this.addElement(t,e,i)}widget(t,e){let n=this.gutter.config.widgetMarker(t,e.widget,e),i=n?[n]:null;for(let n of t.state.facet(Si)){let r=n(t,e.widget,e);r&&(i||(i=[])).push(r)}i&&this.addElement(t,e,i)}finish(){let t=this.gutter;for(;t.elements.length>this.i;){let e=t.elements.pop();t.dom.removeChild(e.dom),e.destroy()}}}class Ri{constructor(t,e){this.view=t,this.config=e,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let n in e.domEventHandlers)this.dom.addEventListener(n,(i=>{let r,s=i.target;if(s!=this.dom&&this.dom.contains(s)){for(;s.parentNode!=this.dom;)s=s.parentNode;let t=s.getBoundingClientRect();r=(t.top+t.bottom)/2}else r=i.clientY;let o=t.lineBlockAtHeight(r-t.documentTop);e.domEventHandlers[n](t,o,i)&&i.preventDefault()}));this.markers=Ti(e.markers(t)),e.initialSpacer&&(this.spacer=new Bi(t,0,0,[e.initialSpacer(t)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none")}update(t){let e=this.markers;if(this.markers=Ti(this.config.markers(t.view)),this.spacer&&this.config.updateSpacer){let e=this.config.updateSpacer(this.spacer.markers[0],t);e!=this.spacer.markers[0]&&this.spacer.update(t.view,0,0,[e])}let n=t.view.viewport;return!i.om.eq(this.markers,e,n.from,n.to)||!!this.config.lineMarkerChange&&this.config.lineMarkerChange(t)}destroy(){for(let t of this.elements)t.destroy()}}class Bi{constructor(t,e,n,i){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(t,e,n,i)}update(t,e,n,i){this.height!=e&&(this.height=e,this.dom.style.height=e+"px"),this.above!=n&&(this.dom.style.marginTop=(this.above=n)?n+"px":""),function(t,e){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!t[n].compare(e[n]))return!1;return!0}(this.markers,i)||this.setMarkers(t,i)}setMarkers(t,e){let n="cm-gutterElement",i=this.dom.firstChild;for(let r=0,s=0;;){let o=s,l=r<e.length?e[r++]:null,h=!1;if(l){let t=l.elementClass;t&&(n+=" "+t);for(let t=s;t<this.markers.length;t++)if(this.markers[t].compare(l)){o=t,h=!0;break}}else o=this.markers.length;for(;s<o;){let t=this.markers[s++];if(t.toDOM){t.destroy(i);let e=i.nextSibling;i.remove(),i=e}}if(!l)break;l.toDOM&&(h?i=i.nextSibling:this.dom.insertBefore(l.toDOM(t),i)),h&&s++}this.dom.className=n,this.markers=e}destroy(){this.setMarkers(null,[])}}const Pi=i.sj.define(),Li=i.sj.define(),Ni=i.sj.define({combine:t=>(0,i.QR)(t,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(t,e){let n=Object.assign({},t);for(let t in e){let i=n[t],r=e[t];n[t]=i?(t,e,n)=>i(t,e,n)||r(t,e,n):r}return n}})});class Ii extends xi{constructor(t){super(),this.number=t}eq(t){return this.number==t.number}toDOM(){return document.createTextNode(this.number)}}function Fi(t,e){return t.state.facet(Ni).formatNumber(e,t.state)}const $i=Ai.compute([Ni],(t=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers:t=>t.state.facet(Pi),lineMarker:(t,e,n)=>n.some((t=>t.toDOM))?null:new Ii(Fi(t,t.state.doc.lineAt(e.from).number)),widgetMarker:(t,e,n)=>{for(let i of t.state.facet(Li)){let r=i(t,e,n);if(r)return r}return null},lineMarkerChange:t=>t.startState.facet(Ni)!=t.state.facet(Ni),initialSpacer:t=>new Ii(Fi(t,Hi(t.state.doc.lines))),updateSpacer(t,e){let n=Fi(e.view,Hi(e.view.state.doc.lines));return n==t.number?t:new Ii(n)},domEventHandlers:t.facet(Ni).domEventHandlers})));function zi(t={}){return[Ni.of(t),Ci(),$i]}function Hi(t){let e=9;for(;e<t;)e=10*e+9;return e}const Vi=new class extends xi{constructor(){super(...arguments),this.elementClass="cm-activeLineGutter"}},_i=ki.compute(["selection"],(t=>{let e=[],n=-1;for(let i of t.selection.ranges){let r=t.doc.lineAt(i.head).from;r>n&&(n=r,e.push(Vi.range(r)))}return i.om.of(e)}));function Wi(){return _i}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,