@top Program { instruction* }

@skip { Space | LineComment }

instruction {
    affectation | procedure
}

affectation {
    Var
    Equal
    expression
}

procedure {
    Func
    arguments?
    ParClose
}

function {
    Func
    arguments?
    ParClose
}

arguments {
    expression
    nextArgument*
}

nextArgument {
    Comma
    expression
}

expression {
    (Var | Num | Hex | Str | function)
    binaryOperator?
}

binaryOperator {
    BinOp
    expression
}

@tokens {
  Var { "$" $[a-zA-Z_0-9]+ }
  Hex { "&" $[0-9a-fA-F]+ }
  Num { "-"? ($[0-9]+ "." $[0-9]+) }
  Str { '"' ("\\\"" | !["])* '"' }
  BinOp { 
    "and" | "or" | "xor" | 
    ">=" | ">" | "<=" | "<" | 
    "==" | "<>" | 
    "^" | "%" | "+" | "-" | "*" | "/" }
  Equal { "=" }
  ParOpen { "(" }
  ParClose { ")" }
  BraOpen { "{" }
  BraClose { "}" }
  SqrOpen { "[" }
  SqrClose { "]" }
  Comma { "," }
  LineComment { "REM " ![\n]* }
  Func { $[a-zA-Z_]+ $[a-zA-Z0-9_]* "(" }
  Space { $[ \t\n\r]+ }
}

@detectDelim
